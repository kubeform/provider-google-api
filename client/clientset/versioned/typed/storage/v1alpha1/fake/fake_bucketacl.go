/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
	v1alpha1 "kubeform.dev/provider-google-api/apis/storage/v1alpha1"
)

// FakeBucketACLs implements BucketACLInterface
type FakeBucketACLs struct {
	Fake *FakeStorageV1alpha1
	ns   string
}

var bucketaclsResource = schema.GroupVersionResource{Group: "storage.google.kubeform.com", Version: "v1alpha1", Resource: "bucketacls"}

var bucketaclsKind = schema.GroupVersionKind{Group: "storage.google.kubeform.com", Version: "v1alpha1", Kind: "BucketACL"}

// Get takes name of the bucketACL, and returns the corresponding bucketACL object, and an error if there is any.
func (c *FakeBucketACLs) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.BucketACL, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(bucketaclsResource, c.ns, name), &v1alpha1.BucketACL{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.BucketACL), err
}

// List takes label and field selectors, and returns the list of BucketACLs that match those selectors.
func (c *FakeBucketACLs) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.BucketACLList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(bucketaclsResource, bucketaclsKind, c.ns, opts), &v1alpha1.BucketACLList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.BucketACLList{ListMeta: obj.(*v1alpha1.BucketACLList).ListMeta}
	for _, item := range obj.(*v1alpha1.BucketACLList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested bucketACLs.
func (c *FakeBucketACLs) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(bucketaclsResource, c.ns, opts))

}

// Create takes the representation of a bucketACL and creates it.  Returns the server's representation of the bucketACL, and an error, if there is any.
func (c *FakeBucketACLs) Create(ctx context.Context, bucketACL *v1alpha1.BucketACL, opts v1.CreateOptions) (result *v1alpha1.BucketACL, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(bucketaclsResource, c.ns, bucketACL), &v1alpha1.BucketACL{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.BucketACL), err
}

// Update takes the representation of a bucketACL and updates it. Returns the server's representation of the bucketACL, and an error, if there is any.
func (c *FakeBucketACLs) Update(ctx context.Context, bucketACL *v1alpha1.BucketACL, opts v1.UpdateOptions) (result *v1alpha1.BucketACL, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(bucketaclsResource, c.ns, bucketACL), &v1alpha1.BucketACL{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.BucketACL), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeBucketACLs) UpdateStatus(ctx context.Context, bucketACL *v1alpha1.BucketACL, opts v1.UpdateOptions) (*v1alpha1.BucketACL, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(bucketaclsResource, "status", c.ns, bucketACL), &v1alpha1.BucketACL{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.BucketACL), err
}

// Delete takes name of the bucketACL and deletes it. Returns an error if one occurs.
func (c *FakeBucketACLs) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(bucketaclsResource, c.ns, name), &v1alpha1.BucketACL{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeBucketACLs) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(bucketaclsResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &v1alpha1.BucketACLList{})
	return err
}

// Patch applies the patch and returns the patched bucketACL.
func (c *FakeBucketACLs) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.BucketACL, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(bucketaclsResource, c.ns, name, pt, data, subresources...), &v1alpha1.BucketACL{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.BucketACL), err
}
