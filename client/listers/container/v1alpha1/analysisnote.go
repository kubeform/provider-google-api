/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/container/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AnalysisNoteLister helps list AnalysisNotes.
// All objects returned here must be treated as read-only.
type AnalysisNoteLister interface {
	// List lists all AnalysisNotes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AnalysisNote, err error)
	// AnalysisNotes returns an object that can list and get AnalysisNotes.
	AnalysisNotes(namespace string) AnalysisNoteNamespaceLister
	AnalysisNoteListerExpansion
}

// analysisNoteLister implements the AnalysisNoteLister interface.
type analysisNoteLister struct {
	indexer cache.Indexer
}

// NewAnalysisNoteLister returns a new AnalysisNoteLister.
func NewAnalysisNoteLister(indexer cache.Indexer) AnalysisNoteLister {
	return &analysisNoteLister{indexer: indexer}
}

// List lists all AnalysisNotes in the indexer.
func (s *analysisNoteLister) List(selector labels.Selector) (ret []*v1alpha1.AnalysisNote, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AnalysisNote))
	})
	return ret, err
}

// AnalysisNotes returns an object that can list and get AnalysisNotes.
func (s *analysisNoteLister) AnalysisNotes(namespace string) AnalysisNoteNamespaceLister {
	return analysisNoteNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AnalysisNoteNamespaceLister helps list and get AnalysisNotes.
// All objects returned here must be treated as read-only.
type AnalysisNoteNamespaceLister interface {
	// List lists all AnalysisNotes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AnalysisNote, err error)
	// Get retrieves the AnalysisNote from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AnalysisNote, error)
	AnalysisNoteNamespaceListerExpansion
}

// analysisNoteNamespaceLister implements the AnalysisNoteNamespaceLister
// interface.
type analysisNoteNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AnalysisNotes in the indexer for a given namespace.
func (s analysisNoteNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AnalysisNote, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AnalysisNote))
	})
	return ret, err
}

// Get retrieves the AnalysisNote from the indexer for a given namespace and name.
func (s analysisNoteNamespaceLister) Get(name string) (*v1alpha1.AnalysisNote, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("analysisnote"), name)
	}
	return obj.(*v1alpha1.AnalysisNote), nil
}
