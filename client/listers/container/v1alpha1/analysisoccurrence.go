/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/container/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AnalysisOccurrenceLister helps list AnalysisOccurrences.
// All objects returned here must be treated as read-only.
type AnalysisOccurrenceLister interface {
	// List lists all AnalysisOccurrences in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AnalysisOccurrence, err error)
	// AnalysisOccurrences returns an object that can list and get AnalysisOccurrences.
	AnalysisOccurrences(namespace string) AnalysisOccurrenceNamespaceLister
	AnalysisOccurrenceListerExpansion
}

// analysisOccurrenceLister implements the AnalysisOccurrenceLister interface.
type analysisOccurrenceLister struct {
	indexer cache.Indexer
}

// NewAnalysisOccurrenceLister returns a new AnalysisOccurrenceLister.
func NewAnalysisOccurrenceLister(indexer cache.Indexer) AnalysisOccurrenceLister {
	return &analysisOccurrenceLister{indexer: indexer}
}

// List lists all AnalysisOccurrences in the indexer.
func (s *analysisOccurrenceLister) List(selector labels.Selector) (ret []*v1alpha1.AnalysisOccurrence, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AnalysisOccurrence))
	})
	return ret, err
}

// AnalysisOccurrences returns an object that can list and get AnalysisOccurrences.
func (s *analysisOccurrenceLister) AnalysisOccurrences(namespace string) AnalysisOccurrenceNamespaceLister {
	return analysisOccurrenceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AnalysisOccurrenceNamespaceLister helps list and get AnalysisOccurrences.
// All objects returned here must be treated as read-only.
type AnalysisOccurrenceNamespaceLister interface {
	// List lists all AnalysisOccurrences in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AnalysisOccurrence, err error)
	// Get retrieves the AnalysisOccurrence from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AnalysisOccurrence, error)
	AnalysisOccurrenceNamespaceListerExpansion
}

// analysisOccurrenceNamespaceLister implements the AnalysisOccurrenceNamespaceLister
// interface.
type analysisOccurrenceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AnalysisOccurrences in the indexer for a given namespace.
func (s analysisOccurrenceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AnalysisOccurrence, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AnalysisOccurrence))
	})
	return ret, err
}

// Get retrieves the AnalysisOccurrence from the indexer for a given namespace and name.
func (s analysisOccurrenceNamespaceLister) Get(name string) (*v1alpha1.AnalysisOccurrence, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("analysisoccurrence"), name)
	}
	return obj.(*v1alpha1.AnalysisOccurrence), nil
}
