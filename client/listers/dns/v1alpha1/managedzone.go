/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/dns/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ManagedZoneLister helps list ManagedZones.
// All objects returned here must be treated as read-only.
type ManagedZoneLister interface {
	// List lists all ManagedZones in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ManagedZone, err error)
	// ManagedZones returns an object that can list and get ManagedZones.
	ManagedZones(namespace string) ManagedZoneNamespaceLister
	ManagedZoneListerExpansion
}

// managedZoneLister implements the ManagedZoneLister interface.
type managedZoneLister struct {
	indexer cache.Indexer
}

// NewManagedZoneLister returns a new ManagedZoneLister.
func NewManagedZoneLister(indexer cache.Indexer) ManagedZoneLister {
	return &managedZoneLister{indexer: indexer}
}

// List lists all ManagedZones in the indexer.
func (s *managedZoneLister) List(selector labels.Selector) (ret []*v1alpha1.ManagedZone, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ManagedZone))
	})
	return ret, err
}

// ManagedZones returns an object that can list and get ManagedZones.
func (s *managedZoneLister) ManagedZones(namespace string) ManagedZoneNamespaceLister {
	return managedZoneNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ManagedZoneNamespaceLister helps list and get ManagedZones.
// All objects returned here must be treated as read-only.
type ManagedZoneNamespaceLister interface {
	// List lists all ManagedZones in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ManagedZone, err error)
	// Get retrieves the ManagedZone from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ManagedZone, error)
	ManagedZoneNamespaceListerExpansion
}

// managedZoneNamespaceLister implements the ManagedZoneNamespaceLister
// interface.
type managedZoneNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ManagedZones in the indexer for a given namespace.
func (s managedZoneNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ManagedZone, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ManagedZone))
	})
	return ret, err
}

// Get retrieves the ManagedZone from the indexer for a given namespace and name.
func (s managedZoneNamespaceLister) Get(name string) (*v1alpha1.ManagedZone, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("managedzone"), name)
	}
	return obj.(*v1alpha1.ManagedZone), nil
}
