/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-google-api/apis/folder/v1alpha1"
)

// IamAuditConfigLister helps list IamAuditConfigs.
// All objects returned here must be treated as read-only.
type IamAuditConfigLister interface {
	// List lists all IamAuditConfigs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IamAuditConfig, err error)
	// IamAuditConfigs returns an object that can list and get IamAuditConfigs.
	IamAuditConfigs(namespace string) IamAuditConfigNamespaceLister
	IamAuditConfigListerExpansion
}

// iamAuditConfigLister implements the IamAuditConfigLister interface.
type iamAuditConfigLister struct {
	indexer cache.Indexer
}

// NewIamAuditConfigLister returns a new IamAuditConfigLister.
func NewIamAuditConfigLister(indexer cache.Indexer) IamAuditConfigLister {
	return &iamAuditConfigLister{indexer: indexer}
}

// List lists all IamAuditConfigs in the indexer.
func (s *iamAuditConfigLister) List(selector labels.Selector) (ret []*v1alpha1.IamAuditConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IamAuditConfig))
	})
	return ret, err
}

// IamAuditConfigs returns an object that can list and get IamAuditConfigs.
func (s *iamAuditConfigLister) IamAuditConfigs(namespace string) IamAuditConfigNamespaceLister {
	return iamAuditConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IamAuditConfigNamespaceLister helps list and get IamAuditConfigs.
// All objects returned here must be treated as read-only.
type IamAuditConfigNamespaceLister interface {
	// List lists all IamAuditConfigs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IamAuditConfig, err error)
	// Get retrieves the IamAuditConfig from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.IamAuditConfig, error)
	IamAuditConfigNamespaceListerExpansion
}

// iamAuditConfigNamespaceLister implements the IamAuditConfigNamespaceLister
// interface.
type iamAuditConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IamAuditConfigs in the indexer for a given namespace.
func (s iamAuditConfigNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IamAuditConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IamAuditConfig))
	})
	return ret, err
}

// Get retrieves the IamAuditConfig from the indexer for a given namespace and name.
func (s iamAuditConfigNamespaceLister) Get(name string) (*v1alpha1.IamAuditConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("iamauditconfig"), name)
	}
	return obj.(*v1alpha1.IamAuditConfig), nil
}
