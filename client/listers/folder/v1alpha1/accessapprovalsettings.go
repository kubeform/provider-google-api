/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/folder/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AccessApprovalSettingsLister helps list AccessApprovalSettingses.
// All objects returned here must be treated as read-only.
type AccessApprovalSettingsLister interface {
	// List lists all AccessApprovalSettingses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AccessApprovalSettings, err error)
	// AccessApprovalSettingses returns an object that can list and get AccessApprovalSettingses.
	AccessApprovalSettingses(namespace string) AccessApprovalSettingsNamespaceLister
	AccessApprovalSettingsListerExpansion
}

// accessApprovalSettingsLister implements the AccessApprovalSettingsLister interface.
type accessApprovalSettingsLister struct {
	indexer cache.Indexer
}

// NewAccessApprovalSettingsLister returns a new AccessApprovalSettingsLister.
func NewAccessApprovalSettingsLister(indexer cache.Indexer) AccessApprovalSettingsLister {
	return &accessApprovalSettingsLister{indexer: indexer}
}

// List lists all AccessApprovalSettingses in the indexer.
func (s *accessApprovalSettingsLister) List(selector labels.Selector) (ret []*v1alpha1.AccessApprovalSettings, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AccessApprovalSettings))
	})
	return ret, err
}

// AccessApprovalSettingses returns an object that can list and get AccessApprovalSettingses.
func (s *accessApprovalSettingsLister) AccessApprovalSettingses(namespace string) AccessApprovalSettingsNamespaceLister {
	return accessApprovalSettingsNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AccessApprovalSettingsNamespaceLister helps list and get AccessApprovalSettingses.
// All objects returned here must be treated as read-only.
type AccessApprovalSettingsNamespaceLister interface {
	// List lists all AccessApprovalSettingses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AccessApprovalSettings, err error)
	// Get retrieves the AccessApprovalSettings from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AccessApprovalSettings, error)
	AccessApprovalSettingsNamespaceListerExpansion
}

// accessApprovalSettingsNamespaceLister implements the AccessApprovalSettingsNamespaceLister
// interface.
type accessApprovalSettingsNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AccessApprovalSettingses in the indexer for a given namespace.
func (s accessApprovalSettingsNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AccessApprovalSettings, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AccessApprovalSettings))
	})
	return ret, err
}

// Get retrieves the AccessApprovalSettings from the indexer for a given namespace and name.
func (s accessApprovalSettingsNamespaceLister) Get(name string) (*v1alpha1.AccessApprovalSettings, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("accessapprovalsettings"), name)
	}
	return obj.(*v1alpha1.AccessApprovalSettings), nil
}
