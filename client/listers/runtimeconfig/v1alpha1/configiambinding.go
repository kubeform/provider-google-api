/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-google-api/apis/runtimeconfig/v1alpha1"
)

// ConfigIamBindingLister helps list ConfigIamBindings.
// All objects returned here must be treated as read-only.
type ConfigIamBindingLister interface {
	// List lists all ConfigIamBindings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ConfigIamBinding, err error)
	// ConfigIamBindings returns an object that can list and get ConfigIamBindings.
	ConfigIamBindings(namespace string) ConfigIamBindingNamespaceLister
	ConfigIamBindingListerExpansion
}

// configIamBindingLister implements the ConfigIamBindingLister interface.
type configIamBindingLister struct {
	indexer cache.Indexer
}

// NewConfigIamBindingLister returns a new ConfigIamBindingLister.
func NewConfigIamBindingLister(indexer cache.Indexer) ConfigIamBindingLister {
	return &configIamBindingLister{indexer: indexer}
}

// List lists all ConfigIamBindings in the indexer.
func (s *configIamBindingLister) List(selector labels.Selector) (ret []*v1alpha1.ConfigIamBinding, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConfigIamBinding))
	})
	return ret, err
}

// ConfigIamBindings returns an object that can list and get ConfigIamBindings.
func (s *configIamBindingLister) ConfigIamBindings(namespace string) ConfigIamBindingNamespaceLister {
	return configIamBindingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ConfigIamBindingNamespaceLister helps list and get ConfigIamBindings.
// All objects returned here must be treated as read-only.
type ConfigIamBindingNamespaceLister interface {
	// List lists all ConfigIamBindings in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ConfigIamBinding, err error)
	// Get retrieves the ConfigIamBinding from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ConfigIamBinding, error)
	ConfigIamBindingNamespaceListerExpansion
}

// configIamBindingNamespaceLister implements the ConfigIamBindingNamespaceLister
// interface.
type configIamBindingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ConfigIamBindings in the indexer for a given namespace.
func (s configIamBindingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ConfigIamBinding, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConfigIamBinding))
	})
	return ret, err
}

// Get retrieves the ConfigIamBinding from the indexer for a given namespace and name.
func (s configIamBindingNamespaceLister) Get(name string) (*v1alpha1.ConfigIamBinding, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("configiambinding"), name)
	}
	return obj.(*v1alpha1.ConfigIamBinding), nil
}
