/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/runtimeconfig/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ConfigIamMemberLister helps list ConfigIamMembers.
// All objects returned here must be treated as read-only.
type ConfigIamMemberLister interface {
	// List lists all ConfigIamMembers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ConfigIamMember, err error)
	// ConfigIamMembers returns an object that can list and get ConfigIamMembers.
	ConfigIamMembers(namespace string) ConfigIamMemberNamespaceLister
	ConfigIamMemberListerExpansion
}

// configIamMemberLister implements the ConfigIamMemberLister interface.
type configIamMemberLister struct {
	indexer cache.Indexer
}

// NewConfigIamMemberLister returns a new ConfigIamMemberLister.
func NewConfigIamMemberLister(indexer cache.Indexer) ConfigIamMemberLister {
	return &configIamMemberLister{indexer: indexer}
}

// List lists all ConfigIamMembers in the indexer.
func (s *configIamMemberLister) List(selector labels.Selector) (ret []*v1alpha1.ConfigIamMember, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConfigIamMember))
	})
	return ret, err
}

// ConfigIamMembers returns an object that can list and get ConfigIamMembers.
func (s *configIamMemberLister) ConfigIamMembers(namespace string) ConfigIamMemberNamespaceLister {
	return configIamMemberNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ConfigIamMemberNamespaceLister helps list and get ConfigIamMembers.
// All objects returned here must be treated as read-only.
type ConfigIamMemberNamespaceLister interface {
	// List lists all ConfigIamMembers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ConfigIamMember, err error)
	// Get retrieves the ConfigIamMember from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ConfigIamMember, error)
	ConfigIamMemberNamespaceListerExpansion
}

// configIamMemberNamespaceLister implements the ConfigIamMemberNamespaceLister
// interface.
type configIamMemberNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ConfigIamMembers in the indexer for a given namespace.
func (s configIamMemberNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ConfigIamMember, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConfigIamMember))
	})
	return ret, err
}

// Get retrieves the ConfigIamMember from the indexer for a given namespace and name.
func (s configIamMemberNamespaceLister) Get(name string) (*v1alpha1.ConfigIamMember, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("configiammember"), name)
	}
	return obj.(*v1alpha1.ConfigIamMember), nil
}
