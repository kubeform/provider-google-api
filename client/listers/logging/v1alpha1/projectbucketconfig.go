/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-google-api/apis/logging/v1alpha1"
)

// ProjectBucketConfigLister helps list ProjectBucketConfigs.
// All objects returned here must be treated as read-only.
type ProjectBucketConfigLister interface {
	// List lists all ProjectBucketConfigs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ProjectBucketConfig, err error)
	// ProjectBucketConfigs returns an object that can list and get ProjectBucketConfigs.
	ProjectBucketConfigs(namespace string) ProjectBucketConfigNamespaceLister
	ProjectBucketConfigListerExpansion
}

// projectBucketConfigLister implements the ProjectBucketConfigLister interface.
type projectBucketConfigLister struct {
	indexer cache.Indexer
}

// NewProjectBucketConfigLister returns a new ProjectBucketConfigLister.
func NewProjectBucketConfigLister(indexer cache.Indexer) ProjectBucketConfigLister {
	return &projectBucketConfigLister{indexer: indexer}
}

// List lists all ProjectBucketConfigs in the indexer.
func (s *projectBucketConfigLister) List(selector labels.Selector) (ret []*v1alpha1.ProjectBucketConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ProjectBucketConfig))
	})
	return ret, err
}

// ProjectBucketConfigs returns an object that can list and get ProjectBucketConfigs.
func (s *projectBucketConfigLister) ProjectBucketConfigs(namespace string) ProjectBucketConfigNamespaceLister {
	return projectBucketConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ProjectBucketConfigNamespaceLister helps list and get ProjectBucketConfigs.
// All objects returned here must be treated as read-only.
type ProjectBucketConfigNamespaceLister interface {
	// List lists all ProjectBucketConfigs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ProjectBucketConfig, err error)
	// Get retrieves the ProjectBucketConfig from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ProjectBucketConfig, error)
	ProjectBucketConfigNamespaceListerExpansion
}

// projectBucketConfigNamespaceLister implements the ProjectBucketConfigNamespaceLister
// interface.
type projectBucketConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ProjectBucketConfigs in the indexer for a given namespace.
func (s projectBucketConfigNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ProjectBucketConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ProjectBucketConfig))
	})
	return ret, err
}

// Get retrieves the ProjectBucketConfig from the indexer for a given namespace and name.
func (s projectBucketConfigNamespaceLister) Get(name string) (*v1alpha1.ProjectBucketConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("projectbucketconfig"), name)
	}
	return obj.(*v1alpha1.ProjectBucketConfig), nil
}
