/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/logging/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ProjectExclusionLister helps list ProjectExclusions.
// All objects returned here must be treated as read-only.
type ProjectExclusionLister interface {
	// List lists all ProjectExclusions in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ProjectExclusion, err error)
	// ProjectExclusions returns an object that can list and get ProjectExclusions.
	ProjectExclusions(namespace string) ProjectExclusionNamespaceLister
	ProjectExclusionListerExpansion
}

// projectExclusionLister implements the ProjectExclusionLister interface.
type projectExclusionLister struct {
	indexer cache.Indexer
}

// NewProjectExclusionLister returns a new ProjectExclusionLister.
func NewProjectExclusionLister(indexer cache.Indexer) ProjectExclusionLister {
	return &projectExclusionLister{indexer: indexer}
}

// List lists all ProjectExclusions in the indexer.
func (s *projectExclusionLister) List(selector labels.Selector) (ret []*v1alpha1.ProjectExclusion, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ProjectExclusion))
	})
	return ret, err
}

// ProjectExclusions returns an object that can list and get ProjectExclusions.
func (s *projectExclusionLister) ProjectExclusions(namespace string) ProjectExclusionNamespaceLister {
	return projectExclusionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ProjectExclusionNamespaceLister helps list and get ProjectExclusions.
// All objects returned here must be treated as read-only.
type ProjectExclusionNamespaceLister interface {
	// List lists all ProjectExclusions in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ProjectExclusion, err error)
	// Get retrieves the ProjectExclusion from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ProjectExclusion, error)
	ProjectExclusionNamespaceListerExpansion
}

// projectExclusionNamespaceLister implements the ProjectExclusionNamespaceLister
// interface.
type projectExclusionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ProjectExclusions in the indexer for a given namespace.
func (s projectExclusionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ProjectExclusion, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ProjectExclusion))
	})
	return ret, err
}

// Get retrieves the ProjectExclusion from the indexer for a given namespace and name.
func (s projectExclusionNamespaceLister) Get(name string) (*v1alpha1.ProjectExclusion, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("projectexclusion"), name)
	}
	return obj.(*v1alpha1.ProjectExclusion), nil
}
