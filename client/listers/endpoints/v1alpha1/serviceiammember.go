/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-google-api/apis/endpoints/v1alpha1"
)

// ServiceIamMemberLister helps list ServiceIamMembers.
// All objects returned here must be treated as read-only.
type ServiceIamMemberLister interface {
	// List lists all ServiceIamMembers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServiceIamMember, err error)
	// ServiceIamMembers returns an object that can list and get ServiceIamMembers.
	ServiceIamMembers(namespace string) ServiceIamMemberNamespaceLister
	ServiceIamMemberListerExpansion
}

// serviceIamMemberLister implements the ServiceIamMemberLister interface.
type serviceIamMemberLister struct {
	indexer cache.Indexer
}

// NewServiceIamMemberLister returns a new ServiceIamMemberLister.
func NewServiceIamMemberLister(indexer cache.Indexer) ServiceIamMemberLister {
	return &serviceIamMemberLister{indexer: indexer}
}

// List lists all ServiceIamMembers in the indexer.
func (s *serviceIamMemberLister) List(selector labels.Selector) (ret []*v1alpha1.ServiceIamMember, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServiceIamMember))
	})
	return ret, err
}

// ServiceIamMembers returns an object that can list and get ServiceIamMembers.
func (s *serviceIamMemberLister) ServiceIamMembers(namespace string) ServiceIamMemberNamespaceLister {
	return serviceIamMemberNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ServiceIamMemberNamespaceLister helps list and get ServiceIamMembers.
// All objects returned here must be treated as read-only.
type ServiceIamMemberNamespaceLister interface {
	// List lists all ServiceIamMembers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServiceIamMember, err error)
	// Get retrieves the ServiceIamMember from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ServiceIamMember, error)
	ServiceIamMemberNamespaceListerExpansion
}

// serviceIamMemberNamespaceLister implements the ServiceIamMemberNamespaceLister
// interface.
type serviceIamMemberNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ServiceIamMembers in the indexer for a given namespace.
func (s serviceIamMemberNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ServiceIamMember, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServiceIamMember))
	})
	return ret, err
}

// Get retrieves the ServiceIamMember from the indexer for a given namespace and name.
func (s serviceIamMemberNamespaceLister) Get(name string) (*v1alpha1.ServiceIamMember, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("serviceiammember"), name)
	}
	return obj.(*v1alpha1.ServiceIamMember), nil
}
