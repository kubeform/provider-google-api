/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-google-api/apis/endpoints/v1alpha1"
)

// ServiceIamPolicyLister helps list ServiceIamPolicies.
// All objects returned here must be treated as read-only.
type ServiceIamPolicyLister interface {
	// List lists all ServiceIamPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServiceIamPolicy, err error)
	// ServiceIamPolicies returns an object that can list and get ServiceIamPolicies.
	ServiceIamPolicies(namespace string) ServiceIamPolicyNamespaceLister
	ServiceIamPolicyListerExpansion
}

// serviceIamPolicyLister implements the ServiceIamPolicyLister interface.
type serviceIamPolicyLister struct {
	indexer cache.Indexer
}

// NewServiceIamPolicyLister returns a new ServiceIamPolicyLister.
func NewServiceIamPolicyLister(indexer cache.Indexer) ServiceIamPolicyLister {
	return &serviceIamPolicyLister{indexer: indexer}
}

// List lists all ServiceIamPolicies in the indexer.
func (s *serviceIamPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.ServiceIamPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServiceIamPolicy))
	})
	return ret, err
}

// ServiceIamPolicies returns an object that can list and get ServiceIamPolicies.
func (s *serviceIamPolicyLister) ServiceIamPolicies(namespace string) ServiceIamPolicyNamespaceLister {
	return serviceIamPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ServiceIamPolicyNamespaceLister helps list and get ServiceIamPolicies.
// All objects returned here must be treated as read-only.
type ServiceIamPolicyNamespaceLister interface {
	// List lists all ServiceIamPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServiceIamPolicy, err error)
	// Get retrieves the ServiceIamPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ServiceIamPolicy, error)
	ServiceIamPolicyNamespaceListerExpansion
}

// serviceIamPolicyNamespaceLister implements the ServiceIamPolicyNamespaceLister
// interface.
type serviceIamPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ServiceIamPolicies in the indexer for a given namespace.
func (s serviceIamPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ServiceIamPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServiceIamPolicy))
	})
	return ret, err
}

// Get retrieves the ServiceIamPolicy from the indexer for a given namespace and name.
func (s serviceIamPolicyNamespaceLister) Get(name string) (*v1alpha1.ServiceIamPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("serviceiampolicy"), name)
	}
	return obj.(*v1alpha1.ServiceIamPolicy), nil
}
