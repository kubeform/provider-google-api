/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/active/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DirectoryDomainTrustLister helps list DirectoryDomainTrusts.
// All objects returned here must be treated as read-only.
type DirectoryDomainTrustLister interface {
	// List lists all DirectoryDomainTrusts in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DirectoryDomainTrust, err error)
	// DirectoryDomainTrusts returns an object that can list and get DirectoryDomainTrusts.
	DirectoryDomainTrusts(namespace string) DirectoryDomainTrustNamespaceLister
	DirectoryDomainTrustListerExpansion
}

// directoryDomainTrustLister implements the DirectoryDomainTrustLister interface.
type directoryDomainTrustLister struct {
	indexer cache.Indexer
}

// NewDirectoryDomainTrustLister returns a new DirectoryDomainTrustLister.
func NewDirectoryDomainTrustLister(indexer cache.Indexer) DirectoryDomainTrustLister {
	return &directoryDomainTrustLister{indexer: indexer}
}

// List lists all DirectoryDomainTrusts in the indexer.
func (s *directoryDomainTrustLister) List(selector labels.Selector) (ret []*v1alpha1.DirectoryDomainTrust, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DirectoryDomainTrust))
	})
	return ret, err
}

// DirectoryDomainTrusts returns an object that can list and get DirectoryDomainTrusts.
func (s *directoryDomainTrustLister) DirectoryDomainTrusts(namespace string) DirectoryDomainTrustNamespaceLister {
	return directoryDomainTrustNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DirectoryDomainTrustNamespaceLister helps list and get DirectoryDomainTrusts.
// All objects returned here must be treated as read-only.
type DirectoryDomainTrustNamespaceLister interface {
	// List lists all DirectoryDomainTrusts in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DirectoryDomainTrust, err error)
	// Get retrieves the DirectoryDomainTrust from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DirectoryDomainTrust, error)
	DirectoryDomainTrustNamespaceListerExpansion
}

// directoryDomainTrustNamespaceLister implements the DirectoryDomainTrustNamespaceLister
// interface.
type directoryDomainTrustNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DirectoryDomainTrusts in the indexer for a given namespace.
func (s directoryDomainTrustNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DirectoryDomainTrust, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DirectoryDomainTrust))
	})
	return ret, err
}

// Get retrieves the DirectoryDomainTrust from the indexer for a given namespace and name.
func (s directoryDomainTrustNamespaceLister) Get(name string) (*v1alpha1.DirectoryDomainTrust, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("directorydomaintrust"), name)
	}
	return obj.(*v1alpha1.DirectoryDomainTrust), nil
}
