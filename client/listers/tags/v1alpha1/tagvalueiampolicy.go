/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-google-api/apis/tags/v1alpha1"
)

// TagValueIamPolicyLister helps list TagValueIamPolicies.
// All objects returned here must be treated as read-only.
type TagValueIamPolicyLister interface {
	// List lists all TagValueIamPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TagValueIamPolicy, err error)
	// TagValueIamPolicies returns an object that can list and get TagValueIamPolicies.
	TagValueIamPolicies(namespace string) TagValueIamPolicyNamespaceLister
	TagValueIamPolicyListerExpansion
}

// tagValueIamPolicyLister implements the TagValueIamPolicyLister interface.
type tagValueIamPolicyLister struct {
	indexer cache.Indexer
}

// NewTagValueIamPolicyLister returns a new TagValueIamPolicyLister.
func NewTagValueIamPolicyLister(indexer cache.Indexer) TagValueIamPolicyLister {
	return &tagValueIamPolicyLister{indexer: indexer}
}

// List lists all TagValueIamPolicies in the indexer.
func (s *tagValueIamPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.TagValueIamPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TagValueIamPolicy))
	})
	return ret, err
}

// TagValueIamPolicies returns an object that can list and get TagValueIamPolicies.
func (s *tagValueIamPolicyLister) TagValueIamPolicies(namespace string) TagValueIamPolicyNamespaceLister {
	return tagValueIamPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TagValueIamPolicyNamespaceLister helps list and get TagValueIamPolicies.
// All objects returned here must be treated as read-only.
type TagValueIamPolicyNamespaceLister interface {
	// List lists all TagValueIamPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TagValueIamPolicy, err error)
	// Get retrieves the TagValueIamPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.TagValueIamPolicy, error)
	TagValueIamPolicyNamespaceListerExpansion
}

// tagValueIamPolicyNamespaceLister implements the TagValueIamPolicyNamespaceLister
// interface.
type tagValueIamPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TagValueIamPolicies in the indexer for a given namespace.
func (s tagValueIamPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TagValueIamPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TagValueIamPolicy))
	})
	return ret, err
}

// Get retrieves the TagValueIamPolicy from the indexer for a given namespace and name.
func (s tagValueIamPolicyNamespaceLister) Get(name string) (*v1alpha1.TagValueIamPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("tagvalueiampolicy"), name)
	}
	return obj.(*v1alpha1.TagValueIamPolicy), nil
}
