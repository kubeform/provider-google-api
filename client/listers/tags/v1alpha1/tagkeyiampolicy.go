/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-google-api/apis/tags/v1alpha1"
)

// TagKeyIamPolicyLister helps list TagKeyIamPolicies.
// All objects returned here must be treated as read-only.
type TagKeyIamPolicyLister interface {
	// List lists all TagKeyIamPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TagKeyIamPolicy, err error)
	// TagKeyIamPolicies returns an object that can list and get TagKeyIamPolicies.
	TagKeyIamPolicies(namespace string) TagKeyIamPolicyNamespaceLister
	TagKeyIamPolicyListerExpansion
}

// tagKeyIamPolicyLister implements the TagKeyIamPolicyLister interface.
type tagKeyIamPolicyLister struct {
	indexer cache.Indexer
}

// NewTagKeyIamPolicyLister returns a new TagKeyIamPolicyLister.
func NewTagKeyIamPolicyLister(indexer cache.Indexer) TagKeyIamPolicyLister {
	return &tagKeyIamPolicyLister{indexer: indexer}
}

// List lists all TagKeyIamPolicies in the indexer.
func (s *tagKeyIamPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.TagKeyIamPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TagKeyIamPolicy))
	})
	return ret, err
}

// TagKeyIamPolicies returns an object that can list and get TagKeyIamPolicies.
func (s *tagKeyIamPolicyLister) TagKeyIamPolicies(namespace string) TagKeyIamPolicyNamespaceLister {
	return tagKeyIamPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TagKeyIamPolicyNamespaceLister helps list and get TagKeyIamPolicies.
// All objects returned here must be treated as read-only.
type TagKeyIamPolicyNamespaceLister interface {
	// List lists all TagKeyIamPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TagKeyIamPolicy, err error)
	// Get retrieves the TagKeyIamPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.TagKeyIamPolicy, error)
	TagKeyIamPolicyNamespaceListerExpansion
}

// tagKeyIamPolicyNamespaceLister implements the TagKeyIamPolicyNamespaceLister
// interface.
type tagKeyIamPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TagKeyIamPolicies in the indexer for a given namespace.
func (s tagKeyIamPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TagKeyIamPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TagKeyIamPolicy))
	})
	return ret, err
}

// Get retrieves the TagKeyIamPolicy from the indexer for a given namespace and name.
func (s tagKeyIamPolicyNamespaceLister) Get(name string) (*v1alpha1.TagKeyIamPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("tagkeyiampolicy"), name)
	}
	return obj.(*v1alpha1.TagKeyIamPolicy), nil
}
