/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/tags/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TagKeyIamMemberLister helps list TagKeyIamMembers.
// All objects returned here must be treated as read-only.
type TagKeyIamMemberLister interface {
	// List lists all TagKeyIamMembers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TagKeyIamMember, err error)
	// TagKeyIamMembers returns an object that can list and get TagKeyIamMembers.
	TagKeyIamMembers(namespace string) TagKeyIamMemberNamespaceLister
	TagKeyIamMemberListerExpansion
}

// tagKeyIamMemberLister implements the TagKeyIamMemberLister interface.
type tagKeyIamMemberLister struct {
	indexer cache.Indexer
}

// NewTagKeyIamMemberLister returns a new TagKeyIamMemberLister.
func NewTagKeyIamMemberLister(indexer cache.Indexer) TagKeyIamMemberLister {
	return &tagKeyIamMemberLister{indexer: indexer}
}

// List lists all TagKeyIamMembers in the indexer.
func (s *tagKeyIamMemberLister) List(selector labels.Selector) (ret []*v1alpha1.TagKeyIamMember, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TagKeyIamMember))
	})
	return ret, err
}

// TagKeyIamMembers returns an object that can list and get TagKeyIamMembers.
func (s *tagKeyIamMemberLister) TagKeyIamMembers(namespace string) TagKeyIamMemberNamespaceLister {
	return tagKeyIamMemberNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TagKeyIamMemberNamespaceLister helps list and get TagKeyIamMembers.
// All objects returned here must be treated as read-only.
type TagKeyIamMemberNamespaceLister interface {
	// List lists all TagKeyIamMembers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TagKeyIamMember, err error)
	// Get retrieves the TagKeyIamMember from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.TagKeyIamMember, error)
	TagKeyIamMemberNamespaceListerExpansion
}

// tagKeyIamMemberNamespaceLister implements the TagKeyIamMemberNamespaceLister
// interface.
type tagKeyIamMemberNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TagKeyIamMembers in the indexer for a given namespace.
func (s tagKeyIamMemberNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TagKeyIamMember, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TagKeyIamMember))
	})
	return ret, err
}

// Get retrieves the TagKeyIamMember from the indexer for a given namespace and name.
func (s tagKeyIamMemberNamespaceLister) Get(name string) (*v1alpha1.TagKeyIamMember, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("tagkeyiammember"), name)
	}
	return obj.(*v1alpha1.TagKeyIamMember), nil
}
