/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/tags/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TagValueIamBindingLister helps list TagValueIamBindings.
// All objects returned here must be treated as read-only.
type TagValueIamBindingLister interface {
	// List lists all TagValueIamBindings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TagValueIamBinding, err error)
	// TagValueIamBindings returns an object that can list and get TagValueIamBindings.
	TagValueIamBindings(namespace string) TagValueIamBindingNamespaceLister
	TagValueIamBindingListerExpansion
}

// tagValueIamBindingLister implements the TagValueIamBindingLister interface.
type tagValueIamBindingLister struct {
	indexer cache.Indexer
}

// NewTagValueIamBindingLister returns a new TagValueIamBindingLister.
func NewTagValueIamBindingLister(indexer cache.Indexer) TagValueIamBindingLister {
	return &tagValueIamBindingLister{indexer: indexer}
}

// List lists all TagValueIamBindings in the indexer.
func (s *tagValueIamBindingLister) List(selector labels.Selector) (ret []*v1alpha1.TagValueIamBinding, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TagValueIamBinding))
	})
	return ret, err
}

// TagValueIamBindings returns an object that can list and get TagValueIamBindings.
func (s *tagValueIamBindingLister) TagValueIamBindings(namespace string) TagValueIamBindingNamespaceLister {
	return tagValueIamBindingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TagValueIamBindingNamespaceLister helps list and get TagValueIamBindings.
// All objects returned here must be treated as read-only.
type TagValueIamBindingNamespaceLister interface {
	// List lists all TagValueIamBindings in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TagValueIamBinding, err error)
	// Get retrieves the TagValueIamBinding from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.TagValueIamBinding, error)
	TagValueIamBindingNamespaceListerExpansion
}

// tagValueIamBindingNamespaceLister implements the TagValueIamBindingNamespaceLister
// interface.
type tagValueIamBindingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TagValueIamBindings in the indexer for a given namespace.
func (s tagValueIamBindingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TagValueIamBinding, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TagValueIamBinding))
	})
	return ret, err
}

// Get retrieves the TagValueIamBinding from the indexer for a given namespace and name.
func (s tagValueIamBindingNamespaceLister) Get(name string) (*v1alpha1.TagValueIamBinding, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("tagvalueiambinding"), name)
	}
	return obj.(*v1alpha1.TagValueIamBinding), nil
}
