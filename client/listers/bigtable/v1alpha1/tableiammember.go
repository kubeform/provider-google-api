/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-google-api/apis/bigtable/v1alpha1"
)

// TableIamMemberLister helps list TableIamMembers.
// All objects returned here must be treated as read-only.
type TableIamMemberLister interface {
	// List lists all TableIamMembers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TableIamMember, err error)
	// TableIamMembers returns an object that can list and get TableIamMembers.
	TableIamMembers(namespace string) TableIamMemberNamespaceLister
	TableIamMemberListerExpansion
}

// tableIamMemberLister implements the TableIamMemberLister interface.
type tableIamMemberLister struct {
	indexer cache.Indexer
}

// NewTableIamMemberLister returns a new TableIamMemberLister.
func NewTableIamMemberLister(indexer cache.Indexer) TableIamMemberLister {
	return &tableIamMemberLister{indexer: indexer}
}

// List lists all TableIamMembers in the indexer.
func (s *tableIamMemberLister) List(selector labels.Selector) (ret []*v1alpha1.TableIamMember, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TableIamMember))
	})
	return ret, err
}

// TableIamMembers returns an object that can list and get TableIamMembers.
func (s *tableIamMemberLister) TableIamMembers(namespace string) TableIamMemberNamespaceLister {
	return tableIamMemberNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TableIamMemberNamespaceLister helps list and get TableIamMembers.
// All objects returned here must be treated as read-only.
type TableIamMemberNamespaceLister interface {
	// List lists all TableIamMembers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TableIamMember, err error)
	// Get retrieves the TableIamMember from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.TableIamMember, error)
	TableIamMemberNamespaceListerExpansion
}

// tableIamMemberNamespaceLister implements the TableIamMemberNamespaceLister
// interface.
type tableIamMemberNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TableIamMembers in the indexer for a given namespace.
func (s tableIamMemberNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TableIamMember, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TableIamMember))
	})
	return ret, err
}

// Get retrieves the TableIamMember from the indexer for a given namespace and name.
func (s tableIamMemberNamespaceLister) Get(name string) (*v1alpha1.TableIamMember, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("tableiammember"), name)
	}
	return obj.(*v1alpha1.TableIamMember), nil
}
