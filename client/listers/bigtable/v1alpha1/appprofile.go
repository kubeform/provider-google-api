/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/bigtable/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AppProfileLister helps list AppProfiles.
// All objects returned here must be treated as read-only.
type AppProfileLister interface {
	// List lists all AppProfiles in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AppProfile, err error)
	// AppProfiles returns an object that can list and get AppProfiles.
	AppProfiles(namespace string) AppProfileNamespaceLister
	AppProfileListerExpansion
}

// appProfileLister implements the AppProfileLister interface.
type appProfileLister struct {
	indexer cache.Indexer
}

// NewAppProfileLister returns a new AppProfileLister.
func NewAppProfileLister(indexer cache.Indexer) AppProfileLister {
	return &appProfileLister{indexer: indexer}
}

// List lists all AppProfiles in the indexer.
func (s *appProfileLister) List(selector labels.Selector) (ret []*v1alpha1.AppProfile, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AppProfile))
	})
	return ret, err
}

// AppProfiles returns an object that can list and get AppProfiles.
func (s *appProfileLister) AppProfiles(namespace string) AppProfileNamespaceLister {
	return appProfileNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AppProfileNamespaceLister helps list and get AppProfiles.
// All objects returned here must be treated as read-only.
type AppProfileNamespaceLister interface {
	// List lists all AppProfiles in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AppProfile, err error)
	// Get retrieves the AppProfile from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AppProfile, error)
	AppProfileNamespaceListerExpansion
}

// appProfileNamespaceLister implements the AppProfileNamespaceLister
// interface.
type appProfileNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AppProfiles in the indexer for a given namespace.
func (s appProfileNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AppProfile, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AppProfile))
	})
	return ret, err
}

// Get retrieves the AppProfile from the indexer for a given namespace and name.
func (s appProfileNamespaceLister) Get(name string) (*v1alpha1.AppProfile, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("appprofile"), name)
	}
	return obj.(*v1alpha1.AppProfile), nil
}
