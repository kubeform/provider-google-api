/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/org/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PolicyPolicyLister helps list PolicyPolicies.
// All objects returned here must be treated as read-only.
type PolicyPolicyLister interface {
	// List lists all PolicyPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PolicyPolicy, err error)
	// PolicyPolicies returns an object that can list and get PolicyPolicies.
	PolicyPolicies(namespace string) PolicyPolicyNamespaceLister
	PolicyPolicyListerExpansion
}

// policyPolicyLister implements the PolicyPolicyLister interface.
type policyPolicyLister struct {
	indexer cache.Indexer
}

// NewPolicyPolicyLister returns a new PolicyPolicyLister.
func NewPolicyPolicyLister(indexer cache.Indexer) PolicyPolicyLister {
	return &policyPolicyLister{indexer: indexer}
}

// List lists all PolicyPolicies in the indexer.
func (s *policyPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.PolicyPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PolicyPolicy))
	})
	return ret, err
}

// PolicyPolicies returns an object that can list and get PolicyPolicies.
func (s *policyPolicyLister) PolicyPolicies(namespace string) PolicyPolicyNamespaceLister {
	return policyPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PolicyPolicyNamespaceLister helps list and get PolicyPolicies.
// All objects returned here must be treated as read-only.
type PolicyPolicyNamespaceLister interface {
	// List lists all PolicyPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PolicyPolicy, err error)
	// Get retrieves the PolicyPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.PolicyPolicy, error)
	PolicyPolicyNamespaceListerExpansion
}

// policyPolicyNamespaceLister implements the PolicyPolicyNamespaceLister
// interface.
type policyPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PolicyPolicies in the indexer for a given namespace.
func (s policyPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PolicyPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PolicyPolicy))
	})
	return ret, err
}

// Get retrieves the PolicyPolicy from the indexer for a given namespace and name.
func (s policyPolicyNamespaceLister) Get(name string) (*v1alpha1.PolicyPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("policypolicy"), name)
	}
	return obj.(*v1alpha1.PolicyPolicy), nil
}
