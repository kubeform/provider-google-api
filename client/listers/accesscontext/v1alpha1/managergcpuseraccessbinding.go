/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-google-api/apis/accesscontext/v1alpha1"
)

// ManagerGcpUserAccessBindingLister helps list ManagerGcpUserAccessBindings.
// All objects returned here must be treated as read-only.
type ManagerGcpUserAccessBindingLister interface {
	// List lists all ManagerGcpUserAccessBindings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ManagerGcpUserAccessBinding, err error)
	// ManagerGcpUserAccessBindings returns an object that can list and get ManagerGcpUserAccessBindings.
	ManagerGcpUserAccessBindings(namespace string) ManagerGcpUserAccessBindingNamespaceLister
	ManagerGcpUserAccessBindingListerExpansion
}

// managerGcpUserAccessBindingLister implements the ManagerGcpUserAccessBindingLister interface.
type managerGcpUserAccessBindingLister struct {
	indexer cache.Indexer
}

// NewManagerGcpUserAccessBindingLister returns a new ManagerGcpUserAccessBindingLister.
func NewManagerGcpUserAccessBindingLister(indexer cache.Indexer) ManagerGcpUserAccessBindingLister {
	return &managerGcpUserAccessBindingLister{indexer: indexer}
}

// List lists all ManagerGcpUserAccessBindings in the indexer.
func (s *managerGcpUserAccessBindingLister) List(selector labels.Selector) (ret []*v1alpha1.ManagerGcpUserAccessBinding, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ManagerGcpUserAccessBinding))
	})
	return ret, err
}

// ManagerGcpUserAccessBindings returns an object that can list and get ManagerGcpUserAccessBindings.
func (s *managerGcpUserAccessBindingLister) ManagerGcpUserAccessBindings(namespace string) ManagerGcpUserAccessBindingNamespaceLister {
	return managerGcpUserAccessBindingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ManagerGcpUserAccessBindingNamespaceLister helps list and get ManagerGcpUserAccessBindings.
// All objects returned here must be treated as read-only.
type ManagerGcpUserAccessBindingNamespaceLister interface {
	// List lists all ManagerGcpUserAccessBindings in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ManagerGcpUserAccessBinding, err error)
	// Get retrieves the ManagerGcpUserAccessBinding from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ManagerGcpUserAccessBinding, error)
	ManagerGcpUserAccessBindingNamespaceListerExpansion
}

// managerGcpUserAccessBindingNamespaceLister implements the ManagerGcpUserAccessBindingNamespaceLister
// interface.
type managerGcpUserAccessBindingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ManagerGcpUserAccessBindings in the indexer for a given namespace.
func (s managerGcpUserAccessBindingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ManagerGcpUserAccessBinding, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ManagerGcpUserAccessBinding))
	})
	return ret, err
}

// Get retrieves the ManagerGcpUserAccessBinding from the indexer for a given namespace and name.
func (s managerGcpUserAccessBindingNamespaceLister) Get(name string) (*v1alpha1.ManagerGcpUserAccessBinding, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("managergcpuseraccessbinding"), name)
	}
	return obj.(*v1alpha1.ManagerGcpUserAccessBinding), nil
}
