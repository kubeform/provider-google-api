/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/accesscontext/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ManagerAccessLevelConditionLister helps list ManagerAccessLevelConditions.
// All objects returned here must be treated as read-only.
type ManagerAccessLevelConditionLister interface {
	// List lists all ManagerAccessLevelConditions in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ManagerAccessLevelCondition, err error)
	// ManagerAccessLevelConditions returns an object that can list and get ManagerAccessLevelConditions.
	ManagerAccessLevelConditions(namespace string) ManagerAccessLevelConditionNamespaceLister
	ManagerAccessLevelConditionListerExpansion
}

// managerAccessLevelConditionLister implements the ManagerAccessLevelConditionLister interface.
type managerAccessLevelConditionLister struct {
	indexer cache.Indexer
}

// NewManagerAccessLevelConditionLister returns a new ManagerAccessLevelConditionLister.
func NewManagerAccessLevelConditionLister(indexer cache.Indexer) ManagerAccessLevelConditionLister {
	return &managerAccessLevelConditionLister{indexer: indexer}
}

// List lists all ManagerAccessLevelConditions in the indexer.
func (s *managerAccessLevelConditionLister) List(selector labels.Selector) (ret []*v1alpha1.ManagerAccessLevelCondition, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ManagerAccessLevelCondition))
	})
	return ret, err
}

// ManagerAccessLevelConditions returns an object that can list and get ManagerAccessLevelConditions.
func (s *managerAccessLevelConditionLister) ManagerAccessLevelConditions(namespace string) ManagerAccessLevelConditionNamespaceLister {
	return managerAccessLevelConditionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ManagerAccessLevelConditionNamespaceLister helps list and get ManagerAccessLevelConditions.
// All objects returned here must be treated as read-only.
type ManagerAccessLevelConditionNamespaceLister interface {
	// List lists all ManagerAccessLevelConditions in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ManagerAccessLevelCondition, err error)
	// Get retrieves the ManagerAccessLevelCondition from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ManagerAccessLevelCondition, error)
	ManagerAccessLevelConditionNamespaceListerExpansion
}

// managerAccessLevelConditionNamespaceLister implements the ManagerAccessLevelConditionNamespaceLister
// interface.
type managerAccessLevelConditionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ManagerAccessLevelConditions in the indexer for a given namespace.
func (s managerAccessLevelConditionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ManagerAccessLevelCondition, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ManagerAccessLevelCondition))
	})
	return ret, err
}

// Get retrieves the ManagerAccessLevelCondition from the indexer for a given namespace and name.
func (s managerAccessLevelConditionNamespaceLister) Get(name string) (*v1alpha1.ManagerAccessLevelCondition, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("manageraccesslevelcondition"), name)
	}
	return obj.(*v1alpha1.ManagerAccessLevelCondition), nil
}
