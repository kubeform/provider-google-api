/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/accesscontext/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ManagerAccessLevelLister helps list ManagerAccessLevels.
// All objects returned here must be treated as read-only.
type ManagerAccessLevelLister interface {
	// List lists all ManagerAccessLevels in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ManagerAccessLevel, err error)
	// ManagerAccessLevels returns an object that can list and get ManagerAccessLevels.
	ManagerAccessLevels(namespace string) ManagerAccessLevelNamespaceLister
	ManagerAccessLevelListerExpansion
}

// managerAccessLevelLister implements the ManagerAccessLevelLister interface.
type managerAccessLevelLister struct {
	indexer cache.Indexer
}

// NewManagerAccessLevelLister returns a new ManagerAccessLevelLister.
func NewManagerAccessLevelLister(indexer cache.Indexer) ManagerAccessLevelLister {
	return &managerAccessLevelLister{indexer: indexer}
}

// List lists all ManagerAccessLevels in the indexer.
func (s *managerAccessLevelLister) List(selector labels.Selector) (ret []*v1alpha1.ManagerAccessLevel, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ManagerAccessLevel))
	})
	return ret, err
}

// ManagerAccessLevels returns an object that can list and get ManagerAccessLevels.
func (s *managerAccessLevelLister) ManagerAccessLevels(namespace string) ManagerAccessLevelNamespaceLister {
	return managerAccessLevelNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ManagerAccessLevelNamespaceLister helps list and get ManagerAccessLevels.
// All objects returned here must be treated as read-only.
type ManagerAccessLevelNamespaceLister interface {
	// List lists all ManagerAccessLevels in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ManagerAccessLevel, err error)
	// Get retrieves the ManagerAccessLevel from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ManagerAccessLevel, error)
	ManagerAccessLevelNamespaceListerExpansion
}

// managerAccessLevelNamespaceLister implements the ManagerAccessLevelNamespaceLister
// interface.
type managerAccessLevelNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ManagerAccessLevels in the indexer for a given namespace.
func (s managerAccessLevelNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ManagerAccessLevel, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ManagerAccessLevel))
	})
	return ret, err
}

// Get retrieves the ManagerAccessLevel from the indexer for a given namespace and name.
func (s managerAccessLevelNamespaceLister) Get(name string) (*v1alpha1.ManagerAccessLevel, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("manageraccesslevel"), name)
	}
	return obj.(*v1alpha1.ManagerAccessLevel), nil
}
