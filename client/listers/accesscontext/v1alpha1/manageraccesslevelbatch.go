/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/accesscontext/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ManagerAccessLevelBatchLister helps list ManagerAccessLevelBatches.
// All objects returned here must be treated as read-only.
type ManagerAccessLevelBatchLister interface {
	// List lists all ManagerAccessLevelBatches in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ManagerAccessLevelBatch, err error)
	// ManagerAccessLevelBatches returns an object that can list and get ManagerAccessLevelBatches.
	ManagerAccessLevelBatches(namespace string) ManagerAccessLevelBatchNamespaceLister
	ManagerAccessLevelBatchListerExpansion
}

// managerAccessLevelBatchLister implements the ManagerAccessLevelBatchLister interface.
type managerAccessLevelBatchLister struct {
	indexer cache.Indexer
}

// NewManagerAccessLevelBatchLister returns a new ManagerAccessLevelBatchLister.
func NewManagerAccessLevelBatchLister(indexer cache.Indexer) ManagerAccessLevelBatchLister {
	return &managerAccessLevelBatchLister{indexer: indexer}
}

// List lists all ManagerAccessLevelBatches in the indexer.
func (s *managerAccessLevelBatchLister) List(selector labels.Selector) (ret []*v1alpha1.ManagerAccessLevelBatch, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ManagerAccessLevelBatch))
	})
	return ret, err
}

// ManagerAccessLevelBatches returns an object that can list and get ManagerAccessLevelBatches.
func (s *managerAccessLevelBatchLister) ManagerAccessLevelBatches(namespace string) ManagerAccessLevelBatchNamespaceLister {
	return managerAccessLevelBatchNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ManagerAccessLevelBatchNamespaceLister helps list and get ManagerAccessLevelBatches.
// All objects returned here must be treated as read-only.
type ManagerAccessLevelBatchNamespaceLister interface {
	// List lists all ManagerAccessLevelBatches in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ManagerAccessLevelBatch, err error)
	// Get retrieves the ManagerAccessLevelBatch from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ManagerAccessLevelBatch, error)
	ManagerAccessLevelBatchNamespaceListerExpansion
}

// managerAccessLevelBatchNamespaceLister implements the ManagerAccessLevelBatchNamespaceLister
// interface.
type managerAccessLevelBatchNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ManagerAccessLevelBatches in the indexer for a given namespace.
func (s managerAccessLevelBatchNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ManagerAccessLevelBatch, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ManagerAccessLevelBatch))
	})
	return ret, err
}

// Get retrieves the ManagerAccessLevelBatch from the indexer for a given namespace and name.
func (s managerAccessLevelBatchNamespaceLister) Get(name string) (*v1alpha1.ManagerAccessLevelBatch, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("manageraccesslevelbatch"), name)
	}
	return obj.(*v1alpha1.ManagerAccessLevelBatch), nil
}
