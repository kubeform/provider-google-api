/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/accesscontext/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ManagerAccessPolicyLister helps list ManagerAccessPolicies.
// All objects returned here must be treated as read-only.
type ManagerAccessPolicyLister interface {
	// List lists all ManagerAccessPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ManagerAccessPolicy, err error)
	// ManagerAccessPolicies returns an object that can list and get ManagerAccessPolicies.
	ManagerAccessPolicies(namespace string) ManagerAccessPolicyNamespaceLister
	ManagerAccessPolicyListerExpansion
}

// managerAccessPolicyLister implements the ManagerAccessPolicyLister interface.
type managerAccessPolicyLister struct {
	indexer cache.Indexer
}

// NewManagerAccessPolicyLister returns a new ManagerAccessPolicyLister.
func NewManagerAccessPolicyLister(indexer cache.Indexer) ManagerAccessPolicyLister {
	return &managerAccessPolicyLister{indexer: indexer}
}

// List lists all ManagerAccessPolicies in the indexer.
func (s *managerAccessPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.ManagerAccessPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ManagerAccessPolicy))
	})
	return ret, err
}

// ManagerAccessPolicies returns an object that can list and get ManagerAccessPolicies.
func (s *managerAccessPolicyLister) ManagerAccessPolicies(namespace string) ManagerAccessPolicyNamespaceLister {
	return managerAccessPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ManagerAccessPolicyNamespaceLister helps list and get ManagerAccessPolicies.
// All objects returned here must be treated as read-only.
type ManagerAccessPolicyNamespaceLister interface {
	// List lists all ManagerAccessPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ManagerAccessPolicy, err error)
	// Get retrieves the ManagerAccessPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ManagerAccessPolicy, error)
	ManagerAccessPolicyNamespaceListerExpansion
}

// managerAccessPolicyNamespaceLister implements the ManagerAccessPolicyNamespaceLister
// interface.
type managerAccessPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ManagerAccessPolicies in the indexer for a given namespace.
func (s managerAccessPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ManagerAccessPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ManagerAccessPolicy))
	})
	return ret, err
}

// Get retrieves the ManagerAccessPolicy from the indexer for a given namespace and name.
func (s managerAccessPolicyNamespaceLister) Get(name string) (*v1alpha1.ManagerAccessPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("manageraccesspolicy"), name)
	}
	return obj.(*v1alpha1.ManagerAccessPolicy), nil
}
