/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-google-api/apis/sql/v1alpha1"
)

// DatabaseInstanceLister helps list DatabaseInstances.
// All objects returned here must be treated as read-only.
type DatabaseInstanceLister interface {
	// List lists all DatabaseInstances in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DatabaseInstance, err error)
	// DatabaseInstances returns an object that can list and get DatabaseInstances.
	DatabaseInstances(namespace string) DatabaseInstanceNamespaceLister
	DatabaseInstanceListerExpansion
}

// databaseInstanceLister implements the DatabaseInstanceLister interface.
type databaseInstanceLister struct {
	indexer cache.Indexer
}

// NewDatabaseInstanceLister returns a new DatabaseInstanceLister.
func NewDatabaseInstanceLister(indexer cache.Indexer) DatabaseInstanceLister {
	return &databaseInstanceLister{indexer: indexer}
}

// List lists all DatabaseInstances in the indexer.
func (s *databaseInstanceLister) List(selector labels.Selector) (ret []*v1alpha1.DatabaseInstance, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DatabaseInstance))
	})
	return ret, err
}

// DatabaseInstances returns an object that can list and get DatabaseInstances.
func (s *databaseInstanceLister) DatabaseInstances(namespace string) DatabaseInstanceNamespaceLister {
	return databaseInstanceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DatabaseInstanceNamespaceLister helps list and get DatabaseInstances.
// All objects returned here must be treated as read-only.
type DatabaseInstanceNamespaceLister interface {
	// List lists all DatabaseInstances in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DatabaseInstance, err error)
	// Get retrieves the DatabaseInstance from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DatabaseInstance, error)
	DatabaseInstanceNamespaceListerExpansion
}

// databaseInstanceNamespaceLister implements the DatabaseInstanceNamespaceLister
// interface.
type databaseInstanceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DatabaseInstances in the indexer for a given namespace.
func (s databaseInstanceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DatabaseInstance, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DatabaseInstance))
	})
	return ret, err
}

// Get retrieves the DatabaseInstance from the indexer for a given namespace and name.
func (s databaseInstanceNamespaceLister) Get(name string) (*v1alpha1.DatabaseInstance, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("databaseinstance"), name)
	}
	return obj.(*v1alpha1.DatabaseInstance), nil
}
