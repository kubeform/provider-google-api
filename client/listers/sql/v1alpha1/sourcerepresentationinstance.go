/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/sql/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SourceRepresentationInstanceLister helps list SourceRepresentationInstances.
// All objects returned here must be treated as read-only.
type SourceRepresentationInstanceLister interface {
	// List lists all SourceRepresentationInstances in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SourceRepresentationInstance, err error)
	// SourceRepresentationInstances returns an object that can list and get SourceRepresentationInstances.
	SourceRepresentationInstances(namespace string) SourceRepresentationInstanceNamespaceLister
	SourceRepresentationInstanceListerExpansion
}

// sourceRepresentationInstanceLister implements the SourceRepresentationInstanceLister interface.
type sourceRepresentationInstanceLister struct {
	indexer cache.Indexer
}

// NewSourceRepresentationInstanceLister returns a new SourceRepresentationInstanceLister.
func NewSourceRepresentationInstanceLister(indexer cache.Indexer) SourceRepresentationInstanceLister {
	return &sourceRepresentationInstanceLister{indexer: indexer}
}

// List lists all SourceRepresentationInstances in the indexer.
func (s *sourceRepresentationInstanceLister) List(selector labels.Selector) (ret []*v1alpha1.SourceRepresentationInstance, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SourceRepresentationInstance))
	})
	return ret, err
}

// SourceRepresentationInstances returns an object that can list and get SourceRepresentationInstances.
func (s *sourceRepresentationInstanceLister) SourceRepresentationInstances(namespace string) SourceRepresentationInstanceNamespaceLister {
	return sourceRepresentationInstanceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SourceRepresentationInstanceNamespaceLister helps list and get SourceRepresentationInstances.
// All objects returned here must be treated as read-only.
type SourceRepresentationInstanceNamespaceLister interface {
	// List lists all SourceRepresentationInstances in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SourceRepresentationInstance, err error)
	// Get retrieves the SourceRepresentationInstance from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SourceRepresentationInstance, error)
	SourceRepresentationInstanceNamespaceListerExpansion
}

// sourceRepresentationInstanceNamespaceLister implements the SourceRepresentationInstanceNamespaceLister
// interface.
type sourceRepresentationInstanceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SourceRepresentationInstances in the indexer for a given namespace.
func (s sourceRepresentationInstanceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SourceRepresentationInstance, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SourceRepresentationInstance))
	})
	return ret, err
}

// Get retrieves the SourceRepresentationInstance from the indexer for a given namespace and name.
func (s sourceRepresentationInstanceNamespaceLister) Get(name string) (*v1alpha1.SourceRepresentationInstance, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("sourcerepresentationinstance"), name)
	}
	return obj.(*v1alpha1.SourceRepresentationInstance), nil
}
