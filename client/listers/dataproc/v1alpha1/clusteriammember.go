/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-google-api/apis/dataproc/v1alpha1"
)

// ClusterIamMemberLister helps list ClusterIamMembers.
// All objects returned here must be treated as read-only.
type ClusterIamMemberLister interface {
	// List lists all ClusterIamMembers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterIamMember, err error)
	// ClusterIamMembers returns an object that can list and get ClusterIamMembers.
	ClusterIamMembers(namespace string) ClusterIamMemberNamespaceLister
	ClusterIamMemberListerExpansion
}

// clusterIamMemberLister implements the ClusterIamMemberLister interface.
type clusterIamMemberLister struct {
	indexer cache.Indexer
}

// NewClusterIamMemberLister returns a new ClusterIamMemberLister.
func NewClusterIamMemberLister(indexer cache.Indexer) ClusterIamMemberLister {
	return &clusterIamMemberLister{indexer: indexer}
}

// List lists all ClusterIamMembers in the indexer.
func (s *clusterIamMemberLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterIamMember, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterIamMember))
	})
	return ret, err
}

// ClusterIamMembers returns an object that can list and get ClusterIamMembers.
func (s *clusterIamMemberLister) ClusterIamMembers(namespace string) ClusterIamMemberNamespaceLister {
	return clusterIamMemberNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ClusterIamMemberNamespaceLister helps list and get ClusterIamMembers.
// All objects returned here must be treated as read-only.
type ClusterIamMemberNamespaceLister interface {
	// List lists all ClusterIamMembers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterIamMember, err error)
	// Get retrieves the ClusterIamMember from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ClusterIamMember, error)
	ClusterIamMemberNamespaceListerExpansion
}

// clusterIamMemberNamespaceLister implements the ClusterIamMemberNamespaceLister
// interface.
type clusterIamMemberNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ClusterIamMembers in the indexer for a given namespace.
func (s clusterIamMemberNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterIamMember, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterIamMember))
	})
	return ret, err
}

// Get retrieves the ClusterIamMember from the indexer for a given namespace and name.
func (s clusterIamMemberNamespaceLister) Get(name string) (*v1alpha1.ClusterIamMember, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("clusteriammember"), name)
	}
	return obj.(*v1alpha1.ClusterIamMember), nil
}
