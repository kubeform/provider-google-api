/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/dataproc/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AutoscalingPolicyLister helps list AutoscalingPolicies.
// All objects returned here must be treated as read-only.
type AutoscalingPolicyLister interface {
	// List lists all AutoscalingPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AutoscalingPolicy, err error)
	// AutoscalingPolicies returns an object that can list and get AutoscalingPolicies.
	AutoscalingPolicies(namespace string) AutoscalingPolicyNamespaceLister
	AutoscalingPolicyListerExpansion
}

// autoscalingPolicyLister implements the AutoscalingPolicyLister interface.
type autoscalingPolicyLister struct {
	indexer cache.Indexer
}

// NewAutoscalingPolicyLister returns a new AutoscalingPolicyLister.
func NewAutoscalingPolicyLister(indexer cache.Indexer) AutoscalingPolicyLister {
	return &autoscalingPolicyLister{indexer: indexer}
}

// List lists all AutoscalingPolicies in the indexer.
func (s *autoscalingPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.AutoscalingPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AutoscalingPolicy))
	})
	return ret, err
}

// AutoscalingPolicies returns an object that can list and get AutoscalingPolicies.
func (s *autoscalingPolicyLister) AutoscalingPolicies(namespace string) AutoscalingPolicyNamespaceLister {
	return autoscalingPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AutoscalingPolicyNamespaceLister helps list and get AutoscalingPolicies.
// All objects returned here must be treated as read-only.
type AutoscalingPolicyNamespaceLister interface {
	// List lists all AutoscalingPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AutoscalingPolicy, err error)
	// Get retrieves the AutoscalingPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AutoscalingPolicy, error)
	AutoscalingPolicyNamespaceListerExpansion
}

// autoscalingPolicyNamespaceLister implements the AutoscalingPolicyNamespaceLister
// interface.
type autoscalingPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AutoscalingPolicies in the indexer for a given namespace.
func (s autoscalingPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AutoscalingPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AutoscalingPolicy))
	})
	return ret, err
}

// Get retrieves the AutoscalingPolicy from the indexer for a given namespace and name.
func (s autoscalingPolicyNamespaceLister) Get(name string) (*v1alpha1.AutoscalingPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("autoscalingpolicy"), name)
	}
	return obj.(*v1alpha1.AutoscalingPolicy), nil
}
