/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/dataproc/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ClusterIamBindingLister helps list ClusterIamBindings.
// All objects returned here must be treated as read-only.
type ClusterIamBindingLister interface {
	// List lists all ClusterIamBindings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterIamBinding, err error)
	// ClusterIamBindings returns an object that can list and get ClusterIamBindings.
	ClusterIamBindings(namespace string) ClusterIamBindingNamespaceLister
	ClusterIamBindingListerExpansion
}

// clusterIamBindingLister implements the ClusterIamBindingLister interface.
type clusterIamBindingLister struct {
	indexer cache.Indexer
}

// NewClusterIamBindingLister returns a new ClusterIamBindingLister.
func NewClusterIamBindingLister(indexer cache.Indexer) ClusterIamBindingLister {
	return &clusterIamBindingLister{indexer: indexer}
}

// List lists all ClusterIamBindings in the indexer.
func (s *clusterIamBindingLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterIamBinding, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterIamBinding))
	})
	return ret, err
}

// ClusterIamBindings returns an object that can list and get ClusterIamBindings.
func (s *clusterIamBindingLister) ClusterIamBindings(namespace string) ClusterIamBindingNamespaceLister {
	return clusterIamBindingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ClusterIamBindingNamespaceLister helps list and get ClusterIamBindings.
// All objects returned here must be treated as read-only.
type ClusterIamBindingNamespaceLister interface {
	// List lists all ClusterIamBindings in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterIamBinding, err error)
	// Get retrieves the ClusterIamBinding from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ClusterIamBinding, error)
	ClusterIamBindingNamespaceListerExpansion
}

// clusterIamBindingNamespaceLister implements the ClusterIamBindingNamespaceLister
// interface.
type clusterIamBindingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ClusterIamBindings in the indexer for a given namespace.
func (s clusterIamBindingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterIamBinding, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterIamBinding))
	})
	return ret, err
}

// Get retrieves the ClusterIamBinding from the indexer for a given namespace and name.
func (s clusterIamBindingNamespaceLister) Get(name string) (*v1alpha1.ClusterIamBinding, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("clusteriambinding"), name)
	}
	return obj.(*v1alpha1.ClusterIamBinding), nil
}
