/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/dialogflow/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CxPageLister helps list CxPages.
// All objects returned here must be treated as read-only.
type CxPageLister interface {
	// List lists all CxPages in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CxPage, err error)
	// CxPages returns an object that can list and get CxPages.
	CxPages(namespace string) CxPageNamespaceLister
	CxPageListerExpansion
}

// cxPageLister implements the CxPageLister interface.
type cxPageLister struct {
	indexer cache.Indexer
}

// NewCxPageLister returns a new CxPageLister.
func NewCxPageLister(indexer cache.Indexer) CxPageLister {
	return &cxPageLister{indexer: indexer}
}

// List lists all CxPages in the indexer.
func (s *cxPageLister) List(selector labels.Selector) (ret []*v1alpha1.CxPage, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CxPage))
	})
	return ret, err
}

// CxPages returns an object that can list and get CxPages.
func (s *cxPageLister) CxPages(namespace string) CxPageNamespaceLister {
	return cxPageNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CxPageNamespaceLister helps list and get CxPages.
// All objects returned here must be treated as read-only.
type CxPageNamespaceLister interface {
	// List lists all CxPages in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CxPage, err error)
	// Get retrieves the CxPage from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.CxPage, error)
	CxPageNamespaceListerExpansion
}

// cxPageNamespaceLister implements the CxPageNamespaceLister
// interface.
type cxPageNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CxPages in the indexer for a given namespace.
func (s cxPageNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CxPage, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CxPage))
	})
	return ret, err
}

// Get retrieves the CxPage from the indexer for a given namespace and name.
func (s cxPageNamespaceLister) Get(name string) (*v1alpha1.CxPage, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("cxpage"), name)
	}
	return obj.(*v1alpha1.CxPage), nil
}
