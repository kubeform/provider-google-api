/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-google-api/apis/dialogflow/v1alpha1"
)

// EntityTypeLister helps list EntityTypes.
// All objects returned here must be treated as read-only.
type EntityTypeLister interface {
	// List lists all EntityTypes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EntityType, err error)
	// EntityTypes returns an object that can list and get EntityTypes.
	EntityTypes(namespace string) EntityTypeNamespaceLister
	EntityTypeListerExpansion
}

// entityTypeLister implements the EntityTypeLister interface.
type entityTypeLister struct {
	indexer cache.Indexer
}

// NewEntityTypeLister returns a new EntityTypeLister.
func NewEntityTypeLister(indexer cache.Indexer) EntityTypeLister {
	return &entityTypeLister{indexer: indexer}
}

// List lists all EntityTypes in the indexer.
func (s *entityTypeLister) List(selector labels.Selector) (ret []*v1alpha1.EntityType, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EntityType))
	})
	return ret, err
}

// EntityTypes returns an object that can list and get EntityTypes.
func (s *entityTypeLister) EntityTypes(namespace string) EntityTypeNamespaceLister {
	return entityTypeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EntityTypeNamespaceLister helps list and get EntityTypes.
// All objects returned here must be treated as read-only.
type EntityTypeNamespaceLister interface {
	// List lists all EntityTypes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EntityType, err error)
	// Get retrieves the EntityType from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.EntityType, error)
	EntityTypeNamespaceListerExpansion
}

// entityTypeNamespaceLister implements the EntityTypeNamespaceLister
// interface.
type entityTypeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EntityTypes in the indexer for a given namespace.
func (s entityTypeNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.EntityType, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EntityType))
	})
	return ret, err
}

// Get retrieves the EntityType from the indexer for a given namespace and name.
func (s entityTypeNamespaceLister) Get(name string) (*v1alpha1.EntityType, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("entitytype"), name)
	}
	return obj.(*v1alpha1.EntityType), nil
}
