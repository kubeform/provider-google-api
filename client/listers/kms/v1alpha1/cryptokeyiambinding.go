/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/kms/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CryptoKeyIamBindingLister helps list CryptoKeyIamBindings.
// All objects returned here must be treated as read-only.
type CryptoKeyIamBindingLister interface {
	// List lists all CryptoKeyIamBindings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CryptoKeyIamBinding, err error)
	// CryptoKeyIamBindings returns an object that can list and get CryptoKeyIamBindings.
	CryptoKeyIamBindings(namespace string) CryptoKeyIamBindingNamespaceLister
	CryptoKeyIamBindingListerExpansion
}

// cryptoKeyIamBindingLister implements the CryptoKeyIamBindingLister interface.
type cryptoKeyIamBindingLister struct {
	indexer cache.Indexer
}

// NewCryptoKeyIamBindingLister returns a new CryptoKeyIamBindingLister.
func NewCryptoKeyIamBindingLister(indexer cache.Indexer) CryptoKeyIamBindingLister {
	return &cryptoKeyIamBindingLister{indexer: indexer}
}

// List lists all CryptoKeyIamBindings in the indexer.
func (s *cryptoKeyIamBindingLister) List(selector labels.Selector) (ret []*v1alpha1.CryptoKeyIamBinding, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CryptoKeyIamBinding))
	})
	return ret, err
}

// CryptoKeyIamBindings returns an object that can list and get CryptoKeyIamBindings.
func (s *cryptoKeyIamBindingLister) CryptoKeyIamBindings(namespace string) CryptoKeyIamBindingNamespaceLister {
	return cryptoKeyIamBindingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CryptoKeyIamBindingNamespaceLister helps list and get CryptoKeyIamBindings.
// All objects returned here must be treated as read-only.
type CryptoKeyIamBindingNamespaceLister interface {
	// List lists all CryptoKeyIamBindings in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CryptoKeyIamBinding, err error)
	// Get retrieves the CryptoKeyIamBinding from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.CryptoKeyIamBinding, error)
	CryptoKeyIamBindingNamespaceListerExpansion
}

// cryptoKeyIamBindingNamespaceLister implements the CryptoKeyIamBindingNamespaceLister
// interface.
type cryptoKeyIamBindingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CryptoKeyIamBindings in the indexer for a given namespace.
func (s cryptoKeyIamBindingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CryptoKeyIamBinding, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CryptoKeyIamBinding))
	})
	return ret, err
}

// Get retrieves the CryptoKeyIamBinding from the indexer for a given namespace and name.
func (s cryptoKeyIamBindingNamespaceLister) Get(name string) (*v1alpha1.CryptoKeyIamBinding, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("cryptokeyiambinding"), name)
	}
	return obj.(*v1alpha1.CryptoKeyIamBinding), nil
}
