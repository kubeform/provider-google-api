/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-google-api/apis/kms/v1alpha1"
)

// CryptoKeyIamPolicyLister helps list CryptoKeyIamPolicies.
// All objects returned here must be treated as read-only.
type CryptoKeyIamPolicyLister interface {
	// List lists all CryptoKeyIamPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CryptoKeyIamPolicy, err error)
	// CryptoKeyIamPolicies returns an object that can list and get CryptoKeyIamPolicies.
	CryptoKeyIamPolicies(namespace string) CryptoKeyIamPolicyNamespaceLister
	CryptoKeyIamPolicyListerExpansion
}

// cryptoKeyIamPolicyLister implements the CryptoKeyIamPolicyLister interface.
type cryptoKeyIamPolicyLister struct {
	indexer cache.Indexer
}

// NewCryptoKeyIamPolicyLister returns a new CryptoKeyIamPolicyLister.
func NewCryptoKeyIamPolicyLister(indexer cache.Indexer) CryptoKeyIamPolicyLister {
	return &cryptoKeyIamPolicyLister{indexer: indexer}
}

// List lists all CryptoKeyIamPolicies in the indexer.
func (s *cryptoKeyIamPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.CryptoKeyIamPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CryptoKeyIamPolicy))
	})
	return ret, err
}

// CryptoKeyIamPolicies returns an object that can list and get CryptoKeyIamPolicies.
func (s *cryptoKeyIamPolicyLister) CryptoKeyIamPolicies(namespace string) CryptoKeyIamPolicyNamespaceLister {
	return cryptoKeyIamPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CryptoKeyIamPolicyNamespaceLister helps list and get CryptoKeyIamPolicies.
// All objects returned here must be treated as read-only.
type CryptoKeyIamPolicyNamespaceLister interface {
	// List lists all CryptoKeyIamPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CryptoKeyIamPolicy, err error)
	// Get retrieves the CryptoKeyIamPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.CryptoKeyIamPolicy, error)
	CryptoKeyIamPolicyNamespaceListerExpansion
}

// cryptoKeyIamPolicyNamespaceLister implements the CryptoKeyIamPolicyNamespaceLister
// interface.
type cryptoKeyIamPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CryptoKeyIamPolicies in the indexer for a given namespace.
func (s cryptoKeyIamPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CryptoKeyIamPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CryptoKeyIamPolicy))
	})
	return ret, err
}

// Get retrieves the CryptoKeyIamPolicy from the indexer for a given namespace and name.
func (s cryptoKeyIamPolicyNamespaceLister) Get(name string) (*v1alpha1.CryptoKeyIamPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("cryptokeyiampolicy"), name)
	}
	return obj.(*v1alpha1.CryptoKeyIamPolicy), nil
}
