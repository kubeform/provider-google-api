/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/kms/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SecretCiphertextLister helps list SecretCiphertexts.
// All objects returned here must be treated as read-only.
type SecretCiphertextLister interface {
	// List lists all SecretCiphertexts in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SecretCiphertext, err error)
	// SecretCiphertexts returns an object that can list and get SecretCiphertexts.
	SecretCiphertexts(namespace string) SecretCiphertextNamespaceLister
	SecretCiphertextListerExpansion
}

// secretCiphertextLister implements the SecretCiphertextLister interface.
type secretCiphertextLister struct {
	indexer cache.Indexer
}

// NewSecretCiphertextLister returns a new SecretCiphertextLister.
func NewSecretCiphertextLister(indexer cache.Indexer) SecretCiphertextLister {
	return &secretCiphertextLister{indexer: indexer}
}

// List lists all SecretCiphertexts in the indexer.
func (s *secretCiphertextLister) List(selector labels.Selector) (ret []*v1alpha1.SecretCiphertext, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SecretCiphertext))
	})
	return ret, err
}

// SecretCiphertexts returns an object that can list and get SecretCiphertexts.
func (s *secretCiphertextLister) SecretCiphertexts(namespace string) SecretCiphertextNamespaceLister {
	return secretCiphertextNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SecretCiphertextNamespaceLister helps list and get SecretCiphertexts.
// All objects returned here must be treated as read-only.
type SecretCiphertextNamespaceLister interface {
	// List lists all SecretCiphertexts in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SecretCiphertext, err error)
	// Get retrieves the SecretCiphertext from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SecretCiphertext, error)
	SecretCiphertextNamespaceListerExpansion
}

// secretCiphertextNamespaceLister implements the SecretCiphertextNamespaceLister
// interface.
type secretCiphertextNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SecretCiphertexts in the indexer for a given namespace.
func (s secretCiphertextNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SecretCiphertext, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SecretCiphertext))
	})
	return ret, err
}

// Get retrieves the SecretCiphertext from the indexer for a given namespace and name.
func (s secretCiphertextNamespaceLister) Get(name string) (*v1alpha1.SecretCiphertext, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("secretciphertext"), name)
	}
	return obj.(*v1alpha1.SecretCiphertext), nil
}
