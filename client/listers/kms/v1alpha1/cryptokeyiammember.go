/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-google-api/apis/kms/v1alpha1"
)

// CryptoKeyIamMemberLister helps list CryptoKeyIamMembers.
// All objects returned here must be treated as read-only.
type CryptoKeyIamMemberLister interface {
	// List lists all CryptoKeyIamMembers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CryptoKeyIamMember, err error)
	// CryptoKeyIamMembers returns an object that can list and get CryptoKeyIamMembers.
	CryptoKeyIamMembers(namespace string) CryptoKeyIamMemberNamespaceLister
	CryptoKeyIamMemberListerExpansion
}

// cryptoKeyIamMemberLister implements the CryptoKeyIamMemberLister interface.
type cryptoKeyIamMemberLister struct {
	indexer cache.Indexer
}

// NewCryptoKeyIamMemberLister returns a new CryptoKeyIamMemberLister.
func NewCryptoKeyIamMemberLister(indexer cache.Indexer) CryptoKeyIamMemberLister {
	return &cryptoKeyIamMemberLister{indexer: indexer}
}

// List lists all CryptoKeyIamMembers in the indexer.
func (s *cryptoKeyIamMemberLister) List(selector labels.Selector) (ret []*v1alpha1.CryptoKeyIamMember, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CryptoKeyIamMember))
	})
	return ret, err
}

// CryptoKeyIamMembers returns an object that can list and get CryptoKeyIamMembers.
func (s *cryptoKeyIamMemberLister) CryptoKeyIamMembers(namespace string) CryptoKeyIamMemberNamespaceLister {
	return cryptoKeyIamMemberNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CryptoKeyIamMemberNamespaceLister helps list and get CryptoKeyIamMembers.
// All objects returned here must be treated as read-only.
type CryptoKeyIamMemberNamespaceLister interface {
	// List lists all CryptoKeyIamMembers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CryptoKeyIamMember, err error)
	// Get retrieves the CryptoKeyIamMember from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.CryptoKeyIamMember, error)
	CryptoKeyIamMemberNamespaceListerExpansion
}

// cryptoKeyIamMemberNamespaceLister implements the CryptoKeyIamMemberNamespaceLister
// interface.
type cryptoKeyIamMemberNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CryptoKeyIamMembers in the indexer for a given namespace.
func (s cryptoKeyIamMemberNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CryptoKeyIamMember, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CryptoKeyIamMember))
	})
	return ret, err
}

// Get retrieves the CryptoKeyIamMember from the indexer for a given namespace and name.
func (s cryptoKeyIamMemberNamespaceLister) Get(name string) (*v1alpha1.CryptoKeyIamMember, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("cryptokeyiammember"), name)
	}
	return obj.(*v1alpha1.CryptoKeyIamMember), nil
}
