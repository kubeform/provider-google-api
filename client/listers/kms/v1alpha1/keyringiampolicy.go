/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-google-api/apis/kms/v1alpha1"
)

// KeyRingIamPolicyLister helps list KeyRingIamPolicies.
// All objects returned here must be treated as read-only.
type KeyRingIamPolicyLister interface {
	// List lists all KeyRingIamPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.KeyRingIamPolicy, err error)
	// KeyRingIamPolicies returns an object that can list and get KeyRingIamPolicies.
	KeyRingIamPolicies(namespace string) KeyRingIamPolicyNamespaceLister
	KeyRingIamPolicyListerExpansion
}

// keyRingIamPolicyLister implements the KeyRingIamPolicyLister interface.
type keyRingIamPolicyLister struct {
	indexer cache.Indexer
}

// NewKeyRingIamPolicyLister returns a new KeyRingIamPolicyLister.
func NewKeyRingIamPolicyLister(indexer cache.Indexer) KeyRingIamPolicyLister {
	return &keyRingIamPolicyLister{indexer: indexer}
}

// List lists all KeyRingIamPolicies in the indexer.
func (s *keyRingIamPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.KeyRingIamPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KeyRingIamPolicy))
	})
	return ret, err
}

// KeyRingIamPolicies returns an object that can list and get KeyRingIamPolicies.
func (s *keyRingIamPolicyLister) KeyRingIamPolicies(namespace string) KeyRingIamPolicyNamespaceLister {
	return keyRingIamPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KeyRingIamPolicyNamespaceLister helps list and get KeyRingIamPolicies.
// All objects returned here must be treated as read-only.
type KeyRingIamPolicyNamespaceLister interface {
	// List lists all KeyRingIamPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.KeyRingIamPolicy, err error)
	// Get retrieves the KeyRingIamPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.KeyRingIamPolicy, error)
	KeyRingIamPolicyNamespaceListerExpansion
}

// keyRingIamPolicyNamespaceLister implements the KeyRingIamPolicyNamespaceLister
// interface.
type keyRingIamPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all KeyRingIamPolicies in the indexer for a given namespace.
func (s keyRingIamPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.KeyRingIamPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KeyRingIamPolicy))
	})
	return ret, err
}

// Get retrieves the KeyRingIamPolicy from the indexer for a given namespace and name.
func (s keyRingIamPolicyNamespaceLister) Get(name string) (*v1alpha1.KeyRingIamPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("keyringiampolicy"), name)
	}
	return obj.(*v1alpha1.KeyRingIamPolicy), nil
}
