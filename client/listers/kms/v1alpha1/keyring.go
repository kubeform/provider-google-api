/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-google-api/apis/kms/v1alpha1"
)

// KeyRingLister helps list KeyRings.
// All objects returned here must be treated as read-only.
type KeyRingLister interface {
	// List lists all KeyRings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.KeyRing, err error)
	// KeyRings returns an object that can list and get KeyRings.
	KeyRings(namespace string) KeyRingNamespaceLister
	KeyRingListerExpansion
}

// keyRingLister implements the KeyRingLister interface.
type keyRingLister struct {
	indexer cache.Indexer
}

// NewKeyRingLister returns a new KeyRingLister.
func NewKeyRingLister(indexer cache.Indexer) KeyRingLister {
	return &keyRingLister{indexer: indexer}
}

// List lists all KeyRings in the indexer.
func (s *keyRingLister) List(selector labels.Selector) (ret []*v1alpha1.KeyRing, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KeyRing))
	})
	return ret, err
}

// KeyRings returns an object that can list and get KeyRings.
func (s *keyRingLister) KeyRings(namespace string) KeyRingNamespaceLister {
	return keyRingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KeyRingNamespaceLister helps list and get KeyRings.
// All objects returned here must be treated as read-only.
type KeyRingNamespaceLister interface {
	// List lists all KeyRings in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.KeyRing, err error)
	// Get retrieves the KeyRing from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.KeyRing, error)
	KeyRingNamespaceListerExpansion
}

// keyRingNamespaceLister implements the KeyRingNamespaceLister
// interface.
type keyRingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all KeyRings in the indexer for a given namespace.
func (s keyRingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.KeyRing, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KeyRing))
	})
	return ret, err
}

// Get retrieves the KeyRing from the indexer for a given namespace and name.
func (s keyRingNamespaceLister) Get(name string) (*v1alpha1.KeyRing, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("keyring"), name)
	}
	return obj.(*v1alpha1.KeyRing), nil
}
