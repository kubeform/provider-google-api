/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-google-api/apis/secret/v1alpha1"
)

// ManagerSecretVersionLister helps list ManagerSecretVersions.
// All objects returned here must be treated as read-only.
type ManagerSecretVersionLister interface {
	// List lists all ManagerSecretVersions in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ManagerSecretVersion, err error)
	// ManagerSecretVersions returns an object that can list and get ManagerSecretVersions.
	ManagerSecretVersions(namespace string) ManagerSecretVersionNamespaceLister
	ManagerSecretVersionListerExpansion
}

// managerSecretVersionLister implements the ManagerSecretVersionLister interface.
type managerSecretVersionLister struct {
	indexer cache.Indexer
}

// NewManagerSecretVersionLister returns a new ManagerSecretVersionLister.
func NewManagerSecretVersionLister(indexer cache.Indexer) ManagerSecretVersionLister {
	return &managerSecretVersionLister{indexer: indexer}
}

// List lists all ManagerSecretVersions in the indexer.
func (s *managerSecretVersionLister) List(selector labels.Selector) (ret []*v1alpha1.ManagerSecretVersion, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ManagerSecretVersion))
	})
	return ret, err
}

// ManagerSecretVersions returns an object that can list and get ManagerSecretVersions.
func (s *managerSecretVersionLister) ManagerSecretVersions(namespace string) ManagerSecretVersionNamespaceLister {
	return managerSecretVersionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ManagerSecretVersionNamespaceLister helps list and get ManagerSecretVersions.
// All objects returned here must be treated as read-only.
type ManagerSecretVersionNamespaceLister interface {
	// List lists all ManagerSecretVersions in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ManagerSecretVersion, err error)
	// Get retrieves the ManagerSecretVersion from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ManagerSecretVersion, error)
	ManagerSecretVersionNamespaceListerExpansion
}

// managerSecretVersionNamespaceLister implements the ManagerSecretVersionNamespaceLister
// interface.
type managerSecretVersionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ManagerSecretVersions in the indexer for a given namespace.
func (s managerSecretVersionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ManagerSecretVersion, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ManagerSecretVersion))
	})
	return ret, err
}

// Get retrieves the ManagerSecretVersion from the indexer for a given namespace and name.
func (s managerSecretVersionNamespaceLister) Get(name string) (*v1alpha1.ManagerSecretVersion, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("managersecretversion"), name)
	}
	return obj.(*v1alpha1.ManagerSecretVersion), nil
}
