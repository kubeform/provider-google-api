/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-google-api/apis/secret/v1alpha1"
)

// ManagerSecretIamPolicyLister helps list ManagerSecretIamPolicies.
// All objects returned here must be treated as read-only.
type ManagerSecretIamPolicyLister interface {
	// List lists all ManagerSecretIamPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ManagerSecretIamPolicy, err error)
	// ManagerSecretIamPolicies returns an object that can list and get ManagerSecretIamPolicies.
	ManagerSecretIamPolicies(namespace string) ManagerSecretIamPolicyNamespaceLister
	ManagerSecretIamPolicyListerExpansion
}

// managerSecretIamPolicyLister implements the ManagerSecretIamPolicyLister interface.
type managerSecretIamPolicyLister struct {
	indexer cache.Indexer
}

// NewManagerSecretIamPolicyLister returns a new ManagerSecretIamPolicyLister.
func NewManagerSecretIamPolicyLister(indexer cache.Indexer) ManagerSecretIamPolicyLister {
	return &managerSecretIamPolicyLister{indexer: indexer}
}

// List lists all ManagerSecretIamPolicies in the indexer.
func (s *managerSecretIamPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.ManagerSecretIamPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ManagerSecretIamPolicy))
	})
	return ret, err
}

// ManagerSecretIamPolicies returns an object that can list and get ManagerSecretIamPolicies.
func (s *managerSecretIamPolicyLister) ManagerSecretIamPolicies(namespace string) ManagerSecretIamPolicyNamespaceLister {
	return managerSecretIamPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ManagerSecretIamPolicyNamespaceLister helps list and get ManagerSecretIamPolicies.
// All objects returned here must be treated as read-only.
type ManagerSecretIamPolicyNamespaceLister interface {
	// List lists all ManagerSecretIamPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ManagerSecretIamPolicy, err error)
	// Get retrieves the ManagerSecretIamPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ManagerSecretIamPolicy, error)
	ManagerSecretIamPolicyNamespaceListerExpansion
}

// managerSecretIamPolicyNamespaceLister implements the ManagerSecretIamPolicyNamespaceLister
// interface.
type managerSecretIamPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ManagerSecretIamPolicies in the indexer for a given namespace.
func (s managerSecretIamPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ManagerSecretIamPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ManagerSecretIamPolicy))
	})
	return ret, err
}

// Get retrieves the ManagerSecretIamPolicy from the indexer for a given namespace and name.
func (s managerSecretIamPolicyNamespaceLister) Get(name string) (*v1alpha1.ManagerSecretIamPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("managersecretiampolicy"), name)
	}
	return obj.(*v1alpha1.ManagerSecretIamPolicy), nil
}
