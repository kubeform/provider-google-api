/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/notebooks/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RuntimeLister helps list Runtimes.
// All objects returned here must be treated as read-only.
type RuntimeLister interface {
	// List lists all Runtimes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Runtime, err error)
	// Runtimes returns an object that can list and get Runtimes.
	Runtimes(namespace string) RuntimeNamespaceLister
	RuntimeListerExpansion
}

// runtimeLister implements the RuntimeLister interface.
type runtimeLister struct {
	indexer cache.Indexer
}

// NewRuntimeLister returns a new RuntimeLister.
func NewRuntimeLister(indexer cache.Indexer) RuntimeLister {
	return &runtimeLister{indexer: indexer}
}

// List lists all Runtimes in the indexer.
func (s *runtimeLister) List(selector labels.Selector) (ret []*v1alpha1.Runtime, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Runtime))
	})
	return ret, err
}

// Runtimes returns an object that can list and get Runtimes.
func (s *runtimeLister) Runtimes(namespace string) RuntimeNamespaceLister {
	return runtimeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RuntimeNamespaceLister helps list and get Runtimes.
// All objects returned here must be treated as read-only.
type RuntimeNamespaceLister interface {
	// List lists all Runtimes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Runtime, err error)
	// Get retrieves the Runtime from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Runtime, error)
	RuntimeNamespaceListerExpansion
}

// runtimeNamespaceLister implements the RuntimeNamespaceLister
// interface.
type runtimeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Runtimes in the indexer for a given namespace.
func (s runtimeNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Runtime, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Runtime))
	})
	return ret, err
}

// Get retrieves the Runtime from the indexer for a given namespace and name.
func (s runtimeNamespaceLister) Get(name string) (*v1alpha1.Runtime, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("runtime"), name)
	}
	return obj.(*v1alpha1.Runtime), nil
}
