/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/notebooks/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RuntimeIamMemberLister helps list RuntimeIamMembers.
// All objects returned here must be treated as read-only.
type RuntimeIamMemberLister interface {
	// List lists all RuntimeIamMembers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RuntimeIamMember, err error)
	// RuntimeIamMembers returns an object that can list and get RuntimeIamMembers.
	RuntimeIamMembers(namespace string) RuntimeIamMemberNamespaceLister
	RuntimeIamMemberListerExpansion
}

// runtimeIamMemberLister implements the RuntimeIamMemberLister interface.
type runtimeIamMemberLister struct {
	indexer cache.Indexer
}

// NewRuntimeIamMemberLister returns a new RuntimeIamMemberLister.
func NewRuntimeIamMemberLister(indexer cache.Indexer) RuntimeIamMemberLister {
	return &runtimeIamMemberLister{indexer: indexer}
}

// List lists all RuntimeIamMembers in the indexer.
func (s *runtimeIamMemberLister) List(selector labels.Selector) (ret []*v1alpha1.RuntimeIamMember, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RuntimeIamMember))
	})
	return ret, err
}

// RuntimeIamMembers returns an object that can list and get RuntimeIamMembers.
func (s *runtimeIamMemberLister) RuntimeIamMembers(namespace string) RuntimeIamMemberNamespaceLister {
	return runtimeIamMemberNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RuntimeIamMemberNamespaceLister helps list and get RuntimeIamMembers.
// All objects returned here must be treated as read-only.
type RuntimeIamMemberNamespaceLister interface {
	// List lists all RuntimeIamMembers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RuntimeIamMember, err error)
	// Get retrieves the RuntimeIamMember from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.RuntimeIamMember, error)
	RuntimeIamMemberNamespaceListerExpansion
}

// runtimeIamMemberNamespaceLister implements the RuntimeIamMemberNamespaceLister
// interface.
type runtimeIamMemberNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RuntimeIamMembers in the indexer for a given namespace.
func (s runtimeIamMemberNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RuntimeIamMember, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RuntimeIamMember))
	})
	return ret, err
}

// Get retrieves the RuntimeIamMember from the indexer for a given namespace and name.
func (s runtimeIamMemberNamespaceLister) Get(name string) (*v1alpha1.RuntimeIamMember, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("runtimeiammember"), name)
	}
	return obj.(*v1alpha1.RuntimeIamMember), nil
}
