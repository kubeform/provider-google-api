/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/notebooks/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RuntimeIamPolicyLister helps list RuntimeIamPolicies.
// All objects returned here must be treated as read-only.
type RuntimeIamPolicyLister interface {
	// List lists all RuntimeIamPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RuntimeIamPolicy, err error)
	// RuntimeIamPolicies returns an object that can list and get RuntimeIamPolicies.
	RuntimeIamPolicies(namespace string) RuntimeIamPolicyNamespaceLister
	RuntimeIamPolicyListerExpansion
}

// runtimeIamPolicyLister implements the RuntimeIamPolicyLister interface.
type runtimeIamPolicyLister struct {
	indexer cache.Indexer
}

// NewRuntimeIamPolicyLister returns a new RuntimeIamPolicyLister.
func NewRuntimeIamPolicyLister(indexer cache.Indexer) RuntimeIamPolicyLister {
	return &runtimeIamPolicyLister{indexer: indexer}
}

// List lists all RuntimeIamPolicies in the indexer.
func (s *runtimeIamPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.RuntimeIamPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RuntimeIamPolicy))
	})
	return ret, err
}

// RuntimeIamPolicies returns an object that can list and get RuntimeIamPolicies.
func (s *runtimeIamPolicyLister) RuntimeIamPolicies(namespace string) RuntimeIamPolicyNamespaceLister {
	return runtimeIamPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RuntimeIamPolicyNamespaceLister helps list and get RuntimeIamPolicies.
// All objects returned here must be treated as read-only.
type RuntimeIamPolicyNamespaceLister interface {
	// List lists all RuntimeIamPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RuntimeIamPolicy, err error)
	// Get retrieves the RuntimeIamPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.RuntimeIamPolicy, error)
	RuntimeIamPolicyNamespaceListerExpansion
}

// runtimeIamPolicyNamespaceLister implements the RuntimeIamPolicyNamespaceLister
// interface.
type runtimeIamPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RuntimeIamPolicies in the indexer for a given namespace.
func (s runtimeIamPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RuntimeIamPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RuntimeIamPolicy))
	})
	return ret, err
}

// Get retrieves the RuntimeIamPolicy from the indexer for a given namespace and name.
func (s runtimeIamPolicyNamespaceLister) Get(name string) (*v1alpha1.RuntimeIamPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("runtimeiampolicy"), name)
	}
	return obj.(*v1alpha1.RuntimeIamPolicy), nil
}
