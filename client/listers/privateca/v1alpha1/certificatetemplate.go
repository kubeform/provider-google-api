/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/privateca/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CertificateTemplateLister helps list CertificateTemplates.
// All objects returned here must be treated as read-only.
type CertificateTemplateLister interface {
	// List lists all CertificateTemplates in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CertificateTemplate, err error)
	// CertificateTemplates returns an object that can list and get CertificateTemplates.
	CertificateTemplates(namespace string) CertificateTemplateNamespaceLister
	CertificateTemplateListerExpansion
}

// certificateTemplateLister implements the CertificateTemplateLister interface.
type certificateTemplateLister struct {
	indexer cache.Indexer
}

// NewCertificateTemplateLister returns a new CertificateTemplateLister.
func NewCertificateTemplateLister(indexer cache.Indexer) CertificateTemplateLister {
	return &certificateTemplateLister{indexer: indexer}
}

// List lists all CertificateTemplates in the indexer.
func (s *certificateTemplateLister) List(selector labels.Selector) (ret []*v1alpha1.CertificateTemplate, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CertificateTemplate))
	})
	return ret, err
}

// CertificateTemplates returns an object that can list and get CertificateTemplates.
func (s *certificateTemplateLister) CertificateTemplates(namespace string) CertificateTemplateNamespaceLister {
	return certificateTemplateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CertificateTemplateNamespaceLister helps list and get CertificateTemplates.
// All objects returned here must be treated as read-only.
type CertificateTemplateNamespaceLister interface {
	// List lists all CertificateTemplates in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CertificateTemplate, err error)
	// Get retrieves the CertificateTemplate from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.CertificateTemplate, error)
	CertificateTemplateNamespaceListerExpansion
}

// certificateTemplateNamespaceLister implements the CertificateTemplateNamespaceLister
// interface.
type certificateTemplateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CertificateTemplates in the indexer for a given namespace.
func (s certificateTemplateNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CertificateTemplate, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CertificateTemplate))
	})
	return ret, err
}

// Get retrieves the CertificateTemplate from the indexer for a given namespace and name.
func (s certificateTemplateNamespaceLister) Get(name string) (*v1alpha1.CertificateTemplate, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("certificatetemplate"), name)
	}
	return obj.(*v1alpha1.CertificateTemplate), nil
}
