/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/privateca/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CaPoolLister helps list CaPools.
// All objects returned here must be treated as read-only.
type CaPoolLister interface {
	// List lists all CaPools in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CaPool, err error)
	// CaPools returns an object that can list and get CaPools.
	CaPools(namespace string) CaPoolNamespaceLister
	CaPoolListerExpansion
}

// caPoolLister implements the CaPoolLister interface.
type caPoolLister struct {
	indexer cache.Indexer
}

// NewCaPoolLister returns a new CaPoolLister.
func NewCaPoolLister(indexer cache.Indexer) CaPoolLister {
	return &caPoolLister{indexer: indexer}
}

// List lists all CaPools in the indexer.
func (s *caPoolLister) List(selector labels.Selector) (ret []*v1alpha1.CaPool, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CaPool))
	})
	return ret, err
}

// CaPools returns an object that can list and get CaPools.
func (s *caPoolLister) CaPools(namespace string) CaPoolNamespaceLister {
	return caPoolNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CaPoolNamespaceLister helps list and get CaPools.
// All objects returned here must be treated as read-only.
type CaPoolNamespaceLister interface {
	// List lists all CaPools in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CaPool, err error)
	// Get retrieves the CaPool from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.CaPool, error)
	CaPoolNamespaceListerExpansion
}

// caPoolNamespaceLister implements the CaPoolNamespaceLister
// interface.
type caPoolNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CaPools in the indexer for a given namespace.
func (s caPoolNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CaPool, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CaPool))
	})
	return ret, err
}

// Get retrieves the CaPool from the indexer for a given namespace and name.
func (s caPoolNamespaceLister) Get(name string) (*v1alpha1.CaPool, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("capool"), name)
	}
	return obj.(*v1alpha1.CaPool), nil
}
