/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/privateca/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CertificateAuthorityLister helps list CertificateAuthorities.
// All objects returned here must be treated as read-only.
type CertificateAuthorityLister interface {
	// List lists all CertificateAuthorities in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CertificateAuthority, err error)
	// CertificateAuthorities returns an object that can list and get CertificateAuthorities.
	CertificateAuthorities(namespace string) CertificateAuthorityNamespaceLister
	CertificateAuthorityListerExpansion
}

// certificateAuthorityLister implements the CertificateAuthorityLister interface.
type certificateAuthorityLister struct {
	indexer cache.Indexer
}

// NewCertificateAuthorityLister returns a new CertificateAuthorityLister.
func NewCertificateAuthorityLister(indexer cache.Indexer) CertificateAuthorityLister {
	return &certificateAuthorityLister{indexer: indexer}
}

// List lists all CertificateAuthorities in the indexer.
func (s *certificateAuthorityLister) List(selector labels.Selector) (ret []*v1alpha1.CertificateAuthority, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CertificateAuthority))
	})
	return ret, err
}

// CertificateAuthorities returns an object that can list and get CertificateAuthorities.
func (s *certificateAuthorityLister) CertificateAuthorities(namespace string) CertificateAuthorityNamespaceLister {
	return certificateAuthorityNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CertificateAuthorityNamespaceLister helps list and get CertificateAuthorities.
// All objects returned here must be treated as read-only.
type CertificateAuthorityNamespaceLister interface {
	// List lists all CertificateAuthorities in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CertificateAuthority, err error)
	// Get retrieves the CertificateAuthority from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.CertificateAuthority, error)
	CertificateAuthorityNamespaceListerExpansion
}

// certificateAuthorityNamespaceLister implements the CertificateAuthorityNamespaceLister
// interface.
type certificateAuthorityNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CertificateAuthorities in the indexer for a given namespace.
func (s certificateAuthorityNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CertificateAuthority, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CertificateAuthority))
	})
	return ret, err
}

// Get retrieves the CertificateAuthority from the indexer for a given namespace and name.
func (s certificateAuthorityNamespaceLister) Get(name string) (*v1alpha1.CertificateAuthority, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("certificateauthority"), name)
	}
	return obj.(*v1alpha1.CertificateAuthority), nil
}
