/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-google-api/apis/binaryauthorization/v1alpha1"
)

// AttestorIamMemberLister helps list AttestorIamMembers.
// All objects returned here must be treated as read-only.
type AttestorIamMemberLister interface {
	// List lists all AttestorIamMembers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AttestorIamMember, err error)
	// AttestorIamMembers returns an object that can list and get AttestorIamMembers.
	AttestorIamMembers(namespace string) AttestorIamMemberNamespaceLister
	AttestorIamMemberListerExpansion
}

// attestorIamMemberLister implements the AttestorIamMemberLister interface.
type attestorIamMemberLister struct {
	indexer cache.Indexer
}

// NewAttestorIamMemberLister returns a new AttestorIamMemberLister.
func NewAttestorIamMemberLister(indexer cache.Indexer) AttestorIamMemberLister {
	return &attestorIamMemberLister{indexer: indexer}
}

// List lists all AttestorIamMembers in the indexer.
func (s *attestorIamMemberLister) List(selector labels.Selector) (ret []*v1alpha1.AttestorIamMember, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AttestorIamMember))
	})
	return ret, err
}

// AttestorIamMembers returns an object that can list and get AttestorIamMembers.
func (s *attestorIamMemberLister) AttestorIamMembers(namespace string) AttestorIamMemberNamespaceLister {
	return attestorIamMemberNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AttestorIamMemberNamespaceLister helps list and get AttestorIamMembers.
// All objects returned here must be treated as read-only.
type AttestorIamMemberNamespaceLister interface {
	// List lists all AttestorIamMembers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AttestorIamMember, err error)
	// Get retrieves the AttestorIamMember from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AttestorIamMember, error)
	AttestorIamMemberNamespaceListerExpansion
}

// attestorIamMemberNamespaceLister implements the AttestorIamMemberNamespaceLister
// interface.
type attestorIamMemberNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AttestorIamMembers in the indexer for a given namespace.
func (s attestorIamMemberNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AttestorIamMember, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AttestorIamMember))
	})
	return ret, err
}

// Get retrieves the AttestorIamMember from the indexer for a given namespace and name.
func (s attestorIamMemberNamespaceLister) Get(name string) (*v1alpha1.AttestorIamMember, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("attestoriammember"), name)
	}
	return obj.(*v1alpha1.AttestorIamMember), nil
}
