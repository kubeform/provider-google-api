/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-google-api/apis/binaryauthorization/v1alpha1"
)

// AttestorIamPolicyLister helps list AttestorIamPolicies.
// All objects returned here must be treated as read-only.
type AttestorIamPolicyLister interface {
	// List lists all AttestorIamPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AttestorIamPolicy, err error)
	// AttestorIamPolicies returns an object that can list and get AttestorIamPolicies.
	AttestorIamPolicies(namespace string) AttestorIamPolicyNamespaceLister
	AttestorIamPolicyListerExpansion
}

// attestorIamPolicyLister implements the AttestorIamPolicyLister interface.
type attestorIamPolicyLister struct {
	indexer cache.Indexer
}

// NewAttestorIamPolicyLister returns a new AttestorIamPolicyLister.
func NewAttestorIamPolicyLister(indexer cache.Indexer) AttestorIamPolicyLister {
	return &attestorIamPolicyLister{indexer: indexer}
}

// List lists all AttestorIamPolicies in the indexer.
func (s *attestorIamPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.AttestorIamPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AttestorIamPolicy))
	})
	return ret, err
}

// AttestorIamPolicies returns an object that can list and get AttestorIamPolicies.
func (s *attestorIamPolicyLister) AttestorIamPolicies(namespace string) AttestorIamPolicyNamespaceLister {
	return attestorIamPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AttestorIamPolicyNamespaceLister helps list and get AttestorIamPolicies.
// All objects returned here must be treated as read-only.
type AttestorIamPolicyNamespaceLister interface {
	// List lists all AttestorIamPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AttestorIamPolicy, err error)
	// Get retrieves the AttestorIamPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AttestorIamPolicy, error)
	AttestorIamPolicyNamespaceListerExpansion
}

// attestorIamPolicyNamespaceLister implements the AttestorIamPolicyNamespaceLister
// interface.
type attestorIamPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AttestorIamPolicies in the indexer for a given namespace.
func (s attestorIamPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AttestorIamPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AttestorIamPolicy))
	})
	return ret, err
}

// Get retrieves the AttestorIamPolicy from the indexer for a given namespace and name.
func (s attestorIamPolicyNamespaceLister) Get(name string) (*v1alpha1.AttestorIamPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("attestoriampolicy"), name)
	}
	return obj.(*v1alpha1.AttestorIamPolicy), nil
}
