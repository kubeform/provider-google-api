/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-google-api/apis/binaryauthorization/v1alpha1"
)

// AttestorIamBindingLister helps list AttestorIamBindings.
// All objects returned here must be treated as read-only.
type AttestorIamBindingLister interface {
	// List lists all AttestorIamBindings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AttestorIamBinding, err error)
	// AttestorIamBindings returns an object that can list and get AttestorIamBindings.
	AttestorIamBindings(namespace string) AttestorIamBindingNamespaceLister
	AttestorIamBindingListerExpansion
}

// attestorIamBindingLister implements the AttestorIamBindingLister interface.
type attestorIamBindingLister struct {
	indexer cache.Indexer
}

// NewAttestorIamBindingLister returns a new AttestorIamBindingLister.
func NewAttestorIamBindingLister(indexer cache.Indexer) AttestorIamBindingLister {
	return &attestorIamBindingLister{indexer: indexer}
}

// List lists all AttestorIamBindings in the indexer.
func (s *attestorIamBindingLister) List(selector labels.Selector) (ret []*v1alpha1.AttestorIamBinding, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AttestorIamBinding))
	})
	return ret, err
}

// AttestorIamBindings returns an object that can list and get AttestorIamBindings.
func (s *attestorIamBindingLister) AttestorIamBindings(namespace string) AttestorIamBindingNamespaceLister {
	return attestorIamBindingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AttestorIamBindingNamespaceLister helps list and get AttestorIamBindings.
// All objects returned here must be treated as read-only.
type AttestorIamBindingNamespaceLister interface {
	// List lists all AttestorIamBindings in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AttestorIamBinding, err error)
	// Get retrieves the AttestorIamBinding from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AttestorIamBinding, error)
	AttestorIamBindingNamespaceListerExpansion
}

// attestorIamBindingNamespaceLister implements the AttestorIamBindingNamespaceLister
// interface.
type attestorIamBindingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AttestorIamBindings in the indexer for a given namespace.
func (s attestorIamBindingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AttestorIamBinding, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AttestorIamBinding))
	})
	return ret, err
}

// Get retrieves the AttestorIamBinding from the indexer for a given namespace and name.
func (s attestorIamBindingNamespaceLister) Get(name string) (*v1alpha1.AttestorIamBinding, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("attestoriambinding"), name)
	}
	return obj.(*v1alpha1.AttestorIamBinding), nil
}
