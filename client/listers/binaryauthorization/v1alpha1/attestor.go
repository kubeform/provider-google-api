/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/binaryauthorization/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AttestorLister helps list Attestors.
// All objects returned here must be treated as read-only.
type AttestorLister interface {
	// List lists all Attestors in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Attestor, err error)
	// Attestors returns an object that can list and get Attestors.
	Attestors(namespace string) AttestorNamespaceLister
	AttestorListerExpansion
}

// attestorLister implements the AttestorLister interface.
type attestorLister struct {
	indexer cache.Indexer
}

// NewAttestorLister returns a new AttestorLister.
func NewAttestorLister(indexer cache.Indexer) AttestorLister {
	return &attestorLister{indexer: indexer}
}

// List lists all Attestors in the indexer.
func (s *attestorLister) List(selector labels.Selector) (ret []*v1alpha1.Attestor, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Attestor))
	})
	return ret, err
}

// Attestors returns an object that can list and get Attestors.
func (s *attestorLister) Attestors(namespace string) AttestorNamespaceLister {
	return attestorNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AttestorNamespaceLister helps list and get Attestors.
// All objects returned here must be treated as read-only.
type AttestorNamespaceLister interface {
	// List lists all Attestors in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Attestor, err error)
	// Get retrieves the Attestor from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Attestor, error)
	AttestorNamespaceListerExpansion
}

// attestorNamespaceLister implements the AttestorNamespaceLister
// interface.
type attestorNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Attestors in the indexer for a given namespace.
func (s attestorNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Attestor, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Attestor))
	})
	return ret, err
}

// Get retrieves the Attestor from the indexer for a given namespace and name.
func (s attestorNamespaceLister) Get(name string) (*v1alpha1.Attestor, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("attestor"), name)
	}
	return obj.(*v1alpha1.Attestor), nil
}
