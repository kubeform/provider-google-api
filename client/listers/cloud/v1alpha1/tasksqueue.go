/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-google-api/apis/cloud/v1alpha1"
)

// TasksQueueLister helps list TasksQueues.
// All objects returned here must be treated as read-only.
type TasksQueueLister interface {
	// List lists all TasksQueues in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TasksQueue, err error)
	// TasksQueues returns an object that can list and get TasksQueues.
	TasksQueues(namespace string) TasksQueueNamespaceLister
	TasksQueueListerExpansion
}

// tasksQueueLister implements the TasksQueueLister interface.
type tasksQueueLister struct {
	indexer cache.Indexer
}

// NewTasksQueueLister returns a new TasksQueueLister.
func NewTasksQueueLister(indexer cache.Indexer) TasksQueueLister {
	return &tasksQueueLister{indexer: indexer}
}

// List lists all TasksQueues in the indexer.
func (s *tasksQueueLister) List(selector labels.Selector) (ret []*v1alpha1.TasksQueue, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TasksQueue))
	})
	return ret, err
}

// TasksQueues returns an object that can list and get TasksQueues.
func (s *tasksQueueLister) TasksQueues(namespace string) TasksQueueNamespaceLister {
	return tasksQueueNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TasksQueueNamespaceLister helps list and get TasksQueues.
// All objects returned here must be treated as read-only.
type TasksQueueNamespaceLister interface {
	// List lists all TasksQueues in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TasksQueue, err error)
	// Get retrieves the TasksQueue from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.TasksQueue, error)
	TasksQueueNamespaceListerExpansion
}

// tasksQueueNamespaceLister implements the TasksQueueNamespaceLister
// interface.
type tasksQueueNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TasksQueues in the indexer for a given namespace.
func (s tasksQueueNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TasksQueue, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TasksQueue))
	})
	return ret, err
}

// Get retrieves the TasksQueue from the indexer for a given namespace and name.
func (s tasksQueueNamespaceLister) Get(name string) (*v1alpha1.TasksQueue, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("tasksqueue"), name)
	}
	return obj.(*v1alpha1.TasksQueue), nil
}
