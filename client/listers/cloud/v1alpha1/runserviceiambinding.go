/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/cloud/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RunServiceIamBindingLister helps list RunServiceIamBindings.
// All objects returned here must be treated as read-only.
type RunServiceIamBindingLister interface {
	// List lists all RunServiceIamBindings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RunServiceIamBinding, err error)
	// RunServiceIamBindings returns an object that can list and get RunServiceIamBindings.
	RunServiceIamBindings(namespace string) RunServiceIamBindingNamespaceLister
	RunServiceIamBindingListerExpansion
}

// runServiceIamBindingLister implements the RunServiceIamBindingLister interface.
type runServiceIamBindingLister struct {
	indexer cache.Indexer
}

// NewRunServiceIamBindingLister returns a new RunServiceIamBindingLister.
func NewRunServiceIamBindingLister(indexer cache.Indexer) RunServiceIamBindingLister {
	return &runServiceIamBindingLister{indexer: indexer}
}

// List lists all RunServiceIamBindings in the indexer.
func (s *runServiceIamBindingLister) List(selector labels.Selector) (ret []*v1alpha1.RunServiceIamBinding, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RunServiceIamBinding))
	})
	return ret, err
}

// RunServiceIamBindings returns an object that can list and get RunServiceIamBindings.
func (s *runServiceIamBindingLister) RunServiceIamBindings(namespace string) RunServiceIamBindingNamespaceLister {
	return runServiceIamBindingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RunServiceIamBindingNamespaceLister helps list and get RunServiceIamBindings.
// All objects returned here must be treated as read-only.
type RunServiceIamBindingNamespaceLister interface {
	// List lists all RunServiceIamBindings in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RunServiceIamBinding, err error)
	// Get retrieves the RunServiceIamBinding from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.RunServiceIamBinding, error)
	RunServiceIamBindingNamespaceListerExpansion
}

// runServiceIamBindingNamespaceLister implements the RunServiceIamBindingNamespaceLister
// interface.
type runServiceIamBindingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RunServiceIamBindings in the indexer for a given namespace.
func (s runServiceIamBindingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RunServiceIamBinding, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RunServiceIamBinding))
	})
	return ret, err
}

// Get retrieves the RunServiceIamBinding from the indexer for a given namespace and name.
func (s runServiceIamBindingNamespaceLister) Get(name string) (*v1alpha1.RunServiceIamBinding, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("runserviceiambinding"), name)
	}
	return obj.(*v1alpha1.RunServiceIamBinding), nil
}
