/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/cloud/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RunServiceIamPolicyLister helps list RunServiceIamPolicies.
// All objects returned here must be treated as read-only.
type RunServiceIamPolicyLister interface {
	// List lists all RunServiceIamPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RunServiceIamPolicy, err error)
	// RunServiceIamPolicies returns an object that can list and get RunServiceIamPolicies.
	RunServiceIamPolicies(namespace string) RunServiceIamPolicyNamespaceLister
	RunServiceIamPolicyListerExpansion
}

// runServiceIamPolicyLister implements the RunServiceIamPolicyLister interface.
type runServiceIamPolicyLister struct {
	indexer cache.Indexer
}

// NewRunServiceIamPolicyLister returns a new RunServiceIamPolicyLister.
func NewRunServiceIamPolicyLister(indexer cache.Indexer) RunServiceIamPolicyLister {
	return &runServiceIamPolicyLister{indexer: indexer}
}

// List lists all RunServiceIamPolicies in the indexer.
func (s *runServiceIamPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.RunServiceIamPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RunServiceIamPolicy))
	})
	return ret, err
}

// RunServiceIamPolicies returns an object that can list and get RunServiceIamPolicies.
func (s *runServiceIamPolicyLister) RunServiceIamPolicies(namespace string) RunServiceIamPolicyNamespaceLister {
	return runServiceIamPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RunServiceIamPolicyNamespaceLister helps list and get RunServiceIamPolicies.
// All objects returned here must be treated as read-only.
type RunServiceIamPolicyNamespaceLister interface {
	// List lists all RunServiceIamPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RunServiceIamPolicy, err error)
	// Get retrieves the RunServiceIamPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.RunServiceIamPolicy, error)
	RunServiceIamPolicyNamespaceListerExpansion
}

// runServiceIamPolicyNamespaceLister implements the RunServiceIamPolicyNamespaceLister
// interface.
type runServiceIamPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RunServiceIamPolicies in the indexer for a given namespace.
func (s runServiceIamPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RunServiceIamPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RunServiceIamPolicy))
	})
	return ret, err
}

// Get retrieves the RunServiceIamPolicy from the indexer for a given namespace and name.
func (s runServiceIamPolicyNamespaceLister) Get(name string) (*v1alpha1.RunServiceIamPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("runserviceiampolicy"), name)
	}
	return obj.(*v1alpha1.RunServiceIamPolicy), nil
}
