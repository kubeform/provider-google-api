/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/cloud/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RunServiceLister helps list RunServices.
// All objects returned here must be treated as read-only.
type RunServiceLister interface {
	// List lists all RunServices in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RunService, err error)
	// RunServices returns an object that can list and get RunServices.
	RunServices(namespace string) RunServiceNamespaceLister
	RunServiceListerExpansion
}

// runServiceLister implements the RunServiceLister interface.
type runServiceLister struct {
	indexer cache.Indexer
}

// NewRunServiceLister returns a new RunServiceLister.
func NewRunServiceLister(indexer cache.Indexer) RunServiceLister {
	return &runServiceLister{indexer: indexer}
}

// List lists all RunServices in the indexer.
func (s *runServiceLister) List(selector labels.Selector) (ret []*v1alpha1.RunService, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RunService))
	})
	return ret, err
}

// RunServices returns an object that can list and get RunServices.
func (s *runServiceLister) RunServices(namespace string) RunServiceNamespaceLister {
	return runServiceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RunServiceNamespaceLister helps list and get RunServices.
// All objects returned here must be treated as read-only.
type RunServiceNamespaceLister interface {
	// List lists all RunServices in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RunService, err error)
	// Get retrieves the RunService from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.RunService, error)
	RunServiceNamespaceListerExpansion
}

// runServiceNamespaceLister implements the RunServiceNamespaceLister
// interface.
type runServiceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RunServices in the indexer for a given namespace.
func (s runServiceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RunService, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RunService))
	})
	return ret, err
}

// Get retrieves the RunService from the indexer for a given namespace and name.
func (s runServiceNamespaceLister) Get(name string) (*v1alpha1.RunService, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("runservice"), name)
	}
	return obj.(*v1alpha1.RunService), nil
}
