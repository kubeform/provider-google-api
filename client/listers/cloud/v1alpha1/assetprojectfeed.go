/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/cloud/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AssetProjectFeedLister helps list AssetProjectFeeds.
// All objects returned here must be treated as read-only.
type AssetProjectFeedLister interface {
	// List lists all AssetProjectFeeds in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AssetProjectFeed, err error)
	// AssetProjectFeeds returns an object that can list and get AssetProjectFeeds.
	AssetProjectFeeds(namespace string) AssetProjectFeedNamespaceLister
	AssetProjectFeedListerExpansion
}

// assetProjectFeedLister implements the AssetProjectFeedLister interface.
type assetProjectFeedLister struct {
	indexer cache.Indexer
}

// NewAssetProjectFeedLister returns a new AssetProjectFeedLister.
func NewAssetProjectFeedLister(indexer cache.Indexer) AssetProjectFeedLister {
	return &assetProjectFeedLister{indexer: indexer}
}

// List lists all AssetProjectFeeds in the indexer.
func (s *assetProjectFeedLister) List(selector labels.Selector) (ret []*v1alpha1.AssetProjectFeed, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AssetProjectFeed))
	})
	return ret, err
}

// AssetProjectFeeds returns an object that can list and get AssetProjectFeeds.
func (s *assetProjectFeedLister) AssetProjectFeeds(namespace string) AssetProjectFeedNamespaceLister {
	return assetProjectFeedNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AssetProjectFeedNamespaceLister helps list and get AssetProjectFeeds.
// All objects returned here must be treated as read-only.
type AssetProjectFeedNamespaceLister interface {
	// List lists all AssetProjectFeeds in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AssetProjectFeed, err error)
	// Get retrieves the AssetProjectFeed from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AssetProjectFeed, error)
	AssetProjectFeedNamespaceListerExpansion
}

// assetProjectFeedNamespaceLister implements the AssetProjectFeedNamespaceLister
// interface.
type assetProjectFeedNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AssetProjectFeeds in the indexer for a given namespace.
func (s assetProjectFeedNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AssetProjectFeed, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AssetProjectFeed))
	})
	return ret, err
}

// Get retrieves the AssetProjectFeed from the indexer for a given namespace and name.
func (s assetProjectFeedNamespaceLister) Get(name string) (*v1alpha1.AssetProjectFeed, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("assetprojectfeed"), name)
	}
	return obj.(*v1alpha1.AssetProjectFeed), nil
}
