/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/cloud/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RunServiceIamMemberLister helps list RunServiceIamMembers.
// All objects returned here must be treated as read-only.
type RunServiceIamMemberLister interface {
	// List lists all RunServiceIamMembers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RunServiceIamMember, err error)
	// RunServiceIamMembers returns an object that can list and get RunServiceIamMembers.
	RunServiceIamMembers(namespace string) RunServiceIamMemberNamespaceLister
	RunServiceIamMemberListerExpansion
}

// runServiceIamMemberLister implements the RunServiceIamMemberLister interface.
type runServiceIamMemberLister struct {
	indexer cache.Indexer
}

// NewRunServiceIamMemberLister returns a new RunServiceIamMemberLister.
func NewRunServiceIamMemberLister(indexer cache.Indexer) RunServiceIamMemberLister {
	return &runServiceIamMemberLister{indexer: indexer}
}

// List lists all RunServiceIamMembers in the indexer.
func (s *runServiceIamMemberLister) List(selector labels.Selector) (ret []*v1alpha1.RunServiceIamMember, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RunServiceIamMember))
	})
	return ret, err
}

// RunServiceIamMembers returns an object that can list and get RunServiceIamMembers.
func (s *runServiceIamMemberLister) RunServiceIamMembers(namespace string) RunServiceIamMemberNamespaceLister {
	return runServiceIamMemberNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RunServiceIamMemberNamespaceLister helps list and get RunServiceIamMembers.
// All objects returned here must be treated as read-only.
type RunServiceIamMemberNamespaceLister interface {
	// List lists all RunServiceIamMembers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RunServiceIamMember, err error)
	// Get retrieves the RunServiceIamMember from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.RunServiceIamMember, error)
	RunServiceIamMemberNamespaceListerExpansion
}

// runServiceIamMemberNamespaceLister implements the RunServiceIamMemberNamespaceLister
// interface.
type runServiceIamMemberNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RunServiceIamMembers in the indexer for a given namespace.
func (s runServiceIamMemberNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RunServiceIamMember, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RunServiceIamMember))
	})
	return ret, err
}

// Get retrieves the RunServiceIamMember from the indexer for a given namespace and name.
func (s runServiceIamMemberNamespaceLister) Get(name string) (*v1alpha1.RunServiceIamMember, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("runserviceiammember"), name)
	}
	return obj.(*v1alpha1.RunServiceIamMember), nil
}
