/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-google-api/apis/cloud/v1alpha1"
)

// AssetFolderFeedLister helps list AssetFolderFeeds.
// All objects returned here must be treated as read-only.
type AssetFolderFeedLister interface {
	// List lists all AssetFolderFeeds in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AssetFolderFeed, err error)
	// AssetFolderFeeds returns an object that can list and get AssetFolderFeeds.
	AssetFolderFeeds(namespace string) AssetFolderFeedNamespaceLister
	AssetFolderFeedListerExpansion
}

// assetFolderFeedLister implements the AssetFolderFeedLister interface.
type assetFolderFeedLister struct {
	indexer cache.Indexer
}

// NewAssetFolderFeedLister returns a new AssetFolderFeedLister.
func NewAssetFolderFeedLister(indexer cache.Indexer) AssetFolderFeedLister {
	return &assetFolderFeedLister{indexer: indexer}
}

// List lists all AssetFolderFeeds in the indexer.
func (s *assetFolderFeedLister) List(selector labels.Selector) (ret []*v1alpha1.AssetFolderFeed, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AssetFolderFeed))
	})
	return ret, err
}

// AssetFolderFeeds returns an object that can list and get AssetFolderFeeds.
func (s *assetFolderFeedLister) AssetFolderFeeds(namespace string) AssetFolderFeedNamespaceLister {
	return assetFolderFeedNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AssetFolderFeedNamespaceLister helps list and get AssetFolderFeeds.
// All objects returned here must be treated as read-only.
type AssetFolderFeedNamespaceLister interface {
	// List lists all AssetFolderFeeds in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AssetFolderFeed, err error)
	// Get retrieves the AssetFolderFeed from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AssetFolderFeed, error)
	AssetFolderFeedNamespaceListerExpansion
}

// assetFolderFeedNamespaceLister implements the AssetFolderFeedNamespaceLister
// interface.
type assetFolderFeedNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AssetFolderFeeds in the indexer for a given namespace.
func (s assetFolderFeedNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AssetFolderFeed, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AssetFolderFeed))
	})
	return ret, err
}

// Get retrieves the AssetFolderFeed from the indexer for a given namespace and name.
func (s assetFolderFeedNamespaceLister) Get(name string) (*v1alpha1.AssetFolderFeed, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("assetfolderfeed"), name)
	}
	return obj.(*v1alpha1.AssetFolderFeed), nil
}
