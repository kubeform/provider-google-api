/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/gke/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// HubMembershipLister helps list HubMemberships.
// All objects returned here must be treated as read-only.
type HubMembershipLister interface {
	// List lists all HubMemberships in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HubMembership, err error)
	// HubMemberships returns an object that can list and get HubMemberships.
	HubMemberships(namespace string) HubMembershipNamespaceLister
	HubMembershipListerExpansion
}

// hubMembershipLister implements the HubMembershipLister interface.
type hubMembershipLister struct {
	indexer cache.Indexer
}

// NewHubMembershipLister returns a new HubMembershipLister.
func NewHubMembershipLister(indexer cache.Indexer) HubMembershipLister {
	return &hubMembershipLister{indexer: indexer}
}

// List lists all HubMemberships in the indexer.
func (s *hubMembershipLister) List(selector labels.Selector) (ret []*v1alpha1.HubMembership, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HubMembership))
	})
	return ret, err
}

// HubMemberships returns an object that can list and get HubMemberships.
func (s *hubMembershipLister) HubMemberships(namespace string) HubMembershipNamespaceLister {
	return hubMembershipNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HubMembershipNamespaceLister helps list and get HubMemberships.
// All objects returned here must be treated as read-only.
type HubMembershipNamespaceLister interface {
	// List lists all HubMemberships in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HubMembership, err error)
	// Get retrieves the HubMembership from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.HubMembership, error)
	HubMembershipNamespaceListerExpansion
}

// hubMembershipNamespaceLister implements the HubMembershipNamespaceLister
// interface.
type hubMembershipNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all HubMemberships in the indexer for a given namespace.
func (s hubMembershipNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.HubMembership, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HubMembership))
	})
	return ret, err
}

// Get retrieves the HubMembership from the indexer for a given namespace and name.
func (s hubMembershipNamespaceLister) Get(name string) (*v1alpha1.HubMembership, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("hubmembership"), name)
	}
	return obj.(*v1alpha1.HubMembership), nil
}
