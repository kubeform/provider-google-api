/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/appengine/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ApplicationURLDispatchRulesLister helps list ApplicationURLDispatchRuleses.
// All objects returned here must be treated as read-only.
type ApplicationURLDispatchRulesLister interface {
	// List lists all ApplicationURLDispatchRuleses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ApplicationURLDispatchRules, err error)
	// ApplicationURLDispatchRuleses returns an object that can list and get ApplicationURLDispatchRuleses.
	ApplicationURLDispatchRuleses(namespace string) ApplicationURLDispatchRulesNamespaceLister
	ApplicationURLDispatchRulesListerExpansion
}

// applicationURLDispatchRulesLister implements the ApplicationURLDispatchRulesLister interface.
type applicationURLDispatchRulesLister struct {
	indexer cache.Indexer
}

// NewApplicationURLDispatchRulesLister returns a new ApplicationURLDispatchRulesLister.
func NewApplicationURLDispatchRulesLister(indexer cache.Indexer) ApplicationURLDispatchRulesLister {
	return &applicationURLDispatchRulesLister{indexer: indexer}
}

// List lists all ApplicationURLDispatchRuleses in the indexer.
func (s *applicationURLDispatchRulesLister) List(selector labels.Selector) (ret []*v1alpha1.ApplicationURLDispatchRules, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ApplicationURLDispatchRules))
	})
	return ret, err
}

// ApplicationURLDispatchRuleses returns an object that can list and get ApplicationURLDispatchRuleses.
func (s *applicationURLDispatchRulesLister) ApplicationURLDispatchRuleses(namespace string) ApplicationURLDispatchRulesNamespaceLister {
	return applicationURLDispatchRulesNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ApplicationURLDispatchRulesNamespaceLister helps list and get ApplicationURLDispatchRuleses.
// All objects returned here must be treated as read-only.
type ApplicationURLDispatchRulesNamespaceLister interface {
	// List lists all ApplicationURLDispatchRuleses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ApplicationURLDispatchRules, err error)
	// Get retrieves the ApplicationURLDispatchRules from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ApplicationURLDispatchRules, error)
	ApplicationURLDispatchRulesNamespaceListerExpansion
}

// applicationURLDispatchRulesNamespaceLister implements the ApplicationURLDispatchRulesNamespaceLister
// interface.
type applicationURLDispatchRulesNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ApplicationURLDispatchRuleses in the indexer for a given namespace.
func (s applicationURLDispatchRulesNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ApplicationURLDispatchRules, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ApplicationURLDispatchRules))
	})
	return ret, err
}

// Get retrieves the ApplicationURLDispatchRules from the indexer for a given namespace and name.
func (s applicationURLDispatchRulesNamespaceLister) Get(name string) (*v1alpha1.ApplicationURLDispatchRules, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("applicationurldispatchrules"), name)
	}
	return obj.(*v1alpha1.ApplicationURLDispatchRules), nil
}
