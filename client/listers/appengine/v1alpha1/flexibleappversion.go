/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-google-api/apis/appengine/v1alpha1"
)

// FlexibleAppVersionLister helps list FlexibleAppVersions.
// All objects returned here must be treated as read-only.
type FlexibleAppVersionLister interface {
	// List lists all FlexibleAppVersions in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FlexibleAppVersion, err error)
	// FlexibleAppVersions returns an object that can list and get FlexibleAppVersions.
	FlexibleAppVersions(namespace string) FlexibleAppVersionNamespaceLister
	FlexibleAppVersionListerExpansion
}

// flexibleAppVersionLister implements the FlexibleAppVersionLister interface.
type flexibleAppVersionLister struct {
	indexer cache.Indexer
}

// NewFlexibleAppVersionLister returns a new FlexibleAppVersionLister.
func NewFlexibleAppVersionLister(indexer cache.Indexer) FlexibleAppVersionLister {
	return &flexibleAppVersionLister{indexer: indexer}
}

// List lists all FlexibleAppVersions in the indexer.
func (s *flexibleAppVersionLister) List(selector labels.Selector) (ret []*v1alpha1.FlexibleAppVersion, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FlexibleAppVersion))
	})
	return ret, err
}

// FlexibleAppVersions returns an object that can list and get FlexibleAppVersions.
func (s *flexibleAppVersionLister) FlexibleAppVersions(namespace string) FlexibleAppVersionNamespaceLister {
	return flexibleAppVersionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FlexibleAppVersionNamespaceLister helps list and get FlexibleAppVersions.
// All objects returned here must be treated as read-only.
type FlexibleAppVersionNamespaceLister interface {
	// List lists all FlexibleAppVersions in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FlexibleAppVersion, err error)
	// Get retrieves the FlexibleAppVersion from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.FlexibleAppVersion, error)
	FlexibleAppVersionNamespaceListerExpansion
}

// flexibleAppVersionNamespaceLister implements the FlexibleAppVersionNamespaceLister
// interface.
type flexibleAppVersionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FlexibleAppVersions in the indexer for a given namespace.
func (s flexibleAppVersionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.FlexibleAppVersion, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FlexibleAppVersion))
	})
	return ret, err
}

// Get retrieves the FlexibleAppVersion from the indexer for a given namespace and name.
func (s flexibleAppVersionNamespaceLister) Get(name string) (*v1alpha1.FlexibleAppVersion, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("flexibleappversion"), name)
	}
	return obj.(*v1alpha1.FlexibleAppVersion), nil
}
