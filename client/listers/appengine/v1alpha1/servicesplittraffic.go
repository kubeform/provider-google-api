/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/appengine/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ServiceSplitTrafficLister helps list ServiceSplitTraffics.
// All objects returned here must be treated as read-only.
type ServiceSplitTrafficLister interface {
	// List lists all ServiceSplitTraffics in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServiceSplitTraffic, err error)
	// ServiceSplitTraffics returns an object that can list and get ServiceSplitTraffics.
	ServiceSplitTraffics(namespace string) ServiceSplitTrafficNamespaceLister
	ServiceSplitTrafficListerExpansion
}

// serviceSplitTrafficLister implements the ServiceSplitTrafficLister interface.
type serviceSplitTrafficLister struct {
	indexer cache.Indexer
}

// NewServiceSplitTrafficLister returns a new ServiceSplitTrafficLister.
func NewServiceSplitTrafficLister(indexer cache.Indexer) ServiceSplitTrafficLister {
	return &serviceSplitTrafficLister{indexer: indexer}
}

// List lists all ServiceSplitTraffics in the indexer.
func (s *serviceSplitTrafficLister) List(selector labels.Selector) (ret []*v1alpha1.ServiceSplitTraffic, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServiceSplitTraffic))
	})
	return ret, err
}

// ServiceSplitTraffics returns an object that can list and get ServiceSplitTraffics.
func (s *serviceSplitTrafficLister) ServiceSplitTraffics(namespace string) ServiceSplitTrafficNamespaceLister {
	return serviceSplitTrafficNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ServiceSplitTrafficNamespaceLister helps list and get ServiceSplitTraffics.
// All objects returned here must be treated as read-only.
type ServiceSplitTrafficNamespaceLister interface {
	// List lists all ServiceSplitTraffics in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServiceSplitTraffic, err error)
	// Get retrieves the ServiceSplitTraffic from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ServiceSplitTraffic, error)
	ServiceSplitTrafficNamespaceListerExpansion
}

// serviceSplitTrafficNamespaceLister implements the ServiceSplitTrafficNamespaceLister
// interface.
type serviceSplitTrafficNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ServiceSplitTraffics in the indexer for a given namespace.
func (s serviceSplitTrafficNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ServiceSplitTraffic, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServiceSplitTraffic))
	})
	return ret, err
}

// Get retrieves the ServiceSplitTraffic from the indexer for a given namespace and name.
func (s serviceSplitTrafficNamespaceLister) Get(name string) (*v1alpha1.ServiceSplitTraffic, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("servicesplittraffic"), name)
	}
	return obj.(*v1alpha1.ServiceSplitTraffic), nil
}
