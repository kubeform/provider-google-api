/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/network/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ConnectivitySpokeLister helps list ConnectivitySpokes.
// All objects returned here must be treated as read-only.
type ConnectivitySpokeLister interface {
	// List lists all ConnectivitySpokes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ConnectivitySpoke, err error)
	// ConnectivitySpokes returns an object that can list and get ConnectivitySpokes.
	ConnectivitySpokes(namespace string) ConnectivitySpokeNamespaceLister
	ConnectivitySpokeListerExpansion
}

// connectivitySpokeLister implements the ConnectivitySpokeLister interface.
type connectivitySpokeLister struct {
	indexer cache.Indexer
}

// NewConnectivitySpokeLister returns a new ConnectivitySpokeLister.
func NewConnectivitySpokeLister(indexer cache.Indexer) ConnectivitySpokeLister {
	return &connectivitySpokeLister{indexer: indexer}
}

// List lists all ConnectivitySpokes in the indexer.
func (s *connectivitySpokeLister) List(selector labels.Selector) (ret []*v1alpha1.ConnectivitySpoke, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConnectivitySpoke))
	})
	return ret, err
}

// ConnectivitySpokes returns an object that can list and get ConnectivitySpokes.
func (s *connectivitySpokeLister) ConnectivitySpokes(namespace string) ConnectivitySpokeNamespaceLister {
	return connectivitySpokeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ConnectivitySpokeNamespaceLister helps list and get ConnectivitySpokes.
// All objects returned here must be treated as read-only.
type ConnectivitySpokeNamespaceLister interface {
	// List lists all ConnectivitySpokes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ConnectivitySpoke, err error)
	// Get retrieves the ConnectivitySpoke from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ConnectivitySpoke, error)
	ConnectivitySpokeNamespaceListerExpansion
}

// connectivitySpokeNamespaceLister implements the ConnectivitySpokeNamespaceLister
// interface.
type connectivitySpokeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ConnectivitySpokes in the indexer for a given namespace.
func (s connectivitySpokeNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ConnectivitySpoke, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConnectivitySpoke))
	})
	return ret, err
}

// Get retrieves the ConnectivitySpoke from the indexer for a given namespace and name.
func (s connectivitySpokeNamespaceLister) Get(name string) (*v1alpha1.ConnectivitySpoke, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("connectivityspoke"), name)
	}
	return obj.(*v1alpha1.ConnectivitySpoke), nil
}
