/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/network/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ServicesEdgeCacheKeysetLister helps list ServicesEdgeCacheKeysets.
// All objects returned here must be treated as read-only.
type ServicesEdgeCacheKeysetLister interface {
	// List lists all ServicesEdgeCacheKeysets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServicesEdgeCacheKeyset, err error)
	// ServicesEdgeCacheKeysets returns an object that can list and get ServicesEdgeCacheKeysets.
	ServicesEdgeCacheKeysets(namespace string) ServicesEdgeCacheKeysetNamespaceLister
	ServicesEdgeCacheKeysetListerExpansion
}

// servicesEdgeCacheKeysetLister implements the ServicesEdgeCacheKeysetLister interface.
type servicesEdgeCacheKeysetLister struct {
	indexer cache.Indexer
}

// NewServicesEdgeCacheKeysetLister returns a new ServicesEdgeCacheKeysetLister.
func NewServicesEdgeCacheKeysetLister(indexer cache.Indexer) ServicesEdgeCacheKeysetLister {
	return &servicesEdgeCacheKeysetLister{indexer: indexer}
}

// List lists all ServicesEdgeCacheKeysets in the indexer.
func (s *servicesEdgeCacheKeysetLister) List(selector labels.Selector) (ret []*v1alpha1.ServicesEdgeCacheKeyset, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServicesEdgeCacheKeyset))
	})
	return ret, err
}

// ServicesEdgeCacheKeysets returns an object that can list and get ServicesEdgeCacheKeysets.
func (s *servicesEdgeCacheKeysetLister) ServicesEdgeCacheKeysets(namespace string) ServicesEdgeCacheKeysetNamespaceLister {
	return servicesEdgeCacheKeysetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ServicesEdgeCacheKeysetNamespaceLister helps list and get ServicesEdgeCacheKeysets.
// All objects returned here must be treated as read-only.
type ServicesEdgeCacheKeysetNamespaceLister interface {
	// List lists all ServicesEdgeCacheKeysets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServicesEdgeCacheKeyset, err error)
	// Get retrieves the ServicesEdgeCacheKeyset from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ServicesEdgeCacheKeyset, error)
	ServicesEdgeCacheKeysetNamespaceListerExpansion
}

// servicesEdgeCacheKeysetNamespaceLister implements the ServicesEdgeCacheKeysetNamespaceLister
// interface.
type servicesEdgeCacheKeysetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ServicesEdgeCacheKeysets in the indexer for a given namespace.
func (s servicesEdgeCacheKeysetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ServicesEdgeCacheKeyset, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServicesEdgeCacheKeyset))
	})
	return ret, err
}

// Get retrieves the ServicesEdgeCacheKeyset from the indexer for a given namespace and name.
func (s servicesEdgeCacheKeysetNamespaceLister) Get(name string) (*v1alpha1.ServicesEdgeCacheKeyset, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("servicesedgecachekeyset"), name)
	}
	return obj.(*v1alpha1.ServicesEdgeCacheKeyset), nil
}
