/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/network/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ManagementConnectivitytestLister helps list ManagementConnectivitytests.
// All objects returned here must be treated as read-only.
type ManagementConnectivitytestLister interface {
	// List lists all ManagementConnectivitytests in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ManagementConnectivitytest, err error)
	// ManagementConnectivitytests returns an object that can list and get ManagementConnectivitytests.
	ManagementConnectivitytests(namespace string) ManagementConnectivitytestNamespaceLister
	ManagementConnectivitytestListerExpansion
}

// managementConnectivitytestLister implements the ManagementConnectivitytestLister interface.
type managementConnectivitytestLister struct {
	indexer cache.Indexer
}

// NewManagementConnectivitytestLister returns a new ManagementConnectivitytestLister.
func NewManagementConnectivitytestLister(indexer cache.Indexer) ManagementConnectivitytestLister {
	return &managementConnectivitytestLister{indexer: indexer}
}

// List lists all ManagementConnectivitytests in the indexer.
func (s *managementConnectivitytestLister) List(selector labels.Selector) (ret []*v1alpha1.ManagementConnectivitytest, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ManagementConnectivitytest))
	})
	return ret, err
}

// ManagementConnectivitytests returns an object that can list and get ManagementConnectivitytests.
func (s *managementConnectivitytestLister) ManagementConnectivitytests(namespace string) ManagementConnectivitytestNamespaceLister {
	return managementConnectivitytestNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ManagementConnectivitytestNamespaceLister helps list and get ManagementConnectivitytests.
// All objects returned here must be treated as read-only.
type ManagementConnectivitytestNamespaceLister interface {
	// List lists all ManagementConnectivitytests in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ManagementConnectivitytest, err error)
	// Get retrieves the ManagementConnectivitytest from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ManagementConnectivitytest, error)
	ManagementConnectivitytestNamespaceListerExpansion
}

// managementConnectivitytestNamespaceLister implements the ManagementConnectivitytestNamespaceLister
// interface.
type managementConnectivitytestNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ManagementConnectivitytests in the indexer for a given namespace.
func (s managementConnectivitytestNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ManagementConnectivitytest, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ManagementConnectivitytest))
	})
	return ret, err
}

// Get retrieves the ManagementConnectivitytest from the indexer for a given namespace and name.
func (s managementConnectivitytestNamespaceLister) Get(name string) (*v1alpha1.ManagementConnectivitytest, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("managementconnectivitytest"), name)
	}
	return obj.(*v1alpha1.ManagementConnectivitytest), nil
}
