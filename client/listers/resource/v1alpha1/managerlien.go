/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/resource/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ManagerLienLister helps list ManagerLiens.
// All objects returned here must be treated as read-only.
type ManagerLienLister interface {
	// List lists all ManagerLiens in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ManagerLien, err error)
	// ManagerLiens returns an object that can list and get ManagerLiens.
	ManagerLiens(namespace string) ManagerLienNamespaceLister
	ManagerLienListerExpansion
}

// managerLienLister implements the ManagerLienLister interface.
type managerLienLister struct {
	indexer cache.Indexer
}

// NewManagerLienLister returns a new ManagerLienLister.
func NewManagerLienLister(indexer cache.Indexer) ManagerLienLister {
	return &managerLienLister{indexer: indexer}
}

// List lists all ManagerLiens in the indexer.
func (s *managerLienLister) List(selector labels.Selector) (ret []*v1alpha1.ManagerLien, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ManagerLien))
	})
	return ret, err
}

// ManagerLiens returns an object that can list and get ManagerLiens.
func (s *managerLienLister) ManagerLiens(namespace string) ManagerLienNamespaceLister {
	return managerLienNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ManagerLienNamespaceLister helps list and get ManagerLiens.
// All objects returned here must be treated as read-only.
type ManagerLienNamespaceLister interface {
	// List lists all ManagerLiens in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ManagerLien, err error)
	// Get retrieves the ManagerLien from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ManagerLien, error)
	ManagerLienNamespaceListerExpansion
}

// managerLienNamespaceLister implements the ManagerLienNamespaceLister
// interface.
type managerLienNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ManagerLiens in the indexer for a given namespace.
func (s managerLienNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ManagerLien, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ManagerLien))
	})
	return ret, err
}

// Get retrieves the ManagerLien from the indexer for a given namespace and name.
func (s managerLienNamespaceLister) Get(name string) (*v1alpha1.ManagerLien, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("managerlien"), name)
	}
	return obj.(*v1alpha1.ManagerLien), nil
}
