/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-google-api/apis/healthcare/v1alpha1"
)

// Hl7V2StoreIamPolicyLister helps list Hl7V2StoreIamPolicies.
// All objects returned here must be treated as read-only.
type Hl7V2StoreIamPolicyLister interface {
	// List lists all Hl7V2StoreIamPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Hl7V2StoreIamPolicy, err error)
	// Hl7V2StoreIamPolicies returns an object that can list and get Hl7V2StoreIamPolicies.
	Hl7V2StoreIamPolicies(namespace string) Hl7V2StoreIamPolicyNamespaceLister
	Hl7V2StoreIamPolicyListerExpansion
}

// hl7V2StoreIamPolicyLister implements the Hl7V2StoreIamPolicyLister interface.
type hl7V2StoreIamPolicyLister struct {
	indexer cache.Indexer
}

// NewHl7V2StoreIamPolicyLister returns a new Hl7V2StoreIamPolicyLister.
func NewHl7V2StoreIamPolicyLister(indexer cache.Indexer) Hl7V2StoreIamPolicyLister {
	return &hl7V2StoreIamPolicyLister{indexer: indexer}
}

// List lists all Hl7V2StoreIamPolicies in the indexer.
func (s *hl7V2StoreIamPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.Hl7V2StoreIamPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Hl7V2StoreIamPolicy))
	})
	return ret, err
}

// Hl7V2StoreIamPolicies returns an object that can list and get Hl7V2StoreIamPolicies.
func (s *hl7V2StoreIamPolicyLister) Hl7V2StoreIamPolicies(namespace string) Hl7V2StoreIamPolicyNamespaceLister {
	return hl7V2StoreIamPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// Hl7V2StoreIamPolicyNamespaceLister helps list and get Hl7V2StoreIamPolicies.
// All objects returned here must be treated as read-only.
type Hl7V2StoreIamPolicyNamespaceLister interface {
	// List lists all Hl7V2StoreIamPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Hl7V2StoreIamPolicy, err error)
	// Get retrieves the Hl7V2StoreIamPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Hl7V2StoreIamPolicy, error)
	Hl7V2StoreIamPolicyNamespaceListerExpansion
}

// hl7V2StoreIamPolicyNamespaceLister implements the Hl7V2StoreIamPolicyNamespaceLister
// interface.
type hl7V2StoreIamPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Hl7V2StoreIamPolicies in the indexer for a given namespace.
func (s hl7V2StoreIamPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Hl7V2StoreIamPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Hl7V2StoreIamPolicy))
	})
	return ret, err
}

// Get retrieves the Hl7V2StoreIamPolicy from the indexer for a given namespace and name.
func (s hl7V2StoreIamPolicyNamespaceLister) Get(name string) (*v1alpha1.Hl7V2StoreIamPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("hl7v2storeiampolicy"), name)
	}
	return obj.(*v1alpha1.Hl7V2StoreIamPolicy), nil
}
