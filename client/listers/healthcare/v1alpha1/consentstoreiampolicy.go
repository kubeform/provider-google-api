/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/healthcare/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ConsentStoreIamPolicyLister helps list ConsentStoreIamPolicies.
// All objects returned here must be treated as read-only.
type ConsentStoreIamPolicyLister interface {
	// List lists all ConsentStoreIamPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ConsentStoreIamPolicy, err error)
	// ConsentStoreIamPolicies returns an object that can list and get ConsentStoreIamPolicies.
	ConsentStoreIamPolicies(namespace string) ConsentStoreIamPolicyNamespaceLister
	ConsentStoreIamPolicyListerExpansion
}

// consentStoreIamPolicyLister implements the ConsentStoreIamPolicyLister interface.
type consentStoreIamPolicyLister struct {
	indexer cache.Indexer
}

// NewConsentStoreIamPolicyLister returns a new ConsentStoreIamPolicyLister.
func NewConsentStoreIamPolicyLister(indexer cache.Indexer) ConsentStoreIamPolicyLister {
	return &consentStoreIamPolicyLister{indexer: indexer}
}

// List lists all ConsentStoreIamPolicies in the indexer.
func (s *consentStoreIamPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.ConsentStoreIamPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConsentStoreIamPolicy))
	})
	return ret, err
}

// ConsentStoreIamPolicies returns an object that can list and get ConsentStoreIamPolicies.
func (s *consentStoreIamPolicyLister) ConsentStoreIamPolicies(namespace string) ConsentStoreIamPolicyNamespaceLister {
	return consentStoreIamPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ConsentStoreIamPolicyNamespaceLister helps list and get ConsentStoreIamPolicies.
// All objects returned here must be treated as read-only.
type ConsentStoreIamPolicyNamespaceLister interface {
	// List lists all ConsentStoreIamPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ConsentStoreIamPolicy, err error)
	// Get retrieves the ConsentStoreIamPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ConsentStoreIamPolicy, error)
	ConsentStoreIamPolicyNamespaceListerExpansion
}

// consentStoreIamPolicyNamespaceLister implements the ConsentStoreIamPolicyNamespaceLister
// interface.
type consentStoreIamPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ConsentStoreIamPolicies in the indexer for a given namespace.
func (s consentStoreIamPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ConsentStoreIamPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConsentStoreIamPolicy))
	})
	return ret, err
}

// Get retrieves the ConsentStoreIamPolicy from the indexer for a given namespace and name.
func (s consentStoreIamPolicyNamespaceLister) Get(name string) (*v1alpha1.ConsentStoreIamPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("consentstoreiampolicy"), name)
	}
	return obj.(*v1alpha1.ConsentStoreIamPolicy), nil
}
