/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/healthcare/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DicomStoreIamPolicyLister helps list DicomStoreIamPolicies.
// All objects returned here must be treated as read-only.
type DicomStoreIamPolicyLister interface {
	// List lists all DicomStoreIamPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DicomStoreIamPolicy, err error)
	// DicomStoreIamPolicies returns an object that can list and get DicomStoreIamPolicies.
	DicomStoreIamPolicies(namespace string) DicomStoreIamPolicyNamespaceLister
	DicomStoreIamPolicyListerExpansion
}

// dicomStoreIamPolicyLister implements the DicomStoreIamPolicyLister interface.
type dicomStoreIamPolicyLister struct {
	indexer cache.Indexer
}

// NewDicomStoreIamPolicyLister returns a new DicomStoreIamPolicyLister.
func NewDicomStoreIamPolicyLister(indexer cache.Indexer) DicomStoreIamPolicyLister {
	return &dicomStoreIamPolicyLister{indexer: indexer}
}

// List lists all DicomStoreIamPolicies in the indexer.
func (s *dicomStoreIamPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.DicomStoreIamPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DicomStoreIamPolicy))
	})
	return ret, err
}

// DicomStoreIamPolicies returns an object that can list and get DicomStoreIamPolicies.
func (s *dicomStoreIamPolicyLister) DicomStoreIamPolicies(namespace string) DicomStoreIamPolicyNamespaceLister {
	return dicomStoreIamPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DicomStoreIamPolicyNamespaceLister helps list and get DicomStoreIamPolicies.
// All objects returned here must be treated as read-only.
type DicomStoreIamPolicyNamespaceLister interface {
	// List lists all DicomStoreIamPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DicomStoreIamPolicy, err error)
	// Get retrieves the DicomStoreIamPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DicomStoreIamPolicy, error)
	DicomStoreIamPolicyNamespaceListerExpansion
}

// dicomStoreIamPolicyNamespaceLister implements the DicomStoreIamPolicyNamespaceLister
// interface.
type dicomStoreIamPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DicomStoreIamPolicies in the indexer for a given namespace.
func (s dicomStoreIamPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DicomStoreIamPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DicomStoreIamPolicy))
	})
	return ret, err
}

// Get retrieves the DicomStoreIamPolicy from the indexer for a given namespace and name.
func (s dicomStoreIamPolicyNamespaceLister) Get(name string) (*v1alpha1.DicomStoreIamPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("dicomstoreiampolicy"), name)
	}
	return obj.(*v1alpha1.DicomStoreIamPolicy), nil
}
