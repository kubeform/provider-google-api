/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/healthcare/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DicomStoreIamMemberLister helps list DicomStoreIamMembers.
// All objects returned here must be treated as read-only.
type DicomStoreIamMemberLister interface {
	// List lists all DicomStoreIamMembers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DicomStoreIamMember, err error)
	// DicomStoreIamMembers returns an object that can list and get DicomStoreIamMembers.
	DicomStoreIamMembers(namespace string) DicomStoreIamMemberNamespaceLister
	DicomStoreIamMemberListerExpansion
}

// dicomStoreIamMemberLister implements the DicomStoreIamMemberLister interface.
type dicomStoreIamMemberLister struct {
	indexer cache.Indexer
}

// NewDicomStoreIamMemberLister returns a new DicomStoreIamMemberLister.
func NewDicomStoreIamMemberLister(indexer cache.Indexer) DicomStoreIamMemberLister {
	return &dicomStoreIamMemberLister{indexer: indexer}
}

// List lists all DicomStoreIamMembers in the indexer.
func (s *dicomStoreIamMemberLister) List(selector labels.Selector) (ret []*v1alpha1.DicomStoreIamMember, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DicomStoreIamMember))
	})
	return ret, err
}

// DicomStoreIamMembers returns an object that can list and get DicomStoreIamMembers.
func (s *dicomStoreIamMemberLister) DicomStoreIamMembers(namespace string) DicomStoreIamMemberNamespaceLister {
	return dicomStoreIamMemberNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DicomStoreIamMemberNamespaceLister helps list and get DicomStoreIamMembers.
// All objects returned here must be treated as read-only.
type DicomStoreIamMemberNamespaceLister interface {
	// List lists all DicomStoreIamMembers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DicomStoreIamMember, err error)
	// Get retrieves the DicomStoreIamMember from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DicomStoreIamMember, error)
	DicomStoreIamMemberNamespaceListerExpansion
}

// dicomStoreIamMemberNamespaceLister implements the DicomStoreIamMemberNamespaceLister
// interface.
type dicomStoreIamMemberNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DicomStoreIamMembers in the indexer for a given namespace.
func (s dicomStoreIamMemberNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DicomStoreIamMember, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DicomStoreIamMember))
	})
	return ret, err
}

// Get retrieves the DicomStoreIamMember from the indexer for a given namespace and name.
func (s dicomStoreIamMemberNamespaceLister) Get(name string) (*v1alpha1.DicomStoreIamMember, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("dicomstoreiammember"), name)
	}
	return obj.(*v1alpha1.DicomStoreIamMember), nil
}
