/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/healthcare/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ConsentStoreIamMemberLister helps list ConsentStoreIamMembers.
// All objects returned here must be treated as read-only.
type ConsentStoreIamMemberLister interface {
	// List lists all ConsentStoreIamMembers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ConsentStoreIamMember, err error)
	// ConsentStoreIamMembers returns an object that can list and get ConsentStoreIamMembers.
	ConsentStoreIamMembers(namespace string) ConsentStoreIamMemberNamespaceLister
	ConsentStoreIamMemberListerExpansion
}

// consentStoreIamMemberLister implements the ConsentStoreIamMemberLister interface.
type consentStoreIamMemberLister struct {
	indexer cache.Indexer
}

// NewConsentStoreIamMemberLister returns a new ConsentStoreIamMemberLister.
func NewConsentStoreIamMemberLister(indexer cache.Indexer) ConsentStoreIamMemberLister {
	return &consentStoreIamMemberLister{indexer: indexer}
}

// List lists all ConsentStoreIamMembers in the indexer.
func (s *consentStoreIamMemberLister) List(selector labels.Selector) (ret []*v1alpha1.ConsentStoreIamMember, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConsentStoreIamMember))
	})
	return ret, err
}

// ConsentStoreIamMembers returns an object that can list and get ConsentStoreIamMembers.
func (s *consentStoreIamMemberLister) ConsentStoreIamMembers(namespace string) ConsentStoreIamMemberNamespaceLister {
	return consentStoreIamMemberNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ConsentStoreIamMemberNamespaceLister helps list and get ConsentStoreIamMembers.
// All objects returned here must be treated as read-only.
type ConsentStoreIamMemberNamespaceLister interface {
	// List lists all ConsentStoreIamMembers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ConsentStoreIamMember, err error)
	// Get retrieves the ConsentStoreIamMember from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ConsentStoreIamMember, error)
	ConsentStoreIamMemberNamespaceListerExpansion
}

// consentStoreIamMemberNamespaceLister implements the ConsentStoreIamMemberNamespaceLister
// interface.
type consentStoreIamMemberNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ConsentStoreIamMembers in the indexer for a given namespace.
func (s consentStoreIamMemberNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ConsentStoreIamMember, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConsentStoreIamMember))
	})
	return ret, err
}

// Get retrieves the ConsentStoreIamMember from the indexer for a given namespace and name.
func (s consentStoreIamMemberNamespaceLister) Get(name string) (*v1alpha1.ConsentStoreIamMember, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("consentstoreiammember"), name)
	}
	return obj.(*v1alpha1.ConsentStoreIamMember), nil
}
