/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/healthcare/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FhirStoreIamBindingLister helps list FhirStoreIamBindings.
// All objects returned here must be treated as read-only.
type FhirStoreIamBindingLister interface {
	// List lists all FhirStoreIamBindings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FhirStoreIamBinding, err error)
	// FhirStoreIamBindings returns an object that can list and get FhirStoreIamBindings.
	FhirStoreIamBindings(namespace string) FhirStoreIamBindingNamespaceLister
	FhirStoreIamBindingListerExpansion
}

// fhirStoreIamBindingLister implements the FhirStoreIamBindingLister interface.
type fhirStoreIamBindingLister struct {
	indexer cache.Indexer
}

// NewFhirStoreIamBindingLister returns a new FhirStoreIamBindingLister.
func NewFhirStoreIamBindingLister(indexer cache.Indexer) FhirStoreIamBindingLister {
	return &fhirStoreIamBindingLister{indexer: indexer}
}

// List lists all FhirStoreIamBindings in the indexer.
func (s *fhirStoreIamBindingLister) List(selector labels.Selector) (ret []*v1alpha1.FhirStoreIamBinding, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FhirStoreIamBinding))
	})
	return ret, err
}

// FhirStoreIamBindings returns an object that can list and get FhirStoreIamBindings.
func (s *fhirStoreIamBindingLister) FhirStoreIamBindings(namespace string) FhirStoreIamBindingNamespaceLister {
	return fhirStoreIamBindingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FhirStoreIamBindingNamespaceLister helps list and get FhirStoreIamBindings.
// All objects returned here must be treated as read-only.
type FhirStoreIamBindingNamespaceLister interface {
	// List lists all FhirStoreIamBindings in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FhirStoreIamBinding, err error)
	// Get retrieves the FhirStoreIamBinding from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.FhirStoreIamBinding, error)
	FhirStoreIamBindingNamespaceListerExpansion
}

// fhirStoreIamBindingNamespaceLister implements the FhirStoreIamBindingNamespaceLister
// interface.
type fhirStoreIamBindingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FhirStoreIamBindings in the indexer for a given namespace.
func (s fhirStoreIamBindingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.FhirStoreIamBinding, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FhirStoreIamBinding))
	})
	return ret, err
}

// Get retrieves the FhirStoreIamBinding from the indexer for a given namespace and name.
func (s fhirStoreIamBindingNamespaceLister) Get(name string) (*v1alpha1.FhirStoreIamBinding, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("fhirstoreiambinding"), name)
	}
	return obj.(*v1alpha1.FhirStoreIamBinding), nil
}
