/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-google-api/apis/healthcare/v1alpha1"
)

// FhirStoreLister helps list FhirStores.
// All objects returned here must be treated as read-only.
type FhirStoreLister interface {
	// List lists all FhirStores in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FhirStore, err error)
	// FhirStores returns an object that can list and get FhirStores.
	FhirStores(namespace string) FhirStoreNamespaceLister
	FhirStoreListerExpansion
}

// fhirStoreLister implements the FhirStoreLister interface.
type fhirStoreLister struct {
	indexer cache.Indexer
}

// NewFhirStoreLister returns a new FhirStoreLister.
func NewFhirStoreLister(indexer cache.Indexer) FhirStoreLister {
	return &fhirStoreLister{indexer: indexer}
}

// List lists all FhirStores in the indexer.
func (s *fhirStoreLister) List(selector labels.Selector) (ret []*v1alpha1.FhirStore, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FhirStore))
	})
	return ret, err
}

// FhirStores returns an object that can list and get FhirStores.
func (s *fhirStoreLister) FhirStores(namespace string) FhirStoreNamespaceLister {
	return fhirStoreNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FhirStoreNamespaceLister helps list and get FhirStores.
// All objects returned here must be treated as read-only.
type FhirStoreNamespaceLister interface {
	// List lists all FhirStores in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FhirStore, err error)
	// Get retrieves the FhirStore from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.FhirStore, error)
	FhirStoreNamespaceListerExpansion
}

// fhirStoreNamespaceLister implements the FhirStoreNamespaceLister
// interface.
type fhirStoreNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FhirStores in the indexer for a given namespace.
func (s fhirStoreNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.FhirStore, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FhirStore))
	})
	return ret, err
}

// Get retrieves the FhirStore from the indexer for a given namespace and name.
func (s fhirStoreNamespaceLister) Get(name string) (*v1alpha1.FhirStore, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("fhirstore"), name)
	}
	return obj.(*v1alpha1.FhirStore), nil
}
