/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/essential/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ContactsContactLister helps list ContactsContacts.
// All objects returned here must be treated as read-only.
type ContactsContactLister interface {
	// List lists all ContactsContacts in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ContactsContact, err error)
	// ContactsContacts returns an object that can list and get ContactsContacts.
	ContactsContacts(namespace string) ContactsContactNamespaceLister
	ContactsContactListerExpansion
}

// contactsContactLister implements the ContactsContactLister interface.
type contactsContactLister struct {
	indexer cache.Indexer
}

// NewContactsContactLister returns a new ContactsContactLister.
func NewContactsContactLister(indexer cache.Indexer) ContactsContactLister {
	return &contactsContactLister{indexer: indexer}
}

// List lists all ContactsContacts in the indexer.
func (s *contactsContactLister) List(selector labels.Selector) (ret []*v1alpha1.ContactsContact, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ContactsContact))
	})
	return ret, err
}

// ContactsContacts returns an object that can list and get ContactsContacts.
func (s *contactsContactLister) ContactsContacts(namespace string) ContactsContactNamespaceLister {
	return contactsContactNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ContactsContactNamespaceLister helps list and get ContactsContacts.
// All objects returned here must be treated as read-only.
type ContactsContactNamespaceLister interface {
	// List lists all ContactsContacts in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ContactsContact, err error)
	// Get retrieves the ContactsContact from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ContactsContact, error)
	ContactsContactNamespaceListerExpansion
}

// contactsContactNamespaceLister implements the ContactsContactNamespaceLister
// interface.
type contactsContactNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ContactsContacts in the indexer for a given namespace.
func (s contactsContactNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ContactsContact, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ContactsContact))
	})
	return ret, err
}

// Get retrieves the ContactsContact from the indexer for a given namespace and name.
func (s contactsContactNamespaceLister) Get(name string) (*v1alpha1.ContactsContact, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("contactscontact"), name)
	}
	return obj.(*v1alpha1.ContactsContact), nil
}
