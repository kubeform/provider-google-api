/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-google-api/apis/game/v1alpha1"
)

// ServicesRealmLister helps list ServicesRealms.
// All objects returned here must be treated as read-only.
type ServicesRealmLister interface {
	// List lists all ServicesRealms in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServicesRealm, err error)
	// ServicesRealms returns an object that can list and get ServicesRealms.
	ServicesRealms(namespace string) ServicesRealmNamespaceLister
	ServicesRealmListerExpansion
}

// servicesRealmLister implements the ServicesRealmLister interface.
type servicesRealmLister struct {
	indexer cache.Indexer
}

// NewServicesRealmLister returns a new ServicesRealmLister.
func NewServicesRealmLister(indexer cache.Indexer) ServicesRealmLister {
	return &servicesRealmLister{indexer: indexer}
}

// List lists all ServicesRealms in the indexer.
func (s *servicesRealmLister) List(selector labels.Selector) (ret []*v1alpha1.ServicesRealm, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServicesRealm))
	})
	return ret, err
}

// ServicesRealms returns an object that can list and get ServicesRealms.
func (s *servicesRealmLister) ServicesRealms(namespace string) ServicesRealmNamespaceLister {
	return servicesRealmNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ServicesRealmNamespaceLister helps list and get ServicesRealms.
// All objects returned here must be treated as read-only.
type ServicesRealmNamespaceLister interface {
	// List lists all ServicesRealms in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServicesRealm, err error)
	// Get retrieves the ServicesRealm from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ServicesRealm, error)
	ServicesRealmNamespaceListerExpansion
}

// servicesRealmNamespaceLister implements the ServicesRealmNamespaceLister
// interface.
type servicesRealmNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ServicesRealms in the indexer for a given namespace.
func (s servicesRealmNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ServicesRealm, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServicesRealm))
	})
	return ret, err
}

// Get retrieves the ServicesRealm from the indexer for a given namespace and name.
func (s servicesRealmNamespaceLister) Get(name string) (*v1alpha1.ServicesRealm, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("servicesrealm"), name)
	}
	return obj.(*v1alpha1.ServicesRealm), nil
}
