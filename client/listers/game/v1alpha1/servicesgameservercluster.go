/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-google-api/apis/game/v1alpha1"
)

// ServicesGameServerClusterLister helps list ServicesGameServerClusters.
// All objects returned here must be treated as read-only.
type ServicesGameServerClusterLister interface {
	// List lists all ServicesGameServerClusters in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServicesGameServerCluster, err error)
	// ServicesGameServerClusters returns an object that can list and get ServicesGameServerClusters.
	ServicesGameServerClusters(namespace string) ServicesGameServerClusterNamespaceLister
	ServicesGameServerClusterListerExpansion
}

// servicesGameServerClusterLister implements the ServicesGameServerClusterLister interface.
type servicesGameServerClusterLister struct {
	indexer cache.Indexer
}

// NewServicesGameServerClusterLister returns a new ServicesGameServerClusterLister.
func NewServicesGameServerClusterLister(indexer cache.Indexer) ServicesGameServerClusterLister {
	return &servicesGameServerClusterLister{indexer: indexer}
}

// List lists all ServicesGameServerClusters in the indexer.
func (s *servicesGameServerClusterLister) List(selector labels.Selector) (ret []*v1alpha1.ServicesGameServerCluster, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServicesGameServerCluster))
	})
	return ret, err
}

// ServicesGameServerClusters returns an object that can list and get ServicesGameServerClusters.
func (s *servicesGameServerClusterLister) ServicesGameServerClusters(namespace string) ServicesGameServerClusterNamespaceLister {
	return servicesGameServerClusterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ServicesGameServerClusterNamespaceLister helps list and get ServicesGameServerClusters.
// All objects returned here must be treated as read-only.
type ServicesGameServerClusterNamespaceLister interface {
	// List lists all ServicesGameServerClusters in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServicesGameServerCluster, err error)
	// Get retrieves the ServicesGameServerCluster from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ServicesGameServerCluster, error)
	ServicesGameServerClusterNamespaceListerExpansion
}

// servicesGameServerClusterNamespaceLister implements the ServicesGameServerClusterNamespaceLister
// interface.
type servicesGameServerClusterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ServicesGameServerClusters in the indexer for a given namespace.
func (s servicesGameServerClusterNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ServicesGameServerCluster, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServicesGameServerCluster))
	})
	return ret, err
}

// Get retrieves the ServicesGameServerCluster from the indexer for a given namespace and name.
func (s servicesGameServerClusterNamespaceLister) Get(name string) (*v1alpha1.ServicesGameServerCluster, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("servicesgameservercluster"), name)
	}
	return obj.(*v1alpha1.ServicesGameServerCluster), nil
}
