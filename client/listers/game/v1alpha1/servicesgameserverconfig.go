/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-google-api/apis/game/v1alpha1"
)

// ServicesGameServerConfigLister helps list ServicesGameServerConfigs.
// All objects returned here must be treated as read-only.
type ServicesGameServerConfigLister interface {
	// List lists all ServicesGameServerConfigs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServicesGameServerConfig, err error)
	// ServicesGameServerConfigs returns an object that can list and get ServicesGameServerConfigs.
	ServicesGameServerConfigs(namespace string) ServicesGameServerConfigNamespaceLister
	ServicesGameServerConfigListerExpansion
}

// servicesGameServerConfigLister implements the ServicesGameServerConfigLister interface.
type servicesGameServerConfigLister struct {
	indexer cache.Indexer
}

// NewServicesGameServerConfigLister returns a new ServicesGameServerConfigLister.
func NewServicesGameServerConfigLister(indexer cache.Indexer) ServicesGameServerConfigLister {
	return &servicesGameServerConfigLister{indexer: indexer}
}

// List lists all ServicesGameServerConfigs in the indexer.
func (s *servicesGameServerConfigLister) List(selector labels.Selector) (ret []*v1alpha1.ServicesGameServerConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServicesGameServerConfig))
	})
	return ret, err
}

// ServicesGameServerConfigs returns an object that can list and get ServicesGameServerConfigs.
func (s *servicesGameServerConfigLister) ServicesGameServerConfigs(namespace string) ServicesGameServerConfigNamespaceLister {
	return servicesGameServerConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ServicesGameServerConfigNamespaceLister helps list and get ServicesGameServerConfigs.
// All objects returned here must be treated as read-only.
type ServicesGameServerConfigNamespaceLister interface {
	// List lists all ServicesGameServerConfigs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServicesGameServerConfig, err error)
	// Get retrieves the ServicesGameServerConfig from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ServicesGameServerConfig, error)
	ServicesGameServerConfigNamespaceListerExpansion
}

// servicesGameServerConfigNamespaceLister implements the ServicesGameServerConfigNamespaceLister
// interface.
type servicesGameServerConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ServicesGameServerConfigs in the indexer for a given namespace.
func (s servicesGameServerConfigNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ServicesGameServerConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServicesGameServerConfig))
	})
	return ret, err
}

// Get retrieves the ServicesGameServerConfig from the indexer for a given namespace and name.
func (s servicesGameServerConfigNamespaceLister) Get(name string) (*v1alpha1.ServicesGameServerConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("servicesgameserverconfig"), name)
	}
	return obj.(*v1alpha1.ServicesGameServerConfig), nil
}
