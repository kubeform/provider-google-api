/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/ml/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EngineModelLister helps list EngineModels.
// All objects returned here must be treated as read-only.
type EngineModelLister interface {
	// List lists all EngineModels in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EngineModel, err error)
	// EngineModels returns an object that can list and get EngineModels.
	EngineModels(namespace string) EngineModelNamespaceLister
	EngineModelListerExpansion
}

// engineModelLister implements the EngineModelLister interface.
type engineModelLister struct {
	indexer cache.Indexer
}

// NewEngineModelLister returns a new EngineModelLister.
func NewEngineModelLister(indexer cache.Indexer) EngineModelLister {
	return &engineModelLister{indexer: indexer}
}

// List lists all EngineModels in the indexer.
func (s *engineModelLister) List(selector labels.Selector) (ret []*v1alpha1.EngineModel, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EngineModel))
	})
	return ret, err
}

// EngineModels returns an object that can list and get EngineModels.
func (s *engineModelLister) EngineModels(namespace string) EngineModelNamespaceLister {
	return engineModelNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EngineModelNamespaceLister helps list and get EngineModels.
// All objects returned here must be treated as read-only.
type EngineModelNamespaceLister interface {
	// List lists all EngineModels in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EngineModel, err error)
	// Get retrieves the EngineModel from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.EngineModel, error)
	EngineModelNamespaceListerExpansion
}

// engineModelNamespaceLister implements the EngineModelNamespaceLister
// interface.
type engineModelNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EngineModels in the indexer for a given namespace.
func (s engineModelNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.EngineModel, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EngineModel))
	})
	return ret, err
}

// Get retrieves the EngineModel from the indexer for a given namespace and name.
func (s engineModelNamespaceLister) Get(name string) (*v1alpha1.EngineModel, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("enginemodel"), name)
	}
	return obj.(*v1alpha1.EngineModel), nil
}
