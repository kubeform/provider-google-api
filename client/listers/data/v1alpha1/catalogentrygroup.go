/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/data/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CatalogEntryGroupLister helps list CatalogEntryGroups.
// All objects returned here must be treated as read-only.
type CatalogEntryGroupLister interface {
	// List lists all CatalogEntryGroups in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CatalogEntryGroup, err error)
	// CatalogEntryGroups returns an object that can list and get CatalogEntryGroups.
	CatalogEntryGroups(namespace string) CatalogEntryGroupNamespaceLister
	CatalogEntryGroupListerExpansion
}

// catalogEntryGroupLister implements the CatalogEntryGroupLister interface.
type catalogEntryGroupLister struct {
	indexer cache.Indexer
}

// NewCatalogEntryGroupLister returns a new CatalogEntryGroupLister.
func NewCatalogEntryGroupLister(indexer cache.Indexer) CatalogEntryGroupLister {
	return &catalogEntryGroupLister{indexer: indexer}
}

// List lists all CatalogEntryGroups in the indexer.
func (s *catalogEntryGroupLister) List(selector labels.Selector) (ret []*v1alpha1.CatalogEntryGroup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CatalogEntryGroup))
	})
	return ret, err
}

// CatalogEntryGroups returns an object that can list and get CatalogEntryGroups.
func (s *catalogEntryGroupLister) CatalogEntryGroups(namespace string) CatalogEntryGroupNamespaceLister {
	return catalogEntryGroupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CatalogEntryGroupNamespaceLister helps list and get CatalogEntryGroups.
// All objects returned here must be treated as read-only.
type CatalogEntryGroupNamespaceLister interface {
	// List lists all CatalogEntryGroups in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CatalogEntryGroup, err error)
	// Get retrieves the CatalogEntryGroup from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.CatalogEntryGroup, error)
	CatalogEntryGroupNamespaceListerExpansion
}

// catalogEntryGroupNamespaceLister implements the CatalogEntryGroupNamespaceLister
// interface.
type catalogEntryGroupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CatalogEntryGroups in the indexer for a given namespace.
func (s catalogEntryGroupNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CatalogEntryGroup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CatalogEntryGroup))
	})
	return ret, err
}

// Get retrieves the CatalogEntryGroup from the indexer for a given namespace and name.
func (s catalogEntryGroupNamespaceLister) Get(name string) (*v1alpha1.CatalogEntryGroup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("catalogentrygroup"), name)
	}
	return obj.(*v1alpha1.CatalogEntryGroup), nil
}
