/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/data/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CatalogTagLister helps list CatalogTags.
// All objects returned here must be treated as read-only.
type CatalogTagLister interface {
	// List lists all CatalogTags in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CatalogTag, err error)
	// CatalogTags returns an object that can list and get CatalogTags.
	CatalogTags(namespace string) CatalogTagNamespaceLister
	CatalogTagListerExpansion
}

// catalogTagLister implements the CatalogTagLister interface.
type catalogTagLister struct {
	indexer cache.Indexer
}

// NewCatalogTagLister returns a new CatalogTagLister.
func NewCatalogTagLister(indexer cache.Indexer) CatalogTagLister {
	return &catalogTagLister{indexer: indexer}
}

// List lists all CatalogTags in the indexer.
func (s *catalogTagLister) List(selector labels.Selector) (ret []*v1alpha1.CatalogTag, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CatalogTag))
	})
	return ret, err
}

// CatalogTags returns an object that can list and get CatalogTags.
func (s *catalogTagLister) CatalogTags(namespace string) CatalogTagNamespaceLister {
	return catalogTagNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CatalogTagNamespaceLister helps list and get CatalogTags.
// All objects returned here must be treated as read-only.
type CatalogTagNamespaceLister interface {
	// List lists all CatalogTags in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CatalogTag, err error)
	// Get retrieves the CatalogTag from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.CatalogTag, error)
	CatalogTagNamespaceListerExpansion
}

// catalogTagNamespaceLister implements the CatalogTagNamespaceLister
// interface.
type catalogTagNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CatalogTags in the indexer for a given namespace.
func (s catalogTagNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CatalogTag, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CatalogTag))
	})
	return ret, err
}

// Get retrieves the CatalogTag from the indexer for a given namespace and name.
func (s catalogTagNamespaceLister) Get(name string) (*v1alpha1.CatalogTag, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("catalogtag"), name)
	}
	return obj.(*v1alpha1.CatalogTag), nil
}
