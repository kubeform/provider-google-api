/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/data/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CatalogEntryGroupIamMemberLister helps list CatalogEntryGroupIamMembers.
// All objects returned here must be treated as read-only.
type CatalogEntryGroupIamMemberLister interface {
	// List lists all CatalogEntryGroupIamMembers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CatalogEntryGroupIamMember, err error)
	// CatalogEntryGroupIamMembers returns an object that can list and get CatalogEntryGroupIamMembers.
	CatalogEntryGroupIamMembers(namespace string) CatalogEntryGroupIamMemberNamespaceLister
	CatalogEntryGroupIamMemberListerExpansion
}

// catalogEntryGroupIamMemberLister implements the CatalogEntryGroupIamMemberLister interface.
type catalogEntryGroupIamMemberLister struct {
	indexer cache.Indexer
}

// NewCatalogEntryGroupIamMemberLister returns a new CatalogEntryGroupIamMemberLister.
func NewCatalogEntryGroupIamMemberLister(indexer cache.Indexer) CatalogEntryGroupIamMemberLister {
	return &catalogEntryGroupIamMemberLister{indexer: indexer}
}

// List lists all CatalogEntryGroupIamMembers in the indexer.
func (s *catalogEntryGroupIamMemberLister) List(selector labels.Selector) (ret []*v1alpha1.CatalogEntryGroupIamMember, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CatalogEntryGroupIamMember))
	})
	return ret, err
}

// CatalogEntryGroupIamMembers returns an object that can list and get CatalogEntryGroupIamMembers.
func (s *catalogEntryGroupIamMemberLister) CatalogEntryGroupIamMembers(namespace string) CatalogEntryGroupIamMemberNamespaceLister {
	return catalogEntryGroupIamMemberNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CatalogEntryGroupIamMemberNamespaceLister helps list and get CatalogEntryGroupIamMembers.
// All objects returned here must be treated as read-only.
type CatalogEntryGroupIamMemberNamespaceLister interface {
	// List lists all CatalogEntryGroupIamMembers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CatalogEntryGroupIamMember, err error)
	// Get retrieves the CatalogEntryGroupIamMember from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.CatalogEntryGroupIamMember, error)
	CatalogEntryGroupIamMemberNamespaceListerExpansion
}

// catalogEntryGroupIamMemberNamespaceLister implements the CatalogEntryGroupIamMemberNamespaceLister
// interface.
type catalogEntryGroupIamMemberNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CatalogEntryGroupIamMembers in the indexer for a given namespace.
func (s catalogEntryGroupIamMemberNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CatalogEntryGroupIamMember, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CatalogEntryGroupIamMember))
	})
	return ret, err
}

// Get retrieves the CatalogEntryGroupIamMember from the indexer for a given namespace and name.
func (s catalogEntryGroupIamMemberNamespaceLister) Get(name string) (*v1alpha1.CatalogEntryGroupIamMember, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("catalogentrygroupiammember"), name)
	}
	return obj.(*v1alpha1.CatalogEntryGroupIamMember), nil
}
