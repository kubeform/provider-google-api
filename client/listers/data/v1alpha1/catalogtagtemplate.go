/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/data/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CatalogTagTemplateLister helps list CatalogTagTemplates.
// All objects returned here must be treated as read-only.
type CatalogTagTemplateLister interface {
	// List lists all CatalogTagTemplates in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CatalogTagTemplate, err error)
	// CatalogTagTemplates returns an object that can list and get CatalogTagTemplates.
	CatalogTagTemplates(namespace string) CatalogTagTemplateNamespaceLister
	CatalogTagTemplateListerExpansion
}

// catalogTagTemplateLister implements the CatalogTagTemplateLister interface.
type catalogTagTemplateLister struct {
	indexer cache.Indexer
}

// NewCatalogTagTemplateLister returns a new CatalogTagTemplateLister.
func NewCatalogTagTemplateLister(indexer cache.Indexer) CatalogTagTemplateLister {
	return &catalogTagTemplateLister{indexer: indexer}
}

// List lists all CatalogTagTemplates in the indexer.
func (s *catalogTagTemplateLister) List(selector labels.Selector) (ret []*v1alpha1.CatalogTagTemplate, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CatalogTagTemplate))
	})
	return ret, err
}

// CatalogTagTemplates returns an object that can list and get CatalogTagTemplates.
func (s *catalogTagTemplateLister) CatalogTagTemplates(namespace string) CatalogTagTemplateNamespaceLister {
	return catalogTagTemplateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CatalogTagTemplateNamespaceLister helps list and get CatalogTagTemplates.
// All objects returned here must be treated as read-only.
type CatalogTagTemplateNamespaceLister interface {
	// List lists all CatalogTagTemplates in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CatalogTagTemplate, err error)
	// Get retrieves the CatalogTagTemplate from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.CatalogTagTemplate, error)
	CatalogTagTemplateNamespaceListerExpansion
}

// catalogTagTemplateNamespaceLister implements the CatalogTagTemplateNamespaceLister
// interface.
type catalogTagTemplateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CatalogTagTemplates in the indexer for a given namespace.
func (s catalogTagTemplateNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CatalogTagTemplate, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CatalogTagTemplate))
	})
	return ret, err
}

// Get retrieves the CatalogTagTemplate from the indexer for a given namespace and name.
func (s catalogTagTemplateNamespaceLister) Get(name string) (*v1alpha1.CatalogTagTemplate, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("catalogtagtemplate"), name)
	}
	return obj.(*v1alpha1.CatalogTagTemplate), nil
}
