/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-google-api/apis/data/v1alpha1"
)

// CatalogTagTemplateIamMemberLister helps list CatalogTagTemplateIamMembers.
// All objects returned here must be treated as read-only.
type CatalogTagTemplateIamMemberLister interface {
	// List lists all CatalogTagTemplateIamMembers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CatalogTagTemplateIamMember, err error)
	// CatalogTagTemplateIamMembers returns an object that can list and get CatalogTagTemplateIamMembers.
	CatalogTagTemplateIamMembers(namespace string) CatalogTagTemplateIamMemberNamespaceLister
	CatalogTagTemplateIamMemberListerExpansion
}

// catalogTagTemplateIamMemberLister implements the CatalogTagTemplateIamMemberLister interface.
type catalogTagTemplateIamMemberLister struct {
	indexer cache.Indexer
}

// NewCatalogTagTemplateIamMemberLister returns a new CatalogTagTemplateIamMemberLister.
func NewCatalogTagTemplateIamMemberLister(indexer cache.Indexer) CatalogTagTemplateIamMemberLister {
	return &catalogTagTemplateIamMemberLister{indexer: indexer}
}

// List lists all CatalogTagTemplateIamMembers in the indexer.
func (s *catalogTagTemplateIamMemberLister) List(selector labels.Selector) (ret []*v1alpha1.CatalogTagTemplateIamMember, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CatalogTagTemplateIamMember))
	})
	return ret, err
}

// CatalogTagTemplateIamMembers returns an object that can list and get CatalogTagTemplateIamMembers.
func (s *catalogTagTemplateIamMemberLister) CatalogTagTemplateIamMembers(namespace string) CatalogTagTemplateIamMemberNamespaceLister {
	return catalogTagTemplateIamMemberNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CatalogTagTemplateIamMemberNamespaceLister helps list and get CatalogTagTemplateIamMembers.
// All objects returned here must be treated as read-only.
type CatalogTagTemplateIamMemberNamespaceLister interface {
	// List lists all CatalogTagTemplateIamMembers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CatalogTagTemplateIamMember, err error)
	// Get retrieves the CatalogTagTemplateIamMember from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.CatalogTagTemplateIamMember, error)
	CatalogTagTemplateIamMemberNamespaceListerExpansion
}

// catalogTagTemplateIamMemberNamespaceLister implements the CatalogTagTemplateIamMemberNamespaceLister
// interface.
type catalogTagTemplateIamMemberNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CatalogTagTemplateIamMembers in the indexer for a given namespace.
func (s catalogTagTemplateIamMemberNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CatalogTagTemplateIamMember, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CatalogTagTemplateIamMember))
	})
	return ret, err
}

// Get retrieves the CatalogTagTemplateIamMember from the indexer for a given namespace and name.
func (s catalogTagTemplateIamMemberNamespaceLister) Get(name string) (*v1alpha1.CatalogTagTemplateIamMember, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("catalogtagtemplateiammember"), name)
	}
	return obj.(*v1alpha1.CatalogTagTemplateIamMember), nil
}
