/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/data/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CatalogEntryLister helps list CatalogEntries.
// All objects returned here must be treated as read-only.
type CatalogEntryLister interface {
	// List lists all CatalogEntries in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CatalogEntry, err error)
	// CatalogEntries returns an object that can list and get CatalogEntries.
	CatalogEntries(namespace string) CatalogEntryNamespaceLister
	CatalogEntryListerExpansion
}

// catalogEntryLister implements the CatalogEntryLister interface.
type catalogEntryLister struct {
	indexer cache.Indexer
}

// NewCatalogEntryLister returns a new CatalogEntryLister.
func NewCatalogEntryLister(indexer cache.Indexer) CatalogEntryLister {
	return &catalogEntryLister{indexer: indexer}
}

// List lists all CatalogEntries in the indexer.
func (s *catalogEntryLister) List(selector labels.Selector) (ret []*v1alpha1.CatalogEntry, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CatalogEntry))
	})
	return ret, err
}

// CatalogEntries returns an object that can list and get CatalogEntries.
func (s *catalogEntryLister) CatalogEntries(namespace string) CatalogEntryNamespaceLister {
	return catalogEntryNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CatalogEntryNamespaceLister helps list and get CatalogEntries.
// All objects returned here must be treated as read-only.
type CatalogEntryNamespaceLister interface {
	// List lists all CatalogEntries in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CatalogEntry, err error)
	// Get retrieves the CatalogEntry from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.CatalogEntry, error)
	CatalogEntryNamespaceListerExpansion
}

// catalogEntryNamespaceLister implements the CatalogEntryNamespaceLister
// interface.
type catalogEntryNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CatalogEntries in the indexer for a given namespace.
func (s catalogEntryNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CatalogEntry, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CatalogEntry))
	})
	return ret, err
}

// Get retrieves the CatalogEntry from the indexer for a given namespace and name.
func (s catalogEntryNamespaceLister) Get(name string) (*v1alpha1.CatalogEntry, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("catalogentry"), name)
	}
	return obj.(*v1alpha1.CatalogEntry), nil
}
