/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/assured/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// WorkloadsWorkloadLister helps list WorkloadsWorkloads.
// All objects returned here must be treated as read-only.
type WorkloadsWorkloadLister interface {
	// List lists all WorkloadsWorkloads in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.WorkloadsWorkload, err error)
	// WorkloadsWorkloads returns an object that can list and get WorkloadsWorkloads.
	WorkloadsWorkloads(namespace string) WorkloadsWorkloadNamespaceLister
	WorkloadsWorkloadListerExpansion
}

// workloadsWorkloadLister implements the WorkloadsWorkloadLister interface.
type workloadsWorkloadLister struct {
	indexer cache.Indexer
}

// NewWorkloadsWorkloadLister returns a new WorkloadsWorkloadLister.
func NewWorkloadsWorkloadLister(indexer cache.Indexer) WorkloadsWorkloadLister {
	return &workloadsWorkloadLister{indexer: indexer}
}

// List lists all WorkloadsWorkloads in the indexer.
func (s *workloadsWorkloadLister) List(selector labels.Selector) (ret []*v1alpha1.WorkloadsWorkload, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.WorkloadsWorkload))
	})
	return ret, err
}

// WorkloadsWorkloads returns an object that can list and get WorkloadsWorkloads.
func (s *workloadsWorkloadLister) WorkloadsWorkloads(namespace string) WorkloadsWorkloadNamespaceLister {
	return workloadsWorkloadNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// WorkloadsWorkloadNamespaceLister helps list and get WorkloadsWorkloads.
// All objects returned here must be treated as read-only.
type WorkloadsWorkloadNamespaceLister interface {
	// List lists all WorkloadsWorkloads in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.WorkloadsWorkload, err error)
	// Get retrieves the WorkloadsWorkload from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.WorkloadsWorkload, error)
	WorkloadsWorkloadNamespaceListerExpansion
}

// workloadsWorkloadNamespaceLister implements the WorkloadsWorkloadNamespaceLister
// interface.
type workloadsWorkloadNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all WorkloadsWorkloads in the indexer for a given namespace.
func (s workloadsWorkloadNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.WorkloadsWorkload, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.WorkloadsWorkload))
	})
	return ret, err
}

// Get retrieves the WorkloadsWorkload from the indexer for a given namespace and name.
func (s workloadsWorkloadNamespaceLister) Get(name string) (*v1alpha1.WorkloadsWorkload, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("workloadsworkload"), name)
	}
	return obj.(*v1alpha1.WorkloadsWorkload), nil
}
