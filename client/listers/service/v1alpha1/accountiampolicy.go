/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-google-api/apis/service/v1alpha1"
)

// AccountIamPolicyLister helps list AccountIamPolicies.
// All objects returned here must be treated as read-only.
type AccountIamPolicyLister interface {
	// List lists all AccountIamPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AccountIamPolicy, err error)
	// AccountIamPolicies returns an object that can list and get AccountIamPolicies.
	AccountIamPolicies(namespace string) AccountIamPolicyNamespaceLister
	AccountIamPolicyListerExpansion
}

// accountIamPolicyLister implements the AccountIamPolicyLister interface.
type accountIamPolicyLister struct {
	indexer cache.Indexer
}

// NewAccountIamPolicyLister returns a new AccountIamPolicyLister.
func NewAccountIamPolicyLister(indexer cache.Indexer) AccountIamPolicyLister {
	return &accountIamPolicyLister{indexer: indexer}
}

// List lists all AccountIamPolicies in the indexer.
func (s *accountIamPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.AccountIamPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AccountIamPolicy))
	})
	return ret, err
}

// AccountIamPolicies returns an object that can list and get AccountIamPolicies.
func (s *accountIamPolicyLister) AccountIamPolicies(namespace string) AccountIamPolicyNamespaceLister {
	return accountIamPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AccountIamPolicyNamespaceLister helps list and get AccountIamPolicies.
// All objects returned here must be treated as read-only.
type AccountIamPolicyNamespaceLister interface {
	// List lists all AccountIamPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AccountIamPolicy, err error)
	// Get retrieves the AccountIamPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AccountIamPolicy, error)
	AccountIamPolicyNamespaceListerExpansion
}

// accountIamPolicyNamespaceLister implements the AccountIamPolicyNamespaceLister
// interface.
type accountIamPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AccountIamPolicies in the indexer for a given namespace.
func (s accountIamPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AccountIamPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AccountIamPolicy))
	})
	return ret, err
}

// Get retrieves the AccountIamPolicy from the indexer for a given namespace and name.
func (s accountIamPolicyNamespaceLister) Get(name string) (*v1alpha1.AccountIamPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("accountiampolicy"), name)
	}
	return obj.(*v1alpha1.AccountIamPolicy), nil
}
