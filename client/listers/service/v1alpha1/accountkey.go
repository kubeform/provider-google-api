/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-google-api/apis/service/v1alpha1"
)

// AccountKeyLister helps list AccountKeys.
// All objects returned here must be treated as read-only.
type AccountKeyLister interface {
	// List lists all AccountKeys in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AccountKey, err error)
	// AccountKeys returns an object that can list and get AccountKeys.
	AccountKeys(namespace string) AccountKeyNamespaceLister
	AccountKeyListerExpansion
}

// accountKeyLister implements the AccountKeyLister interface.
type accountKeyLister struct {
	indexer cache.Indexer
}

// NewAccountKeyLister returns a new AccountKeyLister.
func NewAccountKeyLister(indexer cache.Indexer) AccountKeyLister {
	return &accountKeyLister{indexer: indexer}
}

// List lists all AccountKeys in the indexer.
func (s *accountKeyLister) List(selector labels.Selector) (ret []*v1alpha1.AccountKey, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AccountKey))
	})
	return ret, err
}

// AccountKeys returns an object that can list and get AccountKeys.
func (s *accountKeyLister) AccountKeys(namespace string) AccountKeyNamespaceLister {
	return accountKeyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AccountKeyNamespaceLister helps list and get AccountKeys.
// All objects returned here must be treated as read-only.
type AccountKeyNamespaceLister interface {
	// List lists all AccountKeys in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AccountKey, err error)
	// Get retrieves the AccountKey from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AccountKey, error)
	AccountKeyNamespaceListerExpansion
}

// accountKeyNamespaceLister implements the AccountKeyNamespaceLister
// interface.
type accountKeyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AccountKeys in the indexer for a given namespace.
func (s accountKeyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AccountKey, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AccountKey))
	})
	return ret, err
}

// Get retrieves the AccountKey from the indexer for a given namespace and name.
func (s accountKeyNamespaceLister) Get(name string) (*v1alpha1.AccountKey, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("accountkey"), name)
	}
	return obj.(*v1alpha1.AccountKey), nil
}
