/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/service/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NetworkingConnectionLister helps list NetworkingConnections.
// All objects returned here must be treated as read-only.
type NetworkingConnectionLister interface {
	// List lists all NetworkingConnections in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NetworkingConnection, err error)
	// NetworkingConnections returns an object that can list and get NetworkingConnections.
	NetworkingConnections(namespace string) NetworkingConnectionNamespaceLister
	NetworkingConnectionListerExpansion
}

// networkingConnectionLister implements the NetworkingConnectionLister interface.
type networkingConnectionLister struct {
	indexer cache.Indexer
}

// NewNetworkingConnectionLister returns a new NetworkingConnectionLister.
func NewNetworkingConnectionLister(indexer cache.Indexer) NetworkingConnectionLister {
	return &networkingConnectionLister{indexer: indexer}
}

// List lists all NetworkingConnections in the indexer.
func (s *networkingConnectionLister) List(selector labels.Selector) (ret []*v1alpha1.NetworkingConnection, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NetworkingConnection))
	})
	return ret, err
}

// NetworkingConnections returns an object that can list and get NetworkingConnections.
func (s *networkingConnectionLister) NetworkingConnections(namespace string) NetworkingConnectionNamespaceLister {
	return networkingConnectionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NetworkingConnectionNamespaceLister helps list and get NetworkingConnections.
// All objects returned here must be treated as read-only.
type NetworkingConnectionNamespaceLister interface {
	// List lists all NetworkingConnections in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NetworkingConnection, err error)
	// Get retrieves the NetworkingConnection from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.NetworkingConnection, error)
	NetworkingConnectionNamespaceListerExpansion
}

// networkingConnectionNamespaceLister implements the NetworkingConnectionNamespaceLister
// interface.
type networkingConnectionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NetworkingConnections in the indexer for a given namespace.
func (s networkingConnectionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.NetworkingConnection, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NetworkingConnection))
	})
	return ret, err
}

// Get retrieves the NetworkingConnection from the indexer for a given namespace and name.
func (s networkingConnectionNamespaceLister) Get(name string) (*v1alpha1.NetworkingConnection, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("networkingconnection"), name)
	}
	return obj.(*v1alpha1.NetworkingConnection), nil
}
