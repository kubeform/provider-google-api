/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/service/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NetworkingPeeredDNSDomainLister helps list NetworkingPeeredDNSDomains.
// All objects returned here must be treated as read-only.
type NetworkingPeeredDNSDomainLister interface {
	// List lists all NetworkingPeeredDNSDomains in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NetworkingPeeredDNSDomain, err error)
	// NetworkingPeeredDNSDomains returns an object that can list and get NetworkingPeeredDNSDomains.
	NetworkingPeeredDNSDomains(namespace string) NetworkingPeeredDNSDomainNamespaceLister
	NetworkingPeeredDNSDomainListerExpansion
}

// networkingPeeredDNSDomainLister implements the NetworkingPeeredDNSDomainLister interface.
type networkingPeeredDNSDomainLister struct {
	indexer cache.Indexer
}

// NewNetworkingPeeredDNSDomainLister returns a new NetworkingPeeredDNSDomainLister.
func NewNetworkingPeeredDNSDomainLister(indexer cache.Indexer) NetworkingPeeredDNSDomainLister {
	return &networkingPeeredDNSDomainLister{indexer: indexer}
}

// List lists all NetworkingPeeredDNSDomains in the indexer.
func (s *networkingPeeredDNSDomainLister) List(selector labels.Selector) (ret []*v1alpha1.NetworkingPeeredDNSDomain, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NetworkingPeeredDNSDomain))
	})
	return ret, err
}

// NetworkingPeeredDNSDomains returns an object that can list and get NetworkingPeeredDNSDomains.
func (s *networkingPeeredDNSDomainLister) NetworkingPeeredDNSDomains(namespace string) NetworkingPeeredDNSDomainNamespaceLister {
	return networkingPeeredDNSDomainNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NetworkingPeeredDNSDomainNamespaceLister helps list and get NetworkingPeeredDNSDomains.
// All objects returned here must be treated as read-only.
type NetworkingPeeredDNSDomainNamespaceLister interface {
	// List lists all NetworkingPeeredDNSDomains in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NetworkingPeeredDNSDomain, err error)
	// Get retrieves the NetworkingPeeredDNSDomain from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.NetworkingPeeredDNSDomain, error)
	NetworkingPeeredDNSDomainNamespaceListerExpansion
}

// networkingPeeredDNSDomainNamespaceLister implements the NetworkingPeeredDNSDomainNamespaceLister
// interface.
type networkingPeeredDNSDomainNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NetworkingPeeredDNSDomains in the indexer for a given namespace.
func (s networkingPeeredDNSDomainNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.NetworkingPeeredDNSDomain, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NetworkingPeeredDNSDomain))
	})
	return ret, err
}

// Get retrieves the NetworkingPeeredDNSDomain from the indexer for a given namespace and name.
func (s networkingPeeredDNSDomainNamespaceLister) Get(name string) (*v1alpha1.NetworkingPeeredDNSDomain, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("networkingpeereddnsdomain"), name)
	}
	return obj.(*v1alpha1.NetworkingPeeredDNSDomain), nil
}
