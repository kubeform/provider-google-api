/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/compute/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// InterconnectAttachmentLister helps list InterconnectAttachments.
// All objects returned here must be treated as read-only.
type InterconnectAttachmentLister interface {
	// List lists all InterconnectAttachments in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.InterconnectAttachment, err error)
	// InterconnectAttachments returns an object that can list and get InterconnectAttachments.
	InterconnectAttachments(namespace string) InterconnectAttachmentNamespaceLister
	InterconnectAttachmentListerExpansion
}

// interconnectAttachmentLister implements the InterconnectAttachmentLister interface.
type interconnectAttachmentLister struct {
	indexer cache.Indexer
}

// NewInterconnectAttachmentLister returns a new InterconnectAttachmentLister.
func NewInterconnectAttachmentLister(indexer cache.Indexer) InterconnectAttachmentLister {
	return &interconnectAttachmentLister{indexer: indexer}
}

// List lists all InterconnectAttachments in the indexer.
func (s *interconnectAttachmentLister) List(selector labels.Selector) (ret []*v1alpha1.InterconnectAttachment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.InterconnectAttachment))
	})
	return ret, err
}

// InterconnectAttachments returns an object that can list and get InterconnectAttachments.
func (s *interconnectAttachmentLister) InterconnectAttachments(namespace string) InterconnectAttachmentNamespaceLister {
	return interconnectAttachmentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// InterconnectAttachmentNamespaceLister helps list and get InterconnectAttachments.
// All objects returned here must be treated as read-only.
type InterconnectAttachmentNamespaceLister interface {
	// List lists all InterconnectAttachments in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.InterconnectAttachment, err error)
	// Get retrieves the InterconnectAttachment from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.InterconnectAttachment, error)
	InterconnectAttachmentNamespaceListerExpansion
}

// interconnectAttachmentNamespaceLister implements the InterconnectAttachmentNamespaceLister
// interface.
type interconnectAttachmentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all InterconnectAttachments in the indexer for a given namespace.
func (s interconnectAttachmentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.InterconnectAttachment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.InterconnectAttachment))
	})
	return ret, err
}

// Get retrieves the InterconnectAttachment from the indexer for a given namespace and name.
func (s interconnectAttachmentNamespaceLister) Get(name string) (*v1alpha1.InterconnectAttachment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("interconnectattachment"), name)
	}
	return obj.(*v1alpha1.InterconnectAttachment), nil
}
