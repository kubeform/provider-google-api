/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-google-api/apis/compute/v1alpha1"
)

// TargetGrpcProxyLister helps list TargetGrpcProxies.
// All objects returned here must be treated as read-only.
type TargetGrpcProxyLister interface {
	// List lists all TargetGrpcProxies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TargetGrpcProxy, err error)
	// TargetGrpcProxies returns an object that can list and get TargetGrpcProxies.
	TargetGrpcProxies(namespace string) TargetGrpcProxyNamespaceLister
	TargetGrpcProxyListerExpansion
}

// targetGrpcProxyLister implements the TargetGrpcProxyLister interface.
type targetGrpcProxyLister struct {
	indexer cache.Indexer
}

// NewTargetGrpcProxyLister returns a new TargetGrpcProxyLister.
func NewTargetGrpcProxyLister(indexer cache.Indexer) TargetGrpcProxyLister {
	return &targetGrpcProxyLister{indexer: indexer}
}

// List lists all TargetGrpcProxies in the indexer.
func (s *targetGrpcProxyLister) List(selector labels.Selector) (ret []*v1alpha1.TargetGrpcProxy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TargetGrpcProxy))
	})
	return ret, err
}

// TargetGrpcProxies returns an object that can list and get TargetGrpcProxies.
func (s *targetGrpcProxyLister) TargetGrpcProxies(namespace string) TargetGrpcProxyNamespaceLister {
	return targetGrpcProxyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TargetGrpcProxyNamespaceLister helps list and get TargetGrpcProxies.
// All objects returned here must be treated as read-only.
type TargetGrpcProxyNamespaceLister interface {
	// List lists all TargetGrpcProxies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TargetGrpcProxy, err error)
	// Get retrieves the TargetGrpcProxy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.TargetGrpcProxy, error)
	TargetGrpcProxyNamespaceListerExpansion
}

// targetGrpcProxyNamespaceLister implements the TargetGrpcProxyNamespaceLister
// interface.
type targetGrpcProxyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TargetGrpcProxies in the indexer for a given namespace.
func (s targetGrpcProxyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TargetGrpcProxy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TargetGrpcProxy))
	})
	return ret, err
}

// Get retrieves the TargetGrpcProxy from the indexer for a given namespace and name.
func (s targetGrpcProxyNamespaceLister) Get(name string) (*v1alpha1.TargetGrpcProxy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("targetgrpcproxy"), name)
	}
	return obj.(*v1alpha1.TargetGrpcProxy), nil
}
