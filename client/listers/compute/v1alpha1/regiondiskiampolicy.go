/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/compute/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RegionDiskIamPolicyLister helps list RegionDiskIamPolicies.
// All objects returned here must be treated as read-only.
type RegionDiskIamPolicyLister interface {
	// List lists all RegionDiskIamPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RegionDiskIamPolicy, err error)
	// RegionDiskIamPolicies returns an object that can list and get RegionDiskIamPolicies.
	RegionDiskIamPolicies(namespace string) RegionDiskIamPolicyNamespaceLister
	RegionDiskIamPolicyListerExpansion
}

// regionDiskIamPolicyLister implements the RegionDiskIamPolicyLister interface.
type regionDiskIamPolicyLister struct {
	indexer cache.Indexer
}

// NewRegionDiskIamPolicyLister returns a new RegionDiskIamPolicyLister.
func NewRegionDiskIamPolicyLister(indexer cache.Indexer) RegionDiskIamPolicyLister {
	return &regionDiskIamPolicyLister{indexer: indexer}
}

// List lists all RegionDiskIamPolicies in the indexer.
func (s *regionDiskIamPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.RegionDiskIamPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RegionDiskIamPolicy))
	})
	return ret, err
}

// RegionDiskIamPolicies returns an object that can list and get RegionDiskIamPolicies.
func (s *regionDiskIamPolicyLister) RegionDiskIamPolicies(namespace string) RegionDiskIamPolicyNamespaceLister {
	return regionDiskIamPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RegionDiskIamPolicyNamespaceLister helps list and get RegionDiskIamPolicies.
// All objects returned here must be treated as read-only.
type RegionDiskIamPolicyNamespaceLister interface {
	// List lists all RegionDiskIamPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RegionDiskIamPolicy, err error)
	// Get retrieves the RegionDiskIamPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.RegionDiskIamPolicy, error)
	RegionDiskIamPolicyNamespaceListerExpansion
}

// regionDiskIamPolicyNamespaceLister implements the RegionDiskIamPolicyNamespaceLister
// interface.
type regionDiskIamPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RegionDiskIamPolicies in the indexer for a given namespace.
func (s regionDiskIamPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RegionDiskIamPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RegionDiskIamPolicy))
	})
	return ret, err
}

// Get retrieves the RegionDiskIamPolicy from the indexer for a given namespace and name.
func (s regionDiskIamPolicyNamespaceLister) Get(name string) (*v1alpha1.RegionDiskIamPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("regiondiskiampolicy"), name)
	}
	return obj.(*v1alpha1.RegionDiskIamPolicy), nil
}
