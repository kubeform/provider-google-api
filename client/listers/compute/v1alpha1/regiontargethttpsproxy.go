/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-google-api/apis/compute/v1alpha1"
)

// RegionTargetHTTPSProxyLister helps list RegionTargetHTTPSProxies.
// All objects returned here must be treated as read-only.
type RegionTargetHTTPSProxyLister interface {
	// List lists all RegionTargetHTTPSProxies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RegionTargetHTTPSProxy, err error)
	// RegionTargetHTTPSProxies returns an object that can list and get RegionTargetHTTPSProxies.
	RegionTargetHTTPSProxies(namespace string) RegionTargetHTTPSProxyNamespaceLister
	RegionTargetHTTPSProxyListerExpansion
}

// regionTargetHTTPSProxyLister implements the RegionTargetHTTPSProxyLister interface.
type regionTargetHTTPSProxyLister struct {
	indexer cache.Indexer
}

// NewRegionTargetHTTPSProxyLister returns a new RegionTargetHTTPSProxyLister.
func NewRegionTargetHTTPSProxyLister(indexer cache.Indexer) RegionTargetHTTPSProxyLister {
	return &regionTargetHTTPSProxyLister{indexer: indexer}
}

// List lists all RegionTargetHTTPSProxies in the indexer.
func (s *regionTargetHTTPSProxyLister) List(selector labels.Selector) (ret []*v1alpha1.RegionTargetHTTPSProxy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RegionTargetHTTPSProxy))
	})
	return ret, err
}

// RegionTargetHTTPSProxies returns an object that can list and get RegionTargetHTTPSProxies.
func (s *regionTargetHTTPSProxyLister) RegionTargetHTTPSProxies(namespace string) RegionTargetHTTPSProxyNamespaceLister {
	return regionTargetHTTPSProxyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RegionTargetHTTPSProxyNamespaceLister helps list and get RegionTargetHTTPSProxies.
// All objects returned here must be treated as read-only.
type RegionTargetHTTPSProxyNamespaceLister interface {
	// List lists all RegionTargetHTTPSProxies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RegionTargetHTTPSProxy, err error)
	// Get retrieves the RegionTargetHTTPSProxy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.RegionTargetHTTPSProxy, error)
	RegionTargetHTTPSProxyNamespaceListerExpansion
}

// regionTargetHTTPSProxyNamespaceLister implements the RegionTargetHTTPSProxyNamespaceLister
// interface.
type regionTargetHTTPSProxyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RegionTargetHTTPSProxies in the indexer for a given namespace.
func (s regionTargetHTTPSProxyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RegionTargetHTTPSProxy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RegionTargetHTTPSProxy))
	})
	return ret, err
}

// Get retrieves the RegionTargetHTTPSProxy from the indexer for a given namespace and name.
func (s regionTargetHTTPSProxyNamespaceLister) Get(name string) (*v1alpha1.RegionTargetHTTPSProxy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("regiontargethttpsproxy"), name)
	}
	return obj.(*v1alpha1.RegionTargetHTTPSProxy), nil
}
