/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/compute/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RegionTargetHTTPProxyLister helps list RegionTargetHTTPProxies.
// All objects returned here must be treated as read-only.
type RegionTargetHTTPProxyLister interface {
	// List lists all RegionTargetHTTPProxies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RegionTargetHTTPProxy, err error)
	// RegionTargetHTTPProxies returns an object that can list and get RegionTargetHTTPProxies.
	RegionTargetHTTPProxies(namespace string) RegionTargetHTTPProxyNamespaceLister
	RegionTargetHTTPProxyListerExpansion
}

// regionTargetHTTPProxyLister implements the RegionTargetHTTPProxyLister interface.
type regionTargetHTTPProxyLister struct {
	indexer cache.Indexer
}

// NewRegionTargetHTTPProxyLister returns a new RegionTargetHTTPProxyLister.
func NewRegionTargetHTTPProxyLister(indexer cache.Indexer) RegionTargetHTTPProxyLister {
	return &regionTargetHTTPProxyLister{indexer: indexer}
}

// List lists all RegionTargetHTTPProxies in the indexer.
func (s *regionTargetHTTPProxyLister) List(selector labels.Selector) (ret []*v1alpha1.RegionTargetHTTPProxy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RegionTargetHTTPProxy))
	})
	return ret, err
}

// RegionTargetHTTPProxies returns an object that can list and get RegionTargetHTTPProxies.
func (s *regionTargetHTTPProxyLister) RegionTargetHTTPProxies(namespace string) RegionTargetHTTPProxyNamespaceLister {
	return regionTargetHTTPProxyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RegionTargetHTTPProxyNamespaceLister helps list and get RegionTargetHTTPProxies.
// All objects returned here must be treated as read-only.
type RegionTargetHTTPProxyNamespaceLister interface {
	// List lists all RegionTargetHTTPProxies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RegionTargetHTTPProxy, err error)
	// Get retrieves the RegionTargetHTTPProxy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.RegionTargetHTTPProxy, error)
	RegionTargetHTTPProxyNamespaceListerExpansion
}

// regionTargetHTTPProxyNamespaceLister implements the RegionTargetHTTPProxyNamespaceLister
// interface.
type regionTargetHTTPProxyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RegionTargetHTTPProxies in the indexer for a given namespace.
func (s regionTargetHTTPProxyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RegionTargetHTTPProxy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RegionTargetHTTPProxy))
	})
	return ret, err
}

// Get retrieves the RegionTargetHTTPProxy from the indexer for a given namespace and name.
func (s regionTargetHTTPProxyNamespaceLister) Get(name string) (*v1alpha1.RegionTargetHTTPProxy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("regiontargethttpproxy"), name)
	}
	return obj.(*v1alpha1.RegionTargetHTTPProxy), nil
}
