/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/compute/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AttachedDiskLister helps list AttachedDisks.
// All objects returned here must be treated as read-only.
type AttachedDiskLister interface {
	// List lists all AttachedDisks in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AttachedDisk, err error)
	// AttachedDisks returns an object that can list and get AttachedDisks.
	AttachedDisks(namespace string) AttachedDiskNamespaceLister
	AttachedDiskListerExpansion
}

// attachedDiskLister implements the AttachedDiskLister interface.
type attachedDiskLister struct {
	indexer cache.Indexer
}

// NewAttachedDiskLister returns a new AttachedDiskLister.
func NewAttachedDiskLister(indexer cache.Indexer) AttachedDiskLister {
	return &attachedDiskLister{indexer: indexer}
}

// List lists all AttachedDisks in the indexer.
func (s *attachedDiskLister) List(selector labels.Selector) (ret []*v1alpha1.AttachedDisk, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AttachedDisk))
	})
	return ret, err
}

// AttachedDisks returns an object that can list and get AttachedDisks.
func (s *attachedDiskLister) AttachedDisks(namespace string) AttachedDiskNamespaceLister {
	return attachedDiskNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AttachedDiskNamespaceLister helps list and get AttachedDisks.
// All objects returned here must be treated as read-only.
type AttachedDiskNamespaceLister interface {
	// List lists all AttachedDisks in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AttachedDisk, err error)
	// Get retrieves the AttachedDisk from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AttachedDisk, error)
	AttachedDiskNamespaceListerExpansion
}

// attachedDiskNamespaceLister implements the AttachedDiskNamespaceLister
// interface.
type attachedDiskNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AttachedDisks in the indexer for a given namespace.
func (s attachedDiskNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AttachedDisk, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AttachedDisk))
	})
	return ret, err
}

// Get retrieves the AttachedDisk from the indexer for a given namespace and name.
func (s attachedDiskNamespaceLister) Get(name string) (*v1alpha1.AttachedDisk, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("attacheddisk"), name)
	}
	return obj.(*v1alpha1.AttachedDisk), nil
}
