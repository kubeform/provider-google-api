/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-google-api/apis/compute/v1alpha1"
)

// ProjectDefaultNetworkTierLister helps list ProjectDefaultNetworkTiers.
// All objects returned here must be treated as read-only.
type ProjectDefaultNetworkTierLister interface {
	// List lists all ProjectDefaultNetworkTiers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ProjectDefaultNetworkTier, err error)
	// ProjectDefaultNetworkTiers returns an object that can list and get ProjectDefaultNetworkTiers.
	ProjectDefaultNetworkTiers(namespace string) ProjectDefaultNetworkTierNamespaceLister
	ProjectDefaultNetworkTierListerExpansion
}

// projectDefaultNetworkTierLister implements the ProjectDefaultNetworkTierLister interface.
type projectDefaultNetworkTierLister struct {
	indexer cache.Indexer
}

// NewProjectDefaultNetworkTierLister returns a new ProjectDefaultNetworkTierLister.
func NewProjectDefaultNetworkTierLister(indexer cache.Indexer) ProjectDefaultNetworkTierLister {
	return &projectDefaultNetworkTierLister{indexer: indexer}
}

// List lists all ProjectDefaultNetworkTiers in the indexer.
func (s *projectDefaultNetworkTierLister) List(selector labels.Selector) (ret []*v1alpha1.ProjectDefaultNetworkTier, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ProjectDefaultNetworkTier))
	})
	return ret, err
}

// ProjectDefaultNetworkTiers returns an object that can list and get ProjectDefaultNetworkTiers.
func (s *projectDefaultNetworkTierLister) ProjectDefaultNetworkTiers(namespace string) ProjectDefaultNetworkTierNamespaceLister {
	return projectDefaultNetworkTierNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ProjectDefaultNetworkTierNamespaceLister helps list and get ProjectDefaultNetworkTiers.
// All objects returned here must be treated as read-only.
type ProjectDefaultNetworkTierNamespaceLister interface {
	// List lists all ProjectDefaultNetworkTiers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ProjectDefaultNetworkTier, err error)
	// Get retrieves the ProjectDefaultNetworkTier from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ProjectDefaultNetworkTier, error)
	ProjectDefaultNetworkTierNamespaceListerExpansion
}

// projectDefaultNetworkTierNamespaceLister implements the ProjectDefaultNetworkTierNamespaceLister
// interface.
type projectDefaultNetworkTierNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ProjectDefaultNetworkTiers in the indexer for a given namespace.
func (s projectDefaultNetworkTierNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ProjectDefaultNetworkTier, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ProjectDefaultNetworkTier))
	})
	return ret, err
}

// Get retrieves the ProjectDefaultNetworkTier from the indexer for a given namespace and name.
func (s projectDefaultNetworkTierNamespaceLister) Get(name string) (*v1alpha1.ProjectDefaultNetworkTier, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("projectdefaultnetworktier"), name)
	}
	return obj.(*v1alpha1.ProjectDefaultNetworkTier), nil
}
