/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/compute/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SslPolicyLister helps list SslPolicies.
// All objects returned here must be treated as read-only.
type SslPolicyLister interface {
	// List lists all SslPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SslPolicy, err error)
	// SslPolicies returns an object that can list and get SslPolicies.
	SslPolicies(namespace string) SslPolicyNamespaceLister
	SslPolicyListerExpansion
}

// sslPolicyLister implements the SslPolicyLister interface.
type sslPolicyLister struct {
	indexer cache.Indexer
}

// NewSslPolicyLister returns a new SslPolicyLister.
func NewSslPolicyLister(indexer cache.Indexer) SslPolicyLister {
	return &sslPolicyLister{indexer: indexer}
}

// List lists all SslPolicies in the indexer.
func (s *sslPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.SslPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SslPolicy))
	})
	return ret, err
}

// SslPolicies returns an object that can list and get SslPolicies.
func (s *sslPolicyLister) SslPolicies(namespace string) SslPolicyNamespaceLister {
	return sslPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SslPolicyNamespaceLister helps list and get SslPolicies.
// All objects returned here must be treated as read-only.
type SslPolicyNamespaceLister interface {
	// List lists all SslPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SslPolicy, err error)
	// Get retrieves the SslPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SslPolicy, error)
	SslPolicyNamespaceListerExpansion
}

// sslPolicyNamespaceLister implements the SslPolicyNamespaceLister
// interface.
type sslPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SslPolicies in the indexer for a given namespace.
func (s sslPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SslPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SslPolicy))
	})
	return ret, err
}

// Get retrieves the SslPolicy from the indexer for a given namespace and name.
func (s sslPolicyNamespaceLister) Get(name string) (*v1alpha1.SslPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("sslpolicy"), name)
	}
	return obj.(*v1alpha1.SslPolicy), nil
}
