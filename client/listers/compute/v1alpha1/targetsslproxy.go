/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/compute/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TargetSslProxyLister helps list TargetSslProxies.
// All objects returned here must be treated as read-only.
type TargetSslProxyLister interface {
	// List lists all TargetSslProxies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TargetSslProxy, err error)
	// TargetSslProxies returns an object that can list and get TargetSslProxies.
	TargetSslProxies(namespace string) TargetSslProxyNamespaceLister
	TargetSslProxyListerExpansion
}

// targetSslProxyLister implements the TargetSslProxyLister interface.
type targetSslProxyLister struct {
	indexer cache.Indexer
}

// NewTargetSslProxyLister returns a new TargetSslProxyLister.
func NewTargetSslProxyLister(indexer cache.Indexer) TargetSslProxyLister {
	return &targetSslProxyLister{indexer: indexer}
}

// List lists all TargetSslProxies in the indexer.
func (s *targetSslProxyLister) List(selector labels.Selector) (ret []*v1alpha1.TargetSslProxy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TargetSslProxy))
	})
	return ret, err
}

// TargetSslProxies returns an object that can list and get TargetSslProxies.
func (s *targetSslProxyLister) TargetSslProxies(namespace string) TargetSslProxyNamespaceLister {
	return targetSslProxyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TargetSslProxyNamespaceLister helps list and get TargetSslProxies.
// All objects returned here must be treated as read-only.
type TargetSslProxyNamespaceLister interface {
	// List lists all TargetSslProxies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TargetSslProxy, err error)
	// Get retrieves the TargetSslProxy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.TargetSslProxy, error)
	TargetSslProxyNamespaceListerExpansion
}

// targetSslProxyNamespaceLister implements the TargetSslProxyNamespaceLister
// interface.
type targetSslProxyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TargetSslProxies in the indexer for a given namespace.
func (s targetSslProxyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TargetSslProxy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TargetSslProxy))
	})
	return ret, err
}

// Get retrieves the TargetSslProxy from the indexer for a given namespace and name.
func (s targetSslProxyNamespaceLister) Get(name string) (*v1alpha1.TargetSslProxy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("targetsslproxy"), name)
	}
	return obj.(*v1alpha1.TargetSslProxy), nil
}
