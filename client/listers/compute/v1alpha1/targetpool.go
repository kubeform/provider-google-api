/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/compute/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TargetPoolLister helps list TargetPools.
// All objects returned here must be treated as read-only.
type TargetPoolLister interface {
	// List lists all TargetPools in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TargetPool, err error)
	// TargetPools returns an object that can list and get TargetPools.
	TargetPools(namespace string) TargetPoolNamespaceLister
	TargetPoolListerExpansion
}

// targetPoolLister implements the TargetPoolLister interface.
type targetPoolLister struct {
	indexer cache.Indexer
}

// NewTargetPoolLister returns a new TargetPoolLister.
func NewTargetPoolLister(indexer cache.Indexer) TargetPoolLister {
	return &targetPoolLister{indexer: indexer}
}

// List lists all TargetPools in the indexer.
func (s *targetPoolLister) List(selector labels.Selector) (ret []*v1alpha1.TargetPool, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TargetPool))
	})
	return ret, err
}

// TargetPools returns an object that can list and get TargetPools.
func (s *targetPoolLister) TargetPools(namespace string) TargetPoolNamespaceLister {
	return targetPoolNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TargetPoolNamespaceLister helps list and get TargetPools.
// All objects returned here must be treated as read-only.
type TargetPoolNamespaceLister interface {
	// List lists all TargetPools in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TargetPool, err error)
	// Get retrieves the TargetPool from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.TargetPool, error)
	TargetPoolNamespaceListerExpansion
}

// targetPoolNamespaceLister implements the TargetPoolNamespaceLister
// interface.
type targetPoolNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TargetPools in the indexer for a given namespace.
func (s targetPoolNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TargetPool, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TargetPool))
	})
	return ret, err
}

// Get retrieves the TargetPool from the indexer for a given namespace and name.
func (s targetPoolNamespaceLister) Get(name string) (*v1alpha1.TargetPool, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("targetpool"), name)
	}
	return obj.(*v1alpha1.TargetPool), nil
}
