/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-google-api/apis/compute/v1alpha1"
)

// UrlMapLister helps list UrlMaps.
// All objects returned here must be treated as read-only.
type UrlMapLister interface {
	// List lists all UrlMaps in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.UrlMap, err error)
	// UrlMaps returns an object that can list and get UrlMaps.
	UrlMaps(namespace string) UrlMapNamespaceLister
	UrlMapListerExpansion
}

// urlMapLister implements the UrlMapLister interface.
type urlMapLister struct {
	indexer cache.Indexer
}

// NewUrlMapLister returns a new UrlMapLister.
func NewUrlMapLister(indexer cache.Indexer) UrlMapLister {
	return &urlMapLister{indexer: indexer}
}

// List lists all UrlMaps in the indexer.
func (s *urlMapLister) List(selector labels.Selector) (ret []*v1alpha1.UrlMap, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.UrlMap))
	})
	return ret, err
}

// UrlMaps returns an object that can list and get UrlMaps.
func (s *urlMapLister) UrlMaps(namespace string) UrlMapNamespaceLister {
	return urlMapNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// UrlMapNamespaceLister helps list and get UrlMaps.
// All objects returned here must be treated as read-only.
type UrlMapNamespaceLister interface {
	// List lists all UrlMaps in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.UrlMap, err error)
	// Get retrieves the UrlMap from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.UrlMap, error)
	UrlMapNamespaceListerExpansion
}

// urlMapNamespaceLister implements the UrlMapNamespaceLister
// interface.
type urlMapNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all UrlMaps in the indexer for a given namespace.
func (s urlMapNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.UrlMap, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.UrlMap))
	})
	return ret, err
}

// Get retrieves the UrlMap from the indexer for a given namespace and name.
func (s urlMapNamespaceLister) Get(name string) (*v1alpha1.UrlMap, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("urlmap"), name)
	}
	return obj.(*v1alpha1.UrlMap), nil
}
