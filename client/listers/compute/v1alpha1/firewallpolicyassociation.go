/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/compute/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FirewallPolicyAssociationLister helps list FirewallPolicyAssociations.
// All objects returned here must be treated as read-only.
type FirewallPolicyAssociationLister interface {
	// List lists all FirewallPolicyAssociations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FirewallPolicyAssociation, err error)
	// FirewallPolicyAssociations returns an object that can list and get FirewallPolicyAssociations.
	FirewallPolicyAssociations(namespace string) FirewallPolicyAssociationNamespaceLister
	FirewallPolicyAssociationListerExpansion
}

// firewallPolicyAssociationLister implements the FirewallPolicyAssociationLister interface.
type firewallPolicyAssociationLister struct {
	indexer cache.Indexer
}

// NewFirewallPolicyAssociationLister returns a new FirewallPolicyAssociationLister.
func NewFirewallPolicyAssociationLister(indexer cache.Indexer) FirewallPolicyAssociationLister {
	return &firewallPolicyAssociationLister{indexer: indexer}
}

// List lists all FirewallPolicyAssociations in the indexer.
func (s *firewallPolicyAssociationLister) List(selector labels.Selector) (ret []*v1alpha1.FirewallPolicyAssociation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FirewallPolicyAssociation))
	})
	return ret, err
}

// FirewallPolicyAssociations returns an object that can list and get FirewallPolicyAssociations.
func (s *firewallPolicyAssociationLister) FirewallPolicyAssociations(namespace string) FirewallPolicyAssociationNamespaceLister {
	return firewallPolicyAssociationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FirewallPolicyAssociationNamespaceLister helps list and get FirewallPolicyAssociations.
// All objects returned here must be treated as read-only.
type FirewallPolicyAssociationNamespaceLister interface {
	// List lists all FirewallPolicyAssociations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FirewallPolicyAssociation, err error)
	// Get retrieves the FirewallPolicyAssociation from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.FirewallPolicyAssociation, error)
	FirewallPolicyAssociationNamespaceListerExpansion
}

// firewallPolicyAssociationNamespaceLister implements the FirewallPolicyAssociationNamespaceLister
// interface.
type firewallPolicyAssociationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FirewallPolicyAssociations in the indexer for a given namespace.
func (s firewallPolicyAssociationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.FirewallPolicyAssociation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FirewallPolicyAssociation))
	})
	return ret, err
}

// Get retrieves the FirewallPolicyAssociation from the indexer for a given namespace and name.
func (s firewallPolicyAssociationNamespaceLister) Get(name string) (*v1alpha1.FirewallPolicyAssociation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("firewallpolicyassociation"), name)
	}
	return obj.(*v1alpha1.FirewallPolicyAssociation), nil
}
