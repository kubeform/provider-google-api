/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/compute/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NetworkPeeringLister helps list NetworkPeerings.
// All objects returned here must be treated as read-only.
type NetworkPeeringLister interface {
	// List lists all NetworkPeerings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NetworkPeering, err error)
	// NetworkPeerings returns an object that can list and get NetworkPeerings.
	NetworkPeerings(namespace string) NetworkPeeringNamespaceLister
	NetworkPeeringListerExpansion
}

// networkPeeringLister implements the NetworkPeeringLister interface.
type networkPeeringLister struct {
	indexer cache.Indexer
}

// NewNetworkPeeringLister returns a new NetworkPeeringLister.
func NewNetworkPeeringLister(indexer cache.Indexer) NetworkPeeringLister {
	return &networkPeeringLister{indexer: indexer}
}

// List lists all NetworkPeerings in the indexer.
func (s *networkPeeringLister) List(selector labels.Selector) (ret []*v1alpha1.NetworkPeering, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NetworkPeering))
	})
	return ret, err
}

// NetworkPeerings returns an object that can list and get NetworkPeerings.
func (s *networkPeeringLister) NetworkPeerings(namespace string) NetworkPeeringNamespaceLister {
	return networkPeeringNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NetworkPeeringNamespaceLister helps list and get NetworkPeerings.
// All objects returned here must be treated as read-only.
type NetworkPeeringNamespaceLister interface {
	// List lists all NetworkPeerings in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NetworkPeering, err error)
	// Get retrieves the NetworkPeering from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.NetworkPeering, error)
	NetworkPeeringNamespaceListerExpansion
}

// networkPeeringNamespaceLister implements the NetworkPeeringNamespaceLister
// interface.
type networkPeeringNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NetworkPeerings in the indexer for a given namespace.
func (s networkPeeringNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.NetworkPeering, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NetworkPeering))
	})
	return ret, err
}

// Get retrieves the NetworkPeering from the indexer for a given namespace and name.
func (s networkPeeringNamespaceLister) Get(name string) (*v1alpha1.NetworkPeering, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("networkpeering"), name)
	}
	return obj.(*v1alpha1.NetworkPeering), nil
}
