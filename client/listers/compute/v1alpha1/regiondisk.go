/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/compute/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RegionDiskLister helps list RegionDisks.
// All objects returned here must be treated as read-only.
type RegionDiskLister interface {
	// List lists all RegionDisks in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RegionDisk, err error)
	// RegionDisks returns an object that can list and get RegionDisks.
	RegionDisks(namespace string) RegionDiskNamespaceLister
	RegionDiskListerExpansion
}

// regionDiskLister implements the RegionDiskLister interface.
type regionDiskLister struct {
	indexer cache.Indexer
}

// NewRegionDiskLister returns a new RegionDiskLister.
func NewRegionDiskLister(indexer cache.Indexer) RegionDiskLister {
	return &regionDiskLister{indexer: indexer}
}

// List lists all RegionDisks in the indexer.
func (s *regionDiskLister) List(selector labels.Selector) (ret []*v1alpha1.RegionDisk, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RegionDisk))
	})
	return ret, err
}

// RegionDisks returns an object that can list and get RegionDisks.
func (s *regionDiskLister) RegionDisks(namespace string) RegionDiskNamespaceLister {
	return regionDiskNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RegionDiskNamespaceLister helps list and get RegionDisks.
// All objects returned here must be treated as read-only.
type RegionDiskNamespaceLister interface {
	// List lists all RegionDisks in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RegionDisk, err error)
	// Get retrieves the RegionDisk from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.RegionDisk, error)
	RegionDiskNamespaceListerExpansion
}

// regionDiskNamespaceLister implements the RegionDiskNamespaceLister
// interface.
type regionDiskNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RegionDisks in the indexer for a given namespace.
func (s regionDiskNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RegionDisk, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RegionDisk))
	})
	return ret, err
}

// Get retrieves the RegionDisk from the indexer for a given namespace and name.
func (s regionDiskNamespaceLister) Get(name string) (*v1alpha1.RegionDisk, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("regiondisk"), name)
	}
	return obj.(*v1alpha1.RegionDisk), nil
}
