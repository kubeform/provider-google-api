/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/compute/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TargetInstanceLister helps list TargetInstances.
// All objects returned here must be treated as read-only.
type TargetInstanceLister interface {
	// List lists all TargetInstances in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TargetInstance, err error)
	// TargetInstances returns an object that can list and get TargetInstances.
	TargetInstances(namespace string) TargetInstanceNamespaceLister
	TargetInstanceListerExpansion
}

// targetInstanceLister implements the TargetInstanceLister interface.
type targetInstanceLister struct {
	indexer cache.Indexer
}

// NewTargetInstanceLister returns a new TargetInstanceLister.
func NewTargetInstanceLister(indexer cache.Indexer) TargetInstanceLister {
	return &targetInstanceLister{indexer: indexer}
}

// List lists all TargetInstances in the indexer.
func (s *targetInstanceLister) List(selector labels.Selector) (ret []*v1alpha1.TargetInstance, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TargetInstance))
	})
	return ret, err
}

// TargetInstances returns an object that can list and get TargetInstances.
func (s *targetInstanceLister) TargetInstances(namespace string) TargetInstanceNamespaceLister {
	return targetInstanceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TargetInstanceNamespaceLister helps list and get TargetInstances.
// All objects returned here must be treated as read-only.
type TargetInstanceNamespaceLister interface {
	// List lists all TargetInstances in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TargetInstance, err error)
	// Get retrieves the TargetInstance from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.TargetInstance, error)
	TargetInstanceNamespaceListerExpansion
}

// targetInstanceNamespaceLister implements the TargetInstanceNamespaceLister
// interface.
type targetInstanceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TargetInstances in the indexer for a given namespace.
func (s targetInstanceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TargetInstance, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TargetInstance))
	})
	return ret, err
}

// Get retrieves the TargetInstance from the indexer for a given namespace and name.
func (s targetInstanceNamespaceLister) Get(name string) (*v1alpha1.TargetInstance, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("targetinstance"), name)
	}
	return obj.(*v1alpha1.TargetInstance), nil
}
