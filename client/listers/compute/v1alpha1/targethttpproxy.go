/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/compute/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TargetHTTPProxyLister helps list TargetHTTPProxies.
// All objects returned here must be treated as read-only.
type TargetHTTPProxyLister interface {
	// List lists all TargetHTTPProxies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TargetHTTPProxy, err error)
	// TargetHTTPProxies returns an object that can list and get TargetHTTPProxies.
	TargetHTTPProxies(namespace string) TargetHTTPProxyNamespaceLister
	TargetHTTPProxyListerExpansion
}

// targetHTTPProxyLister implements the TargetHTTPProxyLister interface.
type targetHTTPProxyLister struct {
	indexer cache.Indexer
}

// NewTargetHTTPProxyLister returns a new TargetHTTPProxyLister.
func NewTargetHTTPProxyLister(indexer cache.Indexer) TargetHTTPProxyLister {
	return &targetHTTPProxyLister{indexer: indexer}
}

// List lists all TargetHTTPProxies in the indexer.
func (s *targetHTTPProxyLister) List(selector labels.Selector) (ret []*v1alpha1.TargetHTTPProxy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TargetHTTPProxy))
	})
	return ret, err
}

// TargetHTTPProxies returns an object that can list and get TargetHTTPProxies.
func (s *targetHTTPProxyLister) TargetHTTPProxies(namespace string) TargetHTTPProxyNamespaceLister {
	return targetHTTPProxyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TargetHTTPProxyNamespaceLister helps list and get TargetHTTPProxies.
// All objects returned here must be treated as read-only.
type TargetHTTPProxyNamespaceLister interface {
	// List lists all TargetHTTPProxies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TargetHTTPProxy, err error)
	// Get retrieves the TargetHTTPProxy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.TargetHTTPProxy, error)
	TargetHTTPProxyNamespaceListerExpansion
}

// targetHTTPProxyNamespaceLister implements the TargetHTTPProxyNamespaceLister
// interface.
type targetHTTPProxyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TargetHTTPProxies in the indexer for a given namespace.
func (s targetHTTPProxyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TargetHTTPProxy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TargetHTTPProxy))
	})
	return ret, err
}

// Get retrieves the TargetHTTPProxy from the indexer for a given namespace and name.
func (s targetHTTPProxyNamespaceLister) Get(name string) (*v1alpha1.TargetHTTPProxy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("targethttpproxy"), name)
	}
	return obj.(*v1alpha1.TargetHTTPProxy), nil
}
