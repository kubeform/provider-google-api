/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/compute/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RouterNATLister helps list RouterNATs.
// All objects returned here must be treated as read-only.
type RouterNATLister interface {
	// List lists all RouterNATs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RouterNAT, err error)
	// RouterNATs returns an object that can list and get RouterNATs.
	RouterNATs(namespace string) RouterNATNamespaceLister
	RouterNATListerExpansion
}

// routerNATLister implements the RouterNATLister interface.
type routerNATLister struct {
	indexer cache.Indexer
}

// NewRouterNATLister returns a new RouterNATLister.
func NewRouterNATLister(indexer cache.Indexer) RouterNATLister {
	return &routerNATLister{indexer: indexer}
}

// List lists all RouterNATs in the indexer.
func (s *routerNATLister) List(selector labels.Selector) (ret []*v1alpha1.RouterNAT, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RouterNAT))
	})
	return ret, err
}

// RouterNATs returns an object that can list and get RouterNATs.
func (s *routerNATLister) RouterNATs(namespace string) RouterNATNamespaceLister {
	return routerNATNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RouterNATNamespaceLister helps list and get RouterNATs.
// All objects returned here must be treated as read-only.
type RouterNATNamespaceLister interface {
	// List lists all RouterNATs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RouterNAT, err error)
	// Get retrieves the RouterNAT from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.RouterNAT, error)
	RouterNATNamespaceListerExpansion
}

// routerNATNamespaceLister implements the RouterNATNamespaceLister
// interface.
type routerNATNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RouterNATs in the indexer for a given namespace.
func (s routerNATNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RouterNAT, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RouterNAT))
	})
	return ret, err
}

// Get retrieves the RouterNAT from the indexer for a given namespace and name.
func (s routerNATNamespaceLister) Get(name string) (*v1alpha1.RouterNAT, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("routernat"), name)
	}
	return obj.(*v1alpha1.RouterNAT), nil
}
