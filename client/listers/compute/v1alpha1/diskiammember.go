/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/compute/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DiskIamMemberLister helps list DiskIamMembers.
// All objects returned here must be treated as read-only.
type DiskIamMemberLister interface {
	// List lists all DiskIamMembers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DiskIamMember, err error)
	// DiskIamMembers returns an object that can list and get DiskIamMembers.
	DiskIamMembers(namespace string) DiskIamMemberNamespaceLister
	DiskIamMemberListerExpansion
}

// diskIamMemberLister implements the DiskIamMemberLister interface.
type diskIamMemberLister struct {
	indexer cache.Indexer
}

// NewDiskIamMemberLister returns a new DiskIamMemberLister.
func NewDiskIamMemberLister(indexer cache.Indexer) DiskIamMemberLister {
	return &diskIamMemberLister{indexer: indexer}
}

// List lists all DiskIamMembers in the indexer.
func (s *diskIamMemberLister) List(selector labels.Selector) (ret []*v1alpha1.DiskIamMember, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DiskIamMember))
	})
	return ret, err
}

// DiskIamMembers returns an object that can list and get DiskIamMembers.
func (s *diskIamMemberLister) DiskIamMembers(namespace string) DiskIamMemberNamespaceLister {
	return diskIamMemberNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DiskIamMemberNamespaceLister helps list and get DiskIamMembers.
// All objects returned here must be treated as read-only.
type DiskIamMemberNamespaceLister interface {
	// List lists all DiskIamMembers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DiskIamMember, err error)
	// Get retrieves the DiskIamMember from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DiskIamMember, error)
	DiskIamMemberNamespaceListerExpansion
}

// diskIamMemberNamespaceLister implements the DiskIamMemberNamespaceLister
// interface.
type diskIamMemberNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DiskIamMembers in the indexer for a given namespace.
func (s diskIamMemberNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DiskIamMember, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DiskIamMember))
	})
	return ret, err
}

// Get retrieves the DiskIamMember from the indexer for a given namespace and name.
func (s diskIamMemberNamespaceLister) Get(name string) (*v1alpha1.DiskIamMember, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("diskiammember"), name)
	}
	return obj.(*v1alpha1.DiskIamMember), nil
}
