/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-google-api/apis/compute/v1alpha1"
)

// SharedVpcServiceProjectLister helps list SharedVpcServiceProjects.
// All objects returned here must be treated as read-only.
type SharedVpcServiceProjectLister interface {
	// List lists all SharedVpcServiceProjects in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SharedVpcServiceProject, err error)
	// SharedVpcServiceProjects returns an object that can list and get SharedVpcServiceProjects.
	SharedVpcServiceProjects(namespace string) SharedVpcServiceProjectNamespaceLister
	SharedVpcServiceProjectListerExpansion
}

// sharedVpcServiceProjectLister implements the SharedVpcServiceProjectLister interface.
type sharedVpcServiceProjectLister struct {
	indexer cache.Indexer
}

// NewSharedVpcServiceProjectLister returns a new SharedVpcServiceProjectLister.
func NewSharedVpcServiceProjectLister(indexer cache.Indexer) SharedVpcServiceProjectLister {
	return &sharedVpcServiceProjectLister{indexer: indexer}
}

// List lists all SharedVpcServiceProjects in the indexer.
func (s *sharedVpcServiceProjectLister) List(selector labels.Selector) (ret []*v1alpha1.SharedVpcServiceProject, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SharedVpcServiceProject))
	})
	return ret, err
}

// SharedVpcServiceProjects returns an object that can list and get SharedVpcServiceProjects.
func (s *sharedVpcServiceProjectLister) SharedVpcServiceProjects(namespace string) SharedVpcServiceProjectNamespaceLister {
	return sharedVpcServiceProjectNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SharedVpcServiceProjectNamespaceLister helps list and get SharedVpcServiceProjects.
// All objects returned here must be treated as read-only.
type SharedVpcServiceProjectNamespaceLister interface {
	// List lists all SharedVpcServiceProjects in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SharedVpcServiceProject, err error)
	// Get retrieves the SharedVpcServiceProject from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SharedVpcServiceProject, error)
	SharedVpcServiceProjectNamespaceListerExpansion
}

// sharedVpcServiceProjectNamespaceLister implements the SharedVpcServiceProjectNamespaceLister
// interface.
type sharedVpcServiceProjectNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SharedVpcServiceProjects in the indexer for a given namespace.
func (s sharedVpcServiceProjectNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SharedVpcServiceProject, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SharedVpcServiceProject))
	})
	return ret, err
}

// Get retrieves the SharedVpcServiceProject from the indexer for a given namespace and name.
func (s sharedVpcServiceProjectNamespaceLister) Get(name string) (*v1alpha1.SharedVpcServiceProject, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("sharedvpcserviceproject"), name)
	}
	return obj.(*v1alpha1.SharedVpcServiceProject), nil
}
