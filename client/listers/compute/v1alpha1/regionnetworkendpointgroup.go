/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/compute/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RegionNetworkEndpointGroupLister helps list RegionNetworkEndpointGroups.
// All objects returned here must be treated as read-only.
type RegionNetworkEndpointGroupLister interface {
	// List lists all RegionNetworkEndpointGroups in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RegionNetworkEndpointGroup, err error)
	// RegionNetworkEndpointGroups returns an object that can list and get RegionNetworkEndpointGroups.
	RegionNetworkEndpointGroups(namespace string) RegionNetworkEndpointGroupNamespaceLister
	RegionNetworkEndpointGroupListerExpansion
}

// regionNetworkEndpointGroupLister implements the RegionNetworkEndpointGroupLister interface.
type regionNetworkEndpointGroupLister struct {
	indexer cache.Indexer
}

// NewRegionNetworkEndpointGroupLister returns a new RegionNetworkEndpointGroupLister.
func NewRegionNetworkEndpointGroupLister(indexer cache.Indexer) RegionNetworkEndpointGroupLister {
	return &regionNetworkEndpointGroupLister{indexer: indexer}
}

// List lists all RegionNetworkEndpointGroups in the indexer.
func (s *regionNetworkEndpointGroupLister) List(selector labels.Selector) (ret []*v1alpha1.RegionNetworkEndpointGroup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RegionNetworkEndpointGroup))
	})
	return ret, err
}

// RegionNetworkEndpointGroups returns an object that can list and get RegionNetworkEndpointGroups.
func (s *regionNetworkEndpointGroupLister) RegionNetworkEndpointGroups(namespace string) RegionNetworkEndpointGroupNamespaceLister {
	return regionNetworkEndpointGroupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RegionNetworkEndpointGroupNamespaceLister helps list and get RegionNetworkEndpointGroups.
// All objects returned here must be treated as read-only.
type RegionNetworkEndpointGroupNamespaceLister interface {
	// List lists all RegionNetworkEndpointGroups in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RegionNetworkEndpointGroup, err error)
	// Get retrieves the RegionNetworkEndpointGroup from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.RegionNetworkEndpointGroup, error)
	RegionNetworkEndpointGroupNamespaceListerExpansion
}

// regionNetworkEndpointGroupNamespaceLister implements the RegionNetworkEndpointGroupNamespaceLister
// interface.
type regionNetworkEndpointGroupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RegionNetworkEndpointGroups in the indexer for a given namespace.
func (s regionNetworkEndpointGroupNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RegionNetworkEndpointGroup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RegionNetworkEndpointGroup))
	})
	return ret, err
}

// Get retrieves the RegionNetworkEndpointGroup from the indexer for a given namespace and name.
func (s regionNetworkEndpointGroupNamespaceLister) Get(name string) (*v1alpha1.RegionNetworkEndpointGroup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("regionnetworkendpointgroup"), name)
	}
	return obj.(*v1alpha1.RegionNetworkEndpointGroup), nil
}
