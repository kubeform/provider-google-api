/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/compute/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GlobalNetworkEndpointGroupLister helps list GlobalNetworkEndpointGroups.
// All objects returned here must be treated as read-only.
type GlobalNetworkEndpointGroupLister interface {
	// List lists all GlobalNetworkEndpointGroups in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GlobalNetworkEndpointGroup, err error)
	// GlobalNetworkEndpointGroups returns an object that can list and get GlobalNetworkEndpointGroups.
	GlobalNetworkEndpointGroups(namespace string) GlobalNetworkEndpointGroupNamespaceLister
	GlobalNetworkEndpointGroupListerExpansion
}

// globalNetworkEndpointGroupLister implements the GlobalNetworkEndpointGroupLister interface.
type globalNetworkEndpointGroupLister struct {
	indexer cache.Indexer
}

// NewGlobalNetworkEndpointGroupLister returns a new GlobalNetworkEndpointGroupLister.
func NewGlobalNetworkEndpointGroupLister(indexer cache.Indexer) GlobalNetworkEndpointGroupLister {
	return &globalNetworkEndpointGroupLister{indexer: indexer}
}

// List lists all GlobalNetworkEndpointGroups in the indexer.
func (s *globalNetworkEndpointGroupLister) List(selector labels.Selector) (ret []*v1alpha1.GlobalNetworkEndpointGroup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GlobalNetworkEndpointGroup))
	})
	return ret, err
}

// GlobalNetworkEndpointGroups returns an object that can list and get GlobalNetworkEndpointGroups.
func (s *globalNetworkEndpointGroupLister) GlobalNetworkEndpointGroups(namespace string) GlobalNetworkEndpointGroupNamespaceLister {
	return globalNetworkEndpointGroupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GlobalNetworkEndpointGroupNamespaceLister helps list and get GlobalNetworkEndpointGroups.
// All objects returned here must be treated as read-only.
type GlobalNetworkEndpointGroupNamespaceLister interface {
	// List lists all GlobalNetworkEndpointGroups in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GlobalNetworkEndpointGroup, err error)
	// Get retrieves the GlobalNetworkEndpointGroup from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.GlobalNetworkEndpointGroup, error)
	GlobalNetworkEndpointGroupNamespaceListerExpansion
}

// globalNetworkEndpointGroupNamespaceLister implements the GlobalNetworkEndpointGroupNamespaceLister
// interface.
type globalNetworkEndpointGroupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GlobalNetworkEndpointGroups in the indexer for a given namespace.
func (s globalNetworkEndpointGroupNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.GlobalNetworkEndpointGroup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GlobalNetworkEndpointGroup))
	})
	return ret, err
}

// Get retrieves the GlobalNetworkEndpointGroup from the indexer for a given namespace and name.
func (s globalNetworkEndpointGroupNamespaceLister) Get(name string) (*v1alpha1.GlobalNetworkEndpointGroup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("globalnetworkendpointgroup"), name)
	}
	return obj.(*v1alpha1.GlobalNetworkEndpointGroup), nil
}
