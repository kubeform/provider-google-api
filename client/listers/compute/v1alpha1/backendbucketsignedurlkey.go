/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/compute/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BackendBucketSignedURLKeyLister helps list BackendBucketSignedURLKeys.
// All objects returned here must be treated as read-only.
type BackendBucketSignedURLKeyLister interface {
	// List lists all BackendBucketSignedURLKeys in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BackendBucketSignedURLKey, err error)
	// BackendBucketSignedURLKeys returns an object that can list and get BackendBucketSignedURLKeys.
	BackendBucketSignedURLKeys(namespace string) BackendBucketSignedURLKeyNamespaceLister
	BackendBucketSignedURLKeyListerExpansion
}

// backendBucketSignedURLKeyLister implements the BackendBucketSignedURLKeyLister interface.
type backendBucketSignedURLKeyLister struct {
	indexer cache.Indexer
}

// NewBackendBucketSignedURLKeyLister returns a new BackendBucketSignedURLKeyLister.
func NewBackendBucketSignedURLKeyLister(indexer cache.Indexer) BackendBucketSignedURLKeyLister {
	return &backendBucketSignedURLKeyLister{indexer: indexer}
}

// List lists all BackendBucketSignedURLKeys in the indexer.
func (s *backendBucketSignedURLKeyLister) List(selector labels.Selector) (ret []*v1alpha1.BackendBucketSignedURLKey, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BackendBucketSignedURLKey))
	})
	return ret, err
}

// BackendBucketSignedURLKeys returns an object that can list and get BackendBucketSignedURLKeys.
func (s *backendBucketSignedURLKeyLister) BackendBucketSignedURLKeys(namespace string) BackendBucketSignedURLKeyNamespaceLister {
	return backendBucketSignedURLKeyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BackendBucketSignedURLKeyNamespaceLister helps list and get BackendBucketSignedURLKeys.
// All objects returned here must be treated as read-only.
type BackendBucketSignedURLKeyNamespaceLister interface {
	// List lists all BackendBucketSignedURLKeys in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BackendBucketSignedURLKey, err error)
	// Get retrieves the BackendBucketSignedURLKey from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.BackendBucketSignedURLKey, error)
	BackendBucketSignedURLKeyNamespaceListerExpansion
}

// backendBucketSignedURLKeyNamespaceLister implements the BackendBucketSignedURLKeyNamespaceLister
// interface.
type backendBucketSignedURLKeyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BackendBucketSignedURLKeys in the indexer for a given namespace.
func (s backendBucketSignedURLKeyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BackendBucketSignedURLKey, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BackendBucketSignedURLKey))
	})
	return ret, err
}

// Get retrieves the BackendBucketSignedURLKey from the indexer for a given namespace and name.
func (s backendBucketSignedURLKeyNamespaceLister) Get(name string) (*v1alpha1.BackendBucketSignedURLKey, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("backendbucketsignedurlkey"), name)
	}
	return obj.(*v1alpha1.BackendBucketSignedURLKey), nil
}
