/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/compute/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SubnetworkLister helps list Subnetworks.
// All objects returned here must be treated as read-only.
type SubnetworkLister interface {
	// List lists all Subnetworks in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Subnetwork, err error)
	// Subnetworks returns an object that can list and get Subnetworks.
	Subnetworks(namespace string) SubnetworkNamespaceLister
	SubnetworkListerExpansion
}

// subnetworkLister implements the SubnetworkLister interface.
type subnetworkLister struct {
	indexer cache.Indexer
}

// NewSubnetworkLister returns a new SubnetworkLister.
func NewSubnetworkLister(indexer cache.Indexer) SubnetworkLister {
	return &subnetworkLister{indexer: indexer}
}

// List lists all Subnetworks in the indexer.
func (s *subnetworkLister) List(selector labels.Selector) (ret []*v1alpha1.Subnetwork, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Subnetwork))
	})
	return ret, err
}

// Subnetworks returns an object that can list and get Subnetworks.
func (s *subnetworkLister) Subnetworks(namespace string) SubnetworkNamespaceLister {
	return subnetworkNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SubnetworkNamespaceLister helps list and get Subnetworks.
// All objects returned here must be treated as read-only.
type SubnetworkNamespaceLister interface {
	// List lists all Subnetworks in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Subnetwork, err error)
	// Get retrieves the Subnetwork from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Subnetwork, error)
	SubnetworkNamespaceListerExpansion
}

// subnetworkNamespaceLister implements the SubnetworkNamespaceLister
// interface.
type subnetworkNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Subnetworks in the indexer for a given namespace.
func (s subnetworkNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Subnetwork, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Subnetwork))
	})
	return ret, err
}

// Get retrieves the Subnetwork from the indexer for a given namespace and name.
func (s subnetworkNamespaceLister) Get(name string) (*v1alpha1.Subnetwork, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("subnetwork"), name)
	}
	return obj.(*v1alpha1.Subnetwork), nil
}
