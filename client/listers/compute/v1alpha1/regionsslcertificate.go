/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/compute/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RegionSslCertificateLister helps list RegionSslCertificates.
// All objects returned here must be treated as read-only.
type RegionSslCertificateLister interface {
	// List lists all RegionSslCertificates in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RegionSslCertificate, err error)
	// RegionSslCertificates returns an object that can list and get RegionSslCertificates.
	RegionSslCertificates(namespace string) RegionSslCertificateNamespaceLister
	RegionSslCertificateListerExpansion
}

// regionSslCertificateLister implements the RegionSslCertificateLister interface.
type regionSslCertificateLister struct {
	indexer cache.Indexer
}

// NewRegionSslCertificateLister returns a new RegionSslCertificateLister.
func NewRegionSslCertificateLister(indexer cache.Indexer) RegionSslCertificateLister {
	return &regionSslCertificateLister{indexer: indexer}
}

// List lists all RegionSslCertificates in the indexer.
func (s *regionSslCertificateLister) List(selector labels.Selector) (ret []*v1alpha1.RegionSslCertificate, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RegionSslCertificate))
	})
	return ret, err
}

// RegionSslCertificates returns an object that can list and get RegionSslCertificates.
func (s *regionSslCertificateLister) RegionSslCertificates(namespace string) RegionSslCertificateNamespaceLister {
	return regionSslCertificateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RegionSslCertificateNamespaceLister helps list and get RegionSslCertificates.
// All objects returned here must be treated as read-only.
type RegionSslCertificateNamespaceLister interface {
	// List lists all RegionSslCertificates in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RegionSslCertificate, err error)
	// Get retrieves the RegionSslCertificate from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.RegionSslCertificate, error)
	RegionSslCertificateNamespaceListerExpansion
}

// regionSslCertificateNamespaceLister implements the RegionSslCertificateNamespaceLister
// interface.
type regionSslCertificateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RegionSslCertificates in the indexer for a given namespace.
func (s regionSslCertificateNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RegionSslCertificate, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RegionSslCertificate))
	})
	return ret, err
}

// Get retrieves the RegionSslCertificate from the indexer for a given namespace and name.
func (s regionSslCertificateNamespaceLister) Get(name string) (*v1alpha1.RegionSslCertificate, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("regionsslcertificate"), name)
	}
	return obj.(*v1alpha1.RegionSslCertificate), nil
}
