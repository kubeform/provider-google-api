/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-google-api/apis/compute/v1alpha1"
)

// ExternalVPNGatewayLister helps list ExternalVPNGateways.
// All objects returned here must be treated as read-only.
type ExternalVPNGatewayLister interface {
	// List lists all ExternalVPNGateways in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ExternalVPNGateway, err error)
	// ExternalVPNGateways returns an object that can list and get ExternalVPNGateways.
	ExternalVPNGateways(namespace string) ExternalVPNGatewayNamespaceLister
	ExternalVPNGatewayListerExpansion
}

// externalVPNGatewayLister implements the ExternalVPNGatewayLister interface.
type externalVPNGatewayLister struct {
	indexer cache.Indexer
}

// NewExternalVPNGatewayLister returns a new ExternalVPNGatewayLister.
func NewExternalVPNGatewayLister(indexer cache.Indexer) ExternalVPNGatewayLister {
	return &externalVPNGatewayLister{indexer: indexer}
}

// List lists all ExternalVPNGateways in the indexer.
func (s *externalVPNGatewayLister) List(selector labels.Selector) (ret []*v1alpha1.ExternalVPNGateway, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ExternalVPNGateway))
	})
	return ret, err
}

// ExternalVPNGateways returns an object that can list and get ExternalVPNGateways.
func (s *externalVPNGatewayLister) ExternalVPNGateways(namespace string) ExternalVPNGatewayNamespaceLister {
	return externalVPNGatewayNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ExternalVPNGatewayNamespaceLister helps list and get ExternalVPNGateways.
// All objects returned here must be treated as read-only.
type ExternalVPNGatewayNamespaceLister interface {
	// List lists all ExternalVPNGateways in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ExternalVPNGateway, err error)
	// Get retrieves the ExternalVPNGateway from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ExternalVPNGateway, error)
	ExternalVPNGatewayNamespaceListerExpansion
}

// externalVPNGatewayNamespaceLister implements the ExternalVPNGatewayNamespaceLister
// interface.
type externalVPNGatewayNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ExternalVPNGateways in the indexer for a given namespace.
func (s externalVPNGatewayNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ExternalVPNGateway, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ExternalVPNGateway))
	})
	return ret, err
}

// Get retrieves the ExternalVPNGateway from the indexer for a given namespace and name.
func (s externalVPNGatewayNamespaceLister) Get(name string) (*v1alpha1.ExternalVPNGateway, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("externalvpngateway"), name)
	}
	return obj.(*v1alpha1.ExternalVPNGateway), nil
}
