/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-google-api/apis/compute/v1alpha1"
)

// SubnetworkIamMemberLister helps list SubnetworkIamMembers.
// All objects returned here must be treated as read-only.
type SubnetworkIamMemberLister interface {
	// List lists all SubnetworkIamMembers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SubnetworkIamMember, err error)
	// SubnetworkIamMembers returns an object that can list and get SubnetworkIamMembers.
	SubnetworkIamMembers(namespace string) SubnetworkIamMemberNamespaceLister
	SubnetworkIamMemberListerExpansion
}

// subnetworkIamMemberLister implements the SubnetworkIamMemberLister interface.
type subnetworkIamMemberLister struct {
	indexer cache.Indexer
}

// NewSubnetworkIamMemberLister returns a new SubnetworkIamMemberLister.
func NewSubnetworkIamMemberLister(indexer cache.Indexer) SubnetworkIamMemberLister {
	return &subnetworkIamMemberLister{indexer: indexer}
}

// List lists all SubnetworkIamMembers in the indexer.
func (s *subnetworkIamMemberLister) List(selector labels.Selector) (ret []*v1alpha1.SubnetworkIamMember, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SubnetworkIamMember))
	})
	return ret, err
}

// SubnetworkIamMembers returns an object that can list and get SubnetworkIamMembers.
func (s *subnetworkIamMemberLister) SubnetworkIamMembers(namespace string) SubnetworkIamMemberNamespaceLister {
	return subnetworkIamMemberNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SubnetworkIamMemberNamespaceLister helps list and get SubnetworkIamMembers.
// All objects returned here must be treated as read-only.
type SubnetworkIamMemberNamespaceLister interface {
	// List lists all SubnetworkIamMembers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SubnetworkIamMember, err error)
	// Get retrieves the SubnetworkIamMember from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SubnetworkIamMember, error)
	SubnetworkIamMemberNamespaceListerExpansion
}

// subnetworkIamMemberNamespaceLister implements the SubnetworkIamMemberNamespaceLister
// interface.
type subnetworkIamMemberNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SubnetworkIamMembers in the indexer for a given namespace.
func (s subnetworkIamMemberNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SubnetworkIamMember, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SubnetworkIamMember))
	})
	return ret, err
}

// Get retrieves the SubnetworkIamMember from the indexer for a given namespace and name.
func (s subnetworkIamMemberNamespaceLister) Get(name string) (*v1alpha1.SubnetworkIamMember, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("subnetworkiammember"), name)
	}
	return obj.(*v1alpha1.SubnetworkIamMember), nil
}
