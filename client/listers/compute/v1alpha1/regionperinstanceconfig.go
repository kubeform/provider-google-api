/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/compute/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RegionPerInstanceConfigLister helps list RegionPerInstanceConfigs.
// All objects returned here must be treated as read-only.
type RegionPerInstanceConfigLister interface {
	// List lists all RegionPerInstanceConfigs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RegionPerInstanceConfig, err error)
	// RegionPerInstanceConfigs returns an object that can list and get RegionPerInstanceConfigs.
	RegionPerInstanceConfigs(namespace string) RegionPerInstanceConfigNamespaceLister
	RegionPerInstanceConfigListerExpansion
}

// regionPerInstanceConfigLister implements the RegionPerInstanceConfigLister interface.
type regionPerInstanceConfigLister struct {
	indexer cache.Indexer
}

// NewRegionPerInstanceConfigLister returns a new RegionPerInstanceConfigLister.
func NewRegionPerInstanceConfigLister(indexer cache.Indexer) RegionPerInstanceConfigLister {
	return &regionPerInstanceConfigLister{indexer: indexer}
}

// List lists all RegionPerInstanceConfigs in the indexer.
func (s *regionPerInstanceConfigLister) List(selector labels.Selector) (ret []*v1alpha1.RegionPerInstanceConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RegionPerInstanceConfig))
	})
	return ret, err
}

// RegionPerInstanceConfigs returns an object that can list and get RegionPerInstanceConfigs.
func (s *regionPerInstanceConfigLister) RegionPerInstanceConfigs(namespace string) RegionPerInstanceConfigNamespaceLister {
	return regionPerInstanceConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RegionPerInstanceConfigNamespaceLister helps list and get RegionPerInstanceConfigs.
// All objects returned here must be treated as read-only.
type RegionPerInstanceConfigNamespaceLister interface {
	// List lists all RegionPerInstanceConfigs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RegionPerInstanceConfig, err error)
	// Get retrieves the RegionPerInstanceConfig from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.RegionPerInstanceConfig, error)
	RegionPerInstanceConfigNamespaceListerExpansion
}

// regionPerInstanceConfigNamespaceLister implements the RegionPerInstanceConfigNamespaceLister
// interface.
type regionPerInstanceConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RegionPerInstanceConfigs in the indexer for a given namespace.
func (s regionPerInstanceConfigNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RegionPerInstanceConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RegionPerInstanceConfig))
	})
	return ret, err
}

// Get retrieves the RegionPerInstanceConfig from the indexer for a given namespace and name.
func (s regionPerInstanceConfigNamespaceLister) Get(name string) (*v1alpha1.RegionPerInstanceConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("regionperinstanceconfig"), name)
	}
	return obj.(*v1alpha1.RegionPerInstanceConfig), nil
}
