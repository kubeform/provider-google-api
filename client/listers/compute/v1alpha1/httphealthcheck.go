/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-google-api/apis/compute/v1alpha1"
)

// HttpHealthCheckLister helps list HttpHealthChecks.
// All objects returned here must be treated as read-only.
type HttpHealthCheckLister interface {
	// List lists all HttpHealthChecks in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HttpHealthCheck, err error)
	// HttpHealthChecks returns an object that can list and get HttpHealthChecks.
	HttpHealthChecks(namespace string) HttpHealthCheckNamespaceLister
	HttpHealthCheckListerExpansion
}

// httpHealthCheckLister implements the HttpHealthCheckLister interface.
type httpHealthCheckLister struct {
	indexer cache.Indexer
}

// NewHttpHealthCheckLister returns a new HttpHealthCheckLister.
func NewHttpHealthCheckLister(indexer cache.Indexer) HttpHealthCheckLister {
	return &httpHealthCheckLister{indexer: indexer}
}

// List lists all HttpHealthChecks in the indexer.
func (s *httpHealthCheckLister) List(selector labels.Selector) (ret []*v1alpha1.HttpHealthCheck, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HttpHealthCheck))
	})
	return ret, err
}

// HttpHealthChecks returns an object that can list and get HttpHealthChecks.
func (s *httpHealthCheckLister) HttpHealthChecks(namespace string) HttpHealthCheckNamespaceLister {
	return httpHealthCheckNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HttpHealthCheckNamespaceLister helps list and get HttpHealthChecks.
// All objects returned here must be treated as read-only.
type HttpHealthCheckNamespaceLister interface {
	// List lists all HttpHealthChecks in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HttpHealthCheck, err error)
	// Get retrieves the HttpHealthCheck from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.HttpHealthCheck, error)
	HttpHealthCheckNamespaceListerExpansion
}

// httpHealthCheckNamespaceLister implements the HttpHealthCheckNamespaceLister
// interface.
type httpHealthCheckNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all HttpHealthChecks in the indexer for a given namespace.
func (s httpHealthCheckNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.HttpHealthCheck, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HttpHealthCheck))
	})
	return ret, err
}

// Get retrieves the HttpHealthCheck from the indexer for a given namespace and name.
func (s httpHealthCheckNamespaceLister) Get(name string) (*v1alpha1.HttpHealthCheck, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("httphealthcheck"), name)
	}
	return obj.(*v1alpha1.HttpHealthCheck), nil
}
