/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-google-api/apis/compute/v1alpha1"
)

// BackendServiceLister helps list BackendServices.
// All objects returned here must be treated as read-only.
type BackendServiceLister interface {
	// List lists all BackendServices in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BackendService, err error)
	// BackendServices returns an object that can list and get BackendServices.
	BackendServices(namespace string) BackendServiceNamespaceLister
	BackendServiceListerExpansion
}

// backendServiceLister implements the BackendServiceLister interface.
type backendServiceLister struct {
	indexer cache.Indexer
}

// NewBackendServiceLister returns a new BackendServiceLister.
func NewBackendServiceLister(indexer cache.Indexer) BackendServiceLister {
	return &backendServiceLister{indexer: indexer}
}

// List lists all BackendServices in the indexer.
func (s *backendServiceLister) List(selector labels.Selector) (ret []*v1alpha1.BackendService, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BackendService))
	})
	return ret, err
}

// BackendServices returns an object that can list and get BackendServices.
func (s *backendServiceLister) BackendServices(namespace string) BackendServiceNamespaceLister {
	return backendServiceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BackendServiceNamespaceLister helps list and get BackendServices.
// All objects returned here must be treated as read-only.
type BackendServiceNamespaceLister interface {
	// List lists all BackendServices in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BackendService, err error)
	// Get retrieves the BackendService from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.BackendService, error)
	BackendServiceNamespaceListerExpansion
}

// backendServiceNamespaceLister implements the BackendServiceNamespaceLister
// interface.
type backendServiceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BackendServices in the indexer for a given namespace.
func (s backendServiceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BackendService, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BackendService))
	})
	return ret, err
}

// Get retrieves the BackendService from the indexer for a given namespace and name.
func (s backendServiceNamespaceLister) Get(name string) (*v1alpha1.BackendService, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("backendservice"), name)
	}
	return obj.(*v1alpha1.BackendService), nil
}
