/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-google-api/apis/compute/v1alpha1"
)

// ProjectMetadataLister helps list ProjectMetadatas.
// All objects returned here must be treated as read-only.
type ProjectMetadataLister interface {
	// List lists all ProjectMetadatas in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ProjectMetadata, err error)
	// ProjectMetadatas returns an object that can list and get ProjectMetadatas.
	ProjectMetadatas(namespace string) ProjectMetadataNamespaceLister
	ProjectMetadataListerExpansion
}

// projectMetadataLister implements the ProjectMetadataLister interface.
type projectMetadataLister struct {
	indexer cache.Indexer
}

// NewProjectMetadataLister returns a new ProjectMetadataLister.
func NewProjectMetadataLister(indexer cache.Indexer) ProjectMetadataLister {
	return &projectMetadataLister{indexer: indexer}
}

// List lists all ProjectMetadatas in the indexer.
func (s *projectMetadataLister) List(selector labels.Selector) (ret []*v1alpha1.ProjectMetadata, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ProjectMetadata))
	})
	return ret, err
}

// ProjectMetadatas returns an object that can list and get ProjectMetadatas.
func (s *projectMetadataLister) ProjectMetadatas(namespace string) ProjectMetadataNamespaceLister {
	return projectMetadataNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ProjectMetadataNamespaceLister helps list and get ProjectMetadatas.
// All objects returned here must be treated as read-only.
type ProjectMetadataNamespaceLister interface {
	// List lists all ProjectMetadatas in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ProjectMetadata, err error)
	// Get retrieves the ProjectMetadata from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ProjectMetadata, error)
	ProjectMetadataNamespaceListerExpansion
}

// projectMetadataNamespaceLister implements the ProjectMetadataNamespaceLister
// interface.
type projectMetadataNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ProjectMetadatas in the indexer for a given namespace.
func (s projectMetadataNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ProjectMetadata, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ProjectMetadata))
	})
	return ret, err
}

// Get retrieves the ProjectMetadata from the indexer for a given namespace and name.
func (s projectMetadataNamespaceLister) Get(name string) (*v1alpha1.ProjectMetadata, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("projectmetadata"), name)
	}
	return obj.(*v1alpha1.ProjectMetadata), nil
}
