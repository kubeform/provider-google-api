/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/compute/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PacketMirroringLister helps list PacketMirrorings.
// All objects returned here must be treated as read-only.
type PacketMirroringLister interface {
	// List lists all PacketMirrorings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PacketMirroring, err error)
	// PacketMirrorings returns an object that can list and get PacketMirrorings.
	PacketMirrorings(namespace string) PacketMirroringNamespaceLister
	PacketMirroringListerExpansion
}

// packetMirroringLister implements the PacketMirroringLister interface.
type packetMirroringLister struct {
	indexer cache.Indexer
}

// NewPacketMirroringLister returns a new PacketMirroringLister.
func NewPacketMirroringLister(indexer cache.Indexer) PacketMirroringLister {
	return &packetMirroringLister{indexer: indexer}
}

// List lists all PacketMirrorings in the indexer.
func (s *packetMirroringLister) List(selector labels.Selector) (ret []*v1alpha1.PacketMirroring, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PacketMirroring))
	})
	return ret, err
}

// PacketMirrorings returns an object that can list and get PacketMirrorings.
func (s *packetMirroringLister) PacketMirrorings(namespace string) PacketMirroringNamespaceLister {
	return packetMirroringNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PacketMirroringNamespaceLister helps list and get PacketMirrorings.
// All objects returned here must be treated as read-only.
type PacketMirroringNamespaceLister interface {
	// List lists all PacketMirrorings in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PacketMirroring, err error)
	// Get retrieves the PacketMirroring from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.PacketMirroring, error)
	PacketMirroringNamespaceListerExpansion
}

// packetMirroringNamespaceLister implements the PacketMirroringNamespaceLister
// interface.
type packetMirroringNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PacketMirrorings in the indexer for a given namespace.
func (s packetMirroringNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PacketMirroring, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PacketMirroring))
	})
	return ret, err
}

// Get retrieves the PacketMirroring from the indexer for a given namespace and name.
func (s packetMirroringNamespaceLister) Get(name string) (*v1alpha1.PacketMirroring, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("packetmirroring"), name)
	}
	return obj.(*v1alpha1.PacketMirroring), nil
}
