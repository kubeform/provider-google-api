/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/compute/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SharedVpcHostProjectLister helps list SharedVpcHostProjects.
// All objects returned here must be treated as read-only.
type SharedVpcHostProjectLister interface {
	// List lists all SharedVpcHostProjects in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SharedVpcHostProject, err error)
	// SharedVpcHostProjects returns an object that can list and get SharedVpcHostProjects.
	SharedVpcHostProjects(namespace string) SharedVpcHostProjectNamespaceLister
	SharedVpcHostProjectListerExpansion
}

// sharedVpcHostProjectLister implements the SharedVpcHostProjectLister interface.
type sharedVpcHostProjectLister struct {
	indexer cache.Indexer
}

// NewSharedVpcHostProjectLister returns a new SharedVpcHostProjectLister.
func NewSharedVpcHostProjectLister(indexer cache.Indexer) SharedVpcHostProjectLister {
	return &sharedVpcHostProjectLister{indexer: indexer}
}

// List lists all SharedVpcHostProjects in the indexer.
func (s *sharedVpcHostProjectLister) List(selector labels.Selector) (ret []*v1alpha1.SharedVpcHostProject, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SharedVpcHostProject))
	})
	return ret, err
}

// SharedVpcHostProjects returns an object that can list and get SharedVpcHostProjects.
func (s *sharedVpcHostProjectLister) SharedVpcHostProjects(namespace string) SharedVpcHostProjectNamespaceLister {
	return sharedVpcHostProjectNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SharedVpcHostProjectNamespaceLister helps list and get SharedVpcHostProjects.
// All objects returned here must be treated as read-only.
type SharedVpcHostProjectNamespaceLister interface {
	// List lists all SharedVpcHostProjects in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SharedVpcHostProject, err error)
	// Get retrieves the SharedVpcHostProject from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SharedVpcHostProject, error)
	SharedVpcHostProjectNamespaceListerExpansion
}

// sharedVpcHostProjectNamespaceLister implements the SharedVpcHostProjectNamespaceLister
// interface.
type sharedVpcHostProjectNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SharedVpcHostProjects in the indexer for a given namespace.
func (s sharedVpcHostProjectNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SharedVpcHostProject, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SharedVpcHostProject))
	})
	return ret, err
}

// Get retrieves the SharedVpcHostProject from the indexer for a given namespace and name.
func (s sharedVpcHostProjectNamespaceLister) Get(name string) (*v1alpha1.SharedVpcHostProject, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("sharedvpchostproject"), name)
	}
	return obj.(*v1alpha1.SharedVpcHostProject), nil
}
