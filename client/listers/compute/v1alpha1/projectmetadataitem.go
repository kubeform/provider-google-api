/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/compute/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ProjectMetadataItemLister helps list ProjectMetadataItems.
// All objects returned here must be treated as read-only.
type ProjectMetadataItemLister interface {
	// List lists all ProjectMetadataItems in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ProjectMetadataItem, err error)
	// ProjectMetadataItems returns an object that can list and get ProjectMetadataItems.
	ProjectMetadataItems(namespace string) ProjectMetadataItemNamespaceLister
	ProjectMetadataItemListerExpansion
}

// projectMetadataItemLister implements the ProjectMetadataItemLister interface.
type projectMetadataItemLister struct {
	indexer cache.Indexer
}

// NewProjectMetadataItemLister returns a new ProjectMetadataItemLister.
func NewProjectMetadataItemLister(indexer cache.Indexer) ProjectMetadataItemLister {
	return &projectMetadataItemLister{indexer: indexer}
}

// List lists all ProjectMetadataItems in the indexer.
func (s *projectMetadataItemLister) List(selector labels.Selector) (ret []*v1alpha1.ProjectMetadataItem, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ProjectMetadataItem))
	})
	return ret, err
}

// ProjectMetadataItems returns an object that can list and get ProjectMetadataItems.
func (s *projectMetadataItemLister) ProjectMetadataItems(namespace string) ProjectMetadataItemNamespaceLister {
	return projectMetadataItemNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ProjectMetadataItemNamespaceLister helps list and get ProjectMetadataItems.
// All objects returned here must be treated as read-only.
type ProjectMetadataItemNamespaceLister interface {
	// List lists all ProjectMetadataItems in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ProjectMetadataItem, err error)
	// Get retrieves the ProjectMetadataItem from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ProjectMetadataItem, error)
	ProjectMetadataItemNamespaceListerExpansion
}

// projectMetadataItemNamespaceLister implements the ProjectMetadataItemNamespaceLister
// interface.
type projectMetadataItemNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ProjectMetadataItems in the indexer for a given namespace.
func (s projectMetadataItemNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ProjectMetadataItem, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ProjectMetadataItem))
	})
	return ret, err
}

// Get retrieves the ProjectMetadataItem from the indexer for a given namespace and name.
func (s projectMetadataItemNamespaceLister) Get(name string) (*v1alpha1.ProjectMetadataItem, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("projectmetadataitem"), name)
	}
	return obj.(*v1alpha1.ProjectMetadataItem), nil
}
