/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/compute/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RegionAutoscalerLister helps list RegionAutoscalers.
// All objects returned here must be treated as read-only.
type RegionAutoscalerLister interface {
	// List lists all RegionAutoscalers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RegionAutoscaler, err error)
	// RegionAutoscalers returns an object that can list and get RegionAutoscalers.
	RegionAutoscalers(namespace string) RegionAutoscalerNamespaceLister
	RegionAutoscalerListerExpansion
}

// regionAutoscalerLister implements the RegionAutoscalerLister interface.
type regionAutoscalerLister struct {
	indexer cache.Indexer
}

// NewRegionAutoscalerLister returns a new RegionAutoscalerLister.
func NewRegionAutoscalerLister(indexer cache.Indexer) RegionAutoscalerLister {
	return &regionAutoscalerLister{indexer: indexer}
}

// List lists all RegionAutoscalers in the indexer.
func (s *regionAutoscalerLister) List(selector labels.Selector) (ret []*v1alpha1.RegionAutoscaler, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RegionAutoscaler))
	})
	return ret, err
}

// RegionAutoscalers returns an object that can list and get RegionAutoscalers.
func (s *regionAutoscalerLister) RegionAutoscalers(namespace string) RegionAutoscalerNamespaceLister {
	return regionAutoscalerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RegionAutoscalerNamespaceLister helps list and get RegionAutoscalers.
// All objects returned here must be treated as read-only.
type RegionAutoscalerNamespaceLister interface {
	// List lists all RegionAutoscalers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RegionAutoscaler, err error)
	// Get retrieves the RegionAutoscaler from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.RegionAutoscaler, error)
	RegionAutoscalerNamespaceListerExpansion
}

// regionAutoscalerNamespaceLister implements the RegionAutoscalerNamespaceLister
// interface.
type regionAutoscalerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RegionAutoscalers in the indexer for a given namespace.
func (s regionAutoscalerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RegionAutoscaler, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RegionAutoscaler))
	})
	return ret, err
}

// Get retrieves the RegionAutoscaler from the indexer for a given namespace and name.
func (s regionAutoscalerNamespaceLister) Get(name string) (*v1alpha1.RegionAutoscaler, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("regionautoscaler"), name)
	}
	return obj.(*v1alpha1.RegionAutoscaler), nil
}
