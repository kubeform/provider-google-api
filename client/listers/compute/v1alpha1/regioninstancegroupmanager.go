/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/compute/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RegionInstanceGroupManagerLister helps list RegionInstanceGroupManagers.
// All objects returned here must be treated as read-only.
type RegionInstanceGroupManagerLister interface {
	// List lists all RegionInstanceGroupManagers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RegionInstanceGroupManager, err error)
	// RegionInstanceGroupManagers returns an object that can list and get RegionInstanceGroupManagers.
	RegionInstanceGroupManagers(namespace string) RegionInstanceGroupManagerNamespaceLister
	RegionInstanceGroupManagerListerExpansion
}

// regionInstanceGroupManagerLister implements the RegionInstanceGroupManagerLister interface.
type regionInstanceGroupManagerLister struct {
	indexer cache.Indexer
}

// NewRegionInstanceGroupManagerLister returns a new RegionInstanceGroupManagerLister.
func NewRegionInstanceGroupManagerLister(indexer cache.Indexer) RegionInstanceGroupManagerLister {
	return &regionInstanceGroupManagerLister{indexer: indexer}
}

// List lists all RegionInstanceGroupManagers in the indexer.
func (s *regionInstanceGroupManagerLister) List(selector labels.Selector) (ret []*v1alpha1.RegionInstanceGroupManager, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RegionInstanceGroupManager))
	})
	return ret, err
}

// RegionInstanceGroupManagers returns an object that can list and get RegionInstanceGroupManagers.
func (s *regionInstanceGroupManagerLister) RegionInstanceGroupManagers(namespace string) RegionInstanceGroupManagerNamespaceLister {
	return regionInstanceGroupManagerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RegionInstanceGroupManagerNamespaceLister helps list and get RegionInstanceGroupManagers.
// All objects returned here must be treated as read-only.
type RegionInstanceGroupManagerNamespaceLister interface {
	// List lists all RegionInstanceGroupManagers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RegionInstanceGroupManager, err error)
	// Get retrieves the RegionInstanceGroupManager from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.RegionInstanceGroupManager, error)
	RegionInstanceGroupManagerNamespaceListerExpansion
}

// regionInstanceGroupManagerNamespaceLister implements the RegionInstanceGroupManagerNamespaceLister
// interface.
type regionInstanceGroupManagerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RegionInstanceGroupManagers in the indexer for a given namespace.
func (s regionInstanceGroupManagerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RegionInstanceGroupManager, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RegionInstanceGroupManager))
	})
	return ret, err
}

// Get retrieves the RegionInstanceGroupManager from the indexer for a given namespace and name.
func (s regionInstanceGroupManagerNamespaceLister) Get(name string) (*v1alpha1.RegionInstanceGroupManager, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("regioninstancegroupmanager"), name)
	}
	return obj.(*v1alpha1.RegionInstanceGroupManager), nil
}
