/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-google-api/apis/compute/v1alpha1"
)

// RouterInterfaceLister helps list RouterInterfaces.
// All objects returned here must be treated as read-only.
type RouterInterfaceLister interface {
	// List lists all RouterInterfaces in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RouterInterface, err error)
	// RouterInterfaces returns an object that can list and get RouterInterfaces.
	RouterInterfaces(namespace string) RouterInterfaceNamespaceLister
	RouterInterfaceListerExpansion
}

// routerInterfaceLister implements the RouterInterfaceLister interface.
type routerInterfaceLister struct {
	indexer cache.Indexer
}

// NewRouterInterfaceLister returns a new RouterInterfaceLister.
func NewRouterInterfaceLister(indexer cache.Indexer) RouterInterfaceLister {
	return &routerInterfaceLister{indexer: indexer}
}

// List lists all RouterInterfaces in the indexer.
func (s *routerInterfaceLister) List(selector labels.Selector) (ret []*v1alpha1.RouterInterface, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RouterInterface))
	})
	return ret, err
}

// RouterInterfaces returns an object that can list and get RouterInterfaces.
func (s *routerInterfaceLister) RouterInterfaces(namespace string) RouterInterfaceNamespaceLister {
	return routerInterfaceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RouterInterfaceNamespaceLister helps list and get RouterInterfaces.
// All objects returned here must be treated as read-only.
type RouterInterfaceNamespaceLister interface {
	// List lists all RouterInterfaces in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RouterInterface, err error)
	// Get retrieves the RouterInterface from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.RouterInterface, error)
	RouterInterfaceNamespaceListerExpansion
}

// routerInterfaceNamespaceLister implements the RouterInterfaceNamespaceLister
// interface.
type routerInterfaceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RouterInterfaces in the indexer for a given namespace.
func (s routerInterfaceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RouterInterface, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RouterInterface))
	})
	return ret, err
}

// Get retrieves the RouterInterface from the indexer for a given namespace and name.
func (s routerInterfaceNamespaceLister) Get(name string) (*v1alpha1.RouterInterface, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("routerinterface"), name)
	}
	return obj.(*v1alpha1.RouterInterface), nil
}
