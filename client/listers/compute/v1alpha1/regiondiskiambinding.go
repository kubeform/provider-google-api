/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-google-api/apis/compute/v1alpha1"
)

// RegionDiskIamBindingLister helps list RegionDiskIamBindings.
// All objects returned here must be treated as read-only.
type RegionDiskIamBindingLister interface {
	// List lists all RegionDiskIamBindings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RegionDiskIamBinding, err error)
	// RegionDiskIamBindings returns an object that can list and get RegionDiskIamBindings.
	RegionDiskIamBindings(namespace string) RegionDiskIamBindingNamespaceLister
	RegionDiskIamBindingListerExpansion
}

// regionDiskIamBindingLister implements the RegionDiskIamBindingLister interface.
type regionDiskIamBindingLister struct {
	indexer cache.Indexer
}

// NewRegionDiskIamBindingLister returns a new RegionDiskIamBindingLister.
func NewRegionDiskIamBindingLister(indexer cache.Indexer) RegionDiskIamBindingLister {
	return &regionDiskIamBindingLister{indexer: indexer}
}

// List lists all RegionDiskIamBindings in the indexer.
func (s *regionDiskIamBindingLister) List(selector labels.Selector) (ret []*v1alpha1.RegionDiskIamBinding, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RegionDiskIamBinding))
	})
	return ret, err
}

// RegionDiskIamBindings returns an object that can list and get RegionDiskIamBindings.
func (s *regionDiskIamBindingLister) RegionDiskIamBindings(namespace string) RegionDiskIamBindingNamespaceLister {
	return regionDiskIamBindingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RegionDiskIamBindingNamespaceLister helps list and get RegionDiskIamBindings.
// All objects returned here must be treated as read-only.
type RegionDiskIamBindingNamespaceLister interface {
	// List lists all RegionDiskIamBindings in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RegionDiskIamBinding, err error)
	// Get retrieves the RegionDiskIamBinding from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.RegionDiskIamBinding, error)
	RegionDiskIamBindingNamespaceListerExpansion
}

// regionDiskIamBindingNamespaceLister implements the RegionDiskIamBindingNamespaceLister
// interface.
type regionDiskIamBindingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RegionDiskIamBindings in the indexer for a given namespace.
func (s regionDiskIamBindingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RegionDiskIamBinding, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RegionDiskIamBinding))
	})
	return ret, err
}

// Get retrieves the RegionDiskIamBinding from the indexer for a given namespace and name.
func (s regionDiskIamBindingNamespaceLister) Get(name string) (*v1alpha1.RegionDiskIamBinding, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("regiondiskiambinding"), name)
	}
	return obj.(*v1alpha1.RegionDiskIamBinding), nil
}
