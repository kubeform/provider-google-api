/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/compute/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ImageIamPolicyLister helps list ImageIamPolicies.
// All objects returned here must be treated as read-only.
type ImageIamPolicyLister interface {
	// List lists all ImageIamPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ImageIamPolicy, err error)
	// ImageIamPolicies returns an object that can list and get ImageIamPolicies.
	ImageIamPolicies(namespace string) ImageIamPolicyNamespaceLister
	ImageIamPolicyListerExpansion
}

// imageIamPolicyLister implements the ImageIamPolicyLister interface.
type imageIamPolicyLister struct {
	indexer cache.Indexer
}

// NewImageIamPolicyLister returns a new ImageIamPolicyLister.
func NewImageIamPolicyLister(indexer cache.Indexer) ImageIamPolicyLister {
	return &imageIamPolicyLister{indexer: indexer}
}

// List lists all ImageIamPolicies in the indexer.
func (s *imageIamPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.ImageIamPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ImageIamPolicy))
	})
	return ret, err
}

// ImageIamPolicies returns an object that can list and get ImageIamPolicies.
func (s *imageIamPolicyLister) ImageIamPolicies(namespace string) ImageIamPolicyNamespaceLister {
	return imageIamPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ImageIamPolicyNamespaceLister helps list and get ImageIamPolicies.
// All objects returned here must be treated as read-only.
type ImageIamPolicyNamespaceLister interface {
	// List lists all ImageIamPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ImageIamPolicy, err error)
	// Get retrieves the ImageIamPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ImageIamPolicy, error)
	ImageIamPolicyNamespaceListerExpansion
}

// imageIamPolicyNamespaceLister implements the ImageIamPolicyNamespaceLister
// interface.
type imageIamPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ImageIamPolicies in the indexer for a given namespace.
func (s imageIamPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ImageIamPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ImageIamPolicy))
	})
	return ret, err
}

// Get retrieves the ImageIamPolicy from the indexer for a given namespace and name.
func (s imageIamPolicyNamespaceLister) Get(name string) (*v1alpha1.ImageIamPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("imageiampolicy"), name)
	}
	return obj.(*v1alpha1.ImageIamPolicy), nil
}
