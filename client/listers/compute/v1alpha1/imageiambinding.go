/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-google-api/apis/compute/v1alpha1"
)

// ImageIamBindingLister helps list ImageIamBindings.
// All objects returned here must be treated as read-only.
type ImageIamBindingLister interface {
	// List lists all ImageIamBindings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ImageIamBinding, err error)
	// ImageIamBindings returns an object that can list and get ImageIamBindings.
	ImageIamBindings(namespace string) ImageIamBindingNamespaceLister
	ImageIamBindingListerExpansion
}

// imageIamBindingLister implements the ImageIamBindingLister interface.
type imageIamBindingLister struct {
	indexer cache.Indexer
}

// NewImageIamBindingLister returns a new ImageIamBindingLister.
func NewImageIamBindingLister(indexer cache.Indexer) ImageIamBindingLister {
	return &imageIamBindingLister{indexer: indexer}
}

// List lists all ImageIamBindings in the indexer.
func (s *imageIamBindingLister) List(selector labels.Selector) (ret []*v1alpha1.ImageIamBinding, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ImageIamBinding))
	})
	return ret, err
}

// ImageIamBindings returns an object that can list and get ImageIamBindings.
func (s *imageIamBindingLister) ImageIamBindings(namespace string) ImageIamBindingNamespaceLister {
	return imageIamBindingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ImageIamBindingNamespaceLister helps list and get ImageIamBindings.
// All objects returned here must be treated as read-only.
type ImageIamBindingNamespaceLister interface {
	// List lists all ImageIamBindings in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ImageIamBinding, err error)
	// Get retrieves the ImageIamBinding from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ImageIamBinding, error)
	ImageIamBindingNamespaceListerExpansion
}

// imageIamBindingNamespaceLister implements the ImageIamBindingNamespaceLister
// interface.
type imageIamBindingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ImageIamBindings in the indexer for a given namespace.
func (s imageIamBindingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ImageIamBinding, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ImageIamBinding))
	})
	return ret, err
}

// Get retrieves the ImageIamBinding from the indexer for a given namespace and name.
func (s imageIamBindingNamespaceLister) Get(name string) (*v1alpha1.ImageIamBinding, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("imageiambinding"), name)
	}
	return obj.(*v1alpha1.ImageIamBinding), nil
}
