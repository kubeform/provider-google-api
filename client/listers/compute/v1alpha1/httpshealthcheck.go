/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/compute/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// HttpsHealthCheckLister helps list HttpsHealthChecks.
// All objects returned here must be treated as read-only.
type HttpsHealthCheckLister interface {
	// List lists all HttpsHealthChecks in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HttpsHealthCheck, err error)
	// HttpsHealthChecks returns an object that can list and get HttpsHealthChecks.
	HttpsHealthChecks(namespace string) HttpsHealthCheckNamespaceLister
	HttpsHealthCheckListerExpansion
}

// httpsHealthCheckLister implements the HttpsHealthCheckLister interface.
type httpsHealthCheckLister struct {
	indexer cache.Indexer
}

// NewHttpsHealthCheckLister returns a new HttpsHealthCheckLister.
func NewHttpsHealthCheckLister(indexer cache.Indexer) HttpsHealthCheckLister {
	return &httpsHealthCheckLister{indexer: indexer}
}

// List lists all HttpsHealthChecks in the indexer.
func (s *httpsHealthCheckLister) List(selector labels.Selector) (ret []*v1alpha1.HttpsHealthCheck, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HttpsHealthCheck))
	})
	return ret, err
}

// HttpsHealthChecks returns an object that can list and get HttpsHealthChecks.
func (s *httpsHealthCheckLister) HttpsHealthChecks(namespace string) HttpsHealthCheckNamespaceLister {
	return httpsHealthCheckNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HttpsHealthCheckNamespaceLister helps list and get HttpsHealthChecks.
// All objects returned here must be treated as read-only.
type HttpsHealthCheckNamespaceLister interface {
	// List lists all HttpsHealthChecks in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HttpsHealthCheck, err error)
	// Get retrieves the HttpsHealthCheck from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.HttpsHealthCheck, error)
	HttpsHealthCheckNamespaceListerExpansion
}

// httpsHealthCheckNamespaceLister implements the HttpsHealthCheckNamespaceLister
// interface.
type httpsHealthCheckNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all HttpsHealthChecks in the indexer for a given namespace.
func (s httpsHealthCheckNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.HttpsHealthCheck, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HttpsHealthCheck))
	})
	return ret, err
}

// Get retrieves the HttpsHealthCheck from the indexer for a given namespace and name.
func (s httpsHealthCheckNamespaceLister) Get(name string) (*v1alpha1.HttpsHealthCheck, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("httpshealthcheck"), name)
	}
	return obj.(*v1alpha1.HttpsHealthCheck), nil
}
