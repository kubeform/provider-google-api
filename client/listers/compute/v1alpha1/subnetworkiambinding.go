/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/compute/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SubnetworkIamBindingLister helps list SubnetworkIamBindings.
// All objects returned here must be treated as read-only.
type SubnetworkIamBindingLister interface {
	// List lists all SubnetworkIamBindings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SubnetworkIamBinding, err error)
	// SubnetworkIamBindings returns an object that can list and get SubnetworkIamBindings.
	SubnetworkIamBindings(namespace string) SubnetworkIamBindingNamespaceLister
	SubnetworkIamBindingListerExpansion
}

// subnetworkIamBindingLister implements the SubnetworkIamBindingLister interface.
type subnetworkIamBindingLister struct {
	indexer cache.Indexer
}

// NewSubnetworkIamBindingLister returns a new SubnetworkIamBindingLister.
func NewSubnetworkIamBindingLister(indexer cache.Indexer) SubnetworkIamBindingLister {
	return &subnetworkIamBindingLister{indexer: indexer}
}

// List lists all SubnetworkIamBindings in the indexer.
func (s *subnetworkIamBindingLister) List(selector labels.Selector) (ret []*v1alpha1.SubnetworkIamBinding, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SubnetworkIamBinding))
	})
	return ret, err
}

// SubnetworkIamBindings returns an object that can list and get SubnetworkIamBindings.
func (s *subnetworkIamBindingLister) SubnetworkIamBindings(namespace string) SubnetworkIamBindingNamespaceLister {
	return subnetworkIamBindingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SubnetworkIamBindingNamespaceLister helps list and get SubnetworkIamBindings.
// All objects returned here must be treated as read-only.
type SubnetworkIamBindingNamespaceLister interface {
	// List lists all SubnetworkIamBindings in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SubnetworkIamBinding, err error)
	// Get retrieves the SubnetworkIamBinding from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SubnetworkIamBinding, error)
	SubnetworkIamBindingNamespaceListerExpansion
}

// subnetworkIamBindingNamespaceLister implements the SubnetworkIamBindingNamespaceLister
// interface.
type subnetworkIamBindingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SubnetworkIamBindings in the indexer for a given namespace.
func (s subnetworkIamBindingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SubnetworkIamBinding, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SubnetworkIamBinding))
	})
	return ret, err
}

// Get retrieves the SubnetworkIamBinding from the indexer for a given namespace and name.
func (s subnetworkIamBindingNamespaceLister) Get(name string) (*v1alpha1.SubnetworkIamBinding, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("subnetworkiambinding"), name)
	}
	return obj.(*v1alpha1.SubnetworkIamBinding), nil
}
