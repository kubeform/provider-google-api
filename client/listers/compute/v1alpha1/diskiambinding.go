/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/compute/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DiskIamBindingLister helps list DiskIamBindings.
// All objects returned here must be treated as read-only.
type DiskIamBindingLister interface {
	// List lists all DiskIamBindings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DiskIamBinding, err error)
	// DiskIamBindings returns an object that can list and get DiskIamBindings.
	DiskIamBindings(namespace string) DiskIamBindingNamespaceLister
	DiskIamBindingListerExpansion
}

// diskIamBindingLister implements the DiskIamBindingLister interface.
type diskIamBindingLister struct {
	indexer cache.Indexer
}

// NewDiskIamBindingLister returns a new DiskIamBindingLister.
func NewDiskIamBindingLister(indexer cache.Indexer) DiskIamBindingLister {
	return &diskIamBindingLister{indexer: indexer}
}

// List lists all DiskIamBindings in the indexer.
func (s *diskIamBindingLister) List(selector labels.Selector) (ret []*v1alpha1.DiskIamBinding, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DiskIamBinding))
	})
	return ret, err
}

// DiskIamBindings returns an object that can list and get DiskIamBindings.
func (s *diskIamBindingLister) DiskIamBindings(namespace string) DiskIamBindingNamespaceLister {
	return diskIamBindingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DiskIamBindingNamespaceLister helps list and get DiskIamBindings.
// All objects returned here must be treated as read-only.
type DiskIamBindingNamespaceLister interface {
	// List lists all DiskIamBindings in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DiskIamBinding, err error)
	// Get retrieves the DiskIamBinding from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DiskIamBinding, error)
	DiskIamBindingNamespaceListerExpansion
}

// diskIamBindingNamespaceLister implements the DiskIamBindingNamespaceLister
// interface.
type diskIamBindingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DiskIamBindings in the indexer for a given namespace.
func (s diskIamBindingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DiskIamBinding, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DiskIamBinding))
	})
	return ret, err
}

// Get retrieves the DiskIamBinding from the indexer for a given namespace and name.
func (s diskIamBindingNamespaceLister) Get(name string) (*v1alpha1.DiskIamBinding, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("diskiambinding"), name)
	}
	return obj.(*v1alpha1.DiskIamBinding), nil
}
