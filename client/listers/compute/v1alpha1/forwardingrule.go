/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-google-api/apis/compute/v1alpha1"
)

// ForwardingRuleLister helps list ForwardingRules.
// All objects returned here must be treated as read-only.
type ForwardingRuleLister interface {
	// List lists all ForwardingRules in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ForwardingRule, err error)
	// ForwardingRules returns an object that can list and get ForwardingRules.
	ForwardingRules(namespace string) ForwardingRuleNamespaceLister
	ForwardingRuleListerExpansion
}

// forwardingRuleLister implements the ForwardingRuleLister interface.
type forwardingRuleLister struct {
	indexer cache.Indexer
}

// NewForwardingRuleLister returns a new ForwardingRuleLister.
func NewForwardingRuleLister(indexer cache.Indexer) ForwardingRuleLister {
	return &forwardingRuleLister{indexer: indexer}
}

// List lists all ForwardingRules in the indexer.
func (s *forwardingRuleLister) List(selector labels.Selector) (ret []*v1alpha1.ForwardingRule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ForwardingRule))
	})
	return ret, err
}

// ForwardingRules returns an object that can list and get ForwardingRules.
func (s *forwardingRuleLister) ForwardingRules(namespace string) ForwardingRuleNamespaceLister {
	return forwardingRuleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ForwardingRuleNamespaceLister helps list and get ForwardingRules.
// All objects returned here must be treated as read-only.
type ForwardingRuleNamespaceLister interface {
	// List lists all ForwardingRules in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ForwardingRule, err error)
	// Get retrieves the ForwardingRule from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ForwardingRule, error)
	ForwardingRuleNamespaceListerExpansion
}

// forwardingRuleNamespaceLister implements the ForwardingRuleNamespaceLister
// interface.
type forwardingRuleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ForwardingRules in the indexer for a given namespace.
func (s forwardingRuleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ForwardingRule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ForwardingRule))
	})
	return ret, err
}

// Get retrieves the ForwardingRule from the indexer for a given namespace and name.
func (s forwardingRuleNamespaceLister) Get(name string) (*v1alpha1.ForwardingRule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("forwardingrule"), name)
	}
	return obj.(*v1alpha1.ForwardingRule), nil
}
