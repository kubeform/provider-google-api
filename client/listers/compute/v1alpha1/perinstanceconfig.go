/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-google-api/apis/compute/v1alpha1"
)

// PerInstanceConfigLister helps list PerInstanceConfigs.
// All objects returned here must be treated as read-only.
type PerInstanceConfigLister interface {
	// List lists all PerInstanceConfigs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PerInstanceConfig, err error)
	// PerInstanceConfigs returns an object that can list and get PerInstanceConfigs.
	PerInstanceConfigs(namespace string) PerInstanceConfigNamespaceLister
	PerInstanceConfigListerExpansion
}

// perInstanceConfigLister implements the PerInstanceConfigLister interface.
type perInstanceConfigLister struct {
	indexer cache.Indexer
}

// NewPerInstanceConfigLister returns a new PerInstanceConfigLister.
func NewPerInstanceConfigLister(indexer cache.Indexer) PerInstanceConfigLister {
	return &perInstanceConfigLister{indexer: indexer}
}

// List lists all PerInstanceConfigs in the indexer.
func (s *perInstanceConfigLister) List(selector labels.Selector) (ret []*v1alpha1.PerInstanceConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PerInstanceConfig))
	})
	return ret, err
}

// PerInstanceConfigs returns an object that can list and get PerInstanceConfigs.
func (s *perInstanceConfigLister) PerInstanceConfigs(namespace string) PerInstanceConfigNamespaceLister {
	return perInstanceConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PerInstanceConfigNamespaceLister helps list and get PerInstanceConfigs.
// All objects returned here must be treated as read-only.
type PerInstanceConfigNamespaceLister interface {
	// List lists all PerInstanceConfigs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PerInstanceConfig, err error)
	// Get retrieves the PerInstanceConfig from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.PerInstanceConfig, error)
	PerInstanceConfigNamespaceListerExpansion
}

// perInstanceConfigNamespaceLister implements the PerInstanceConfigNamespaceLister
// interface.
type perInstanceConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PerInstanceConfigs in the indexer for a given namespace.
func (s perInstanceConfigNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PerInstanceConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PerInstanceConfig))
	})
	return ret, err
}

// Get retrieves the PerInstanceConfig from the indexer for a given namespace and name.
func (s perInstanceConfigNamespaceLister) Get(name string) (*v1alpha1.PerInstanceConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("perinstanceconfig"), name)
	}
	return obj.(*v1alpha1.PerInstanceConfig), nil
}
