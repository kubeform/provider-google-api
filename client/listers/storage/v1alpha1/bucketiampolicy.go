/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/storage/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BucketIamPolicyLister helps list BucketIamPolicies.
// All objects returned here must be treated as read-only.
type BucketIamPolicyLister interface {
	// List lists all BucketIamPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BucketIamPolicy, err error)
	// BucketIamPolicies returns an object that can list and get BucketIamPolicies.
	BucketIamPolicies(namespace string) BucketIamPolicyNamespaceLister
	BucketIamPolicyListerExpansion
}

// bucketIamPolicyLister implements the BucketIamPolicyLister interface.
type bucketIamPolicyLister struct {
	indexer cache.Indexer
}

// NewBucketIamPolicyLister returns a new BucketIamPolicyLister.
func NewBucketIamPolicyLister(indexer cache.Indexer) BucketIamPolicyLister {
	return &bucketIamPolicyLister{indexer: indexer}
}

// List lists all BucketIamPolicies in the indexer.
func (s *bucketIamPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.BucketIamPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BucketIamPolicy))
	})
	return ret, err
}

// BucketIamPolicies returns an object that can list and get BucketIamPolicies.
func (s *bucketIamPolicyLister) BucketIamPolicies(namespace string) BucketIamPolicyNamespaceLister {
	return bucketIamPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BucketIamPolicyNamespaceLister helps list and get BucketIamPolicies.
// All objects returned here must be treated as read-only.
type BucketIamPolicyNamespaceLister interface {
	// List lists all BucketIamPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BucketIamPolicy, err error)
	// Get retrieves the BucketIamPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.BucketIamPolicy, error)
	BucketIamPolicyNamespaceListerExpansion
}

// bucketIamPolicyNamespaceLister implements the BucketIamPolicyNamespaceLister
// interface.
type bucketIamPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BucketIamPolicies in the indexer for a given namespace.
func (s bucketIamPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BucketIamPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BucketIamPolicy))
	})
	return ret, err
}

// Get retrieves the BucketIamPolicy from the indexer for a given namespace and name.
func (s bucketIamPolicyNamespaceLister) Get(name string) (*v1alpha1.BucketIamPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("bucketiampolicy"), name)
	}
	return obj.(*v1alpha1.BucketIamPolicy), nil
}
