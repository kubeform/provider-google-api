/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/storage/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DefaultObjectACLLister helps list DefaultObjectACLs.
// All objects returned here must be treated as read-only.
type DefaultObjectACLLister interface {
	// List lists all DefaultObjectACLs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DefaultObjectACL, err error)
	// DefaultObjectACLs returns an object that can list and get DefaultObjectACLs.
	DefaultObjectACLs(namespace string) DefaultObjectACLNamespaceLister
	DefaultObjectACLListerExpansion
}

// defaultObjectACLLister implements the DefaultObjectACLLister interface.
type defaultObjectACLLister struct {
	indexer cache.Indexer
}

// NewDefaultObjectACLLister returns a new DefaultObjectACLLister.
func NewDefaultObjectACLLister(indexer cache.Indexer) DefaultObjectACLLister {
	return &defaultObjectACLLister{indexer: indexer}
}

// List lists all DefaultObjectACLs in the indexer.
func (s *defaultObjectACLLister) List(selector labels.Selector) (ret []*v1alpha1.DefaultObjectACL, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DefaultObjectACL))
	})
	return ret, err
}

// DefaultObjectACLs returns an object that can list and get DefaultObjectACLs.
func (s *defaultObjectACLLister) DefaultObjectACLs(namespace string) DefaultObjectACLNamespaceLister {
	return defaultObjectACLNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DefaultObjectACLNamespaceLister helps list and get DefaultObjectACLs.
// All objects returned here must be treated as read-only.
type DefaultObjectACLNamespaceLister interface {
	// List lists all DefaultObjectACLs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DefaultObjectACL, err error)
	// Get retrieves the DefaultObjectACL from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DefaultObjectACL, error)
	DefaultObjectACLNamespaceListerExpansion
}

// defaultObjectACLNamespaceLister implements the DefaultObjectACLNamespaceLister
// interface.
type defaultObjectACLNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DefaultObjectACLs in the indexer for a given namespace.
func (s defaultObjectACLNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DefaultObjectACL, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DefaultObjectACL))
	})
	return ret, err
}

// Get retrieves the DefaultObjectACL from the indexer for a given namespace and name.
func (s defaultObjectACLNamespaceLister) Get(name string) (*v1alpha1.DefaultObjectACL, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("defaultobjectacl"), name)
	}
	return obj.(*v1alpha1.DefaultObjectACL), nil
}
