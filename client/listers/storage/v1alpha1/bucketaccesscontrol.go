/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-google-api/apis/storage/v1alpha1"
)

// BucketAccessControlLister helps list BucketAccessControls.
// All objects returned here must be treated as read-only.
type BucketAccessControlLister interface {
	// List lists all BucketAccessControls in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BucketAccessControl, err error)
	// BucketAccessControls returns an object that can list and get BucketAccessControls.
	BucketAccessControls(namespace string) BucketAccessControlNamespaceLister
	BucketAccessControlListerExpansion
}

// bucketAccessControlLister implements the BucketAccessControlLister interface.
type bucketAccessControlLister struct {
	indexer cache.Indexer
}

// NewBucketAccessControlLister returns a new BucketAccessControlLister.
func NewBucketAccessControlLister(indexer cache.Indexer) BucketAccessControlLister {
	return &bucketAccessControlLister{indexer: indexer}
}

// List lists all BucketAccessControls in the indexer.
func (s *bucketAccessControlLister) List(selector labels.Selector) (ret []*v1alpha1.BucketAccessControl, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BucketAccessControl))
	})
	return ret, err
}

// BucketAccessControls returns an object that can list and get BucketAccessControls.
func (s *bucketAccessControlLister) BucketAccessControls(namespace string) BucketAccessControlNamespaceLister {
	return bucketAccessControlNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BucketAccessControlNamespaceLister helps list and get BucketAccessControls.
// All objects returned here must be treated as read-only.
type BucketAccessControlNamespaceLister interface {
	// List lists all BucketAccessControls in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BucketAccessControl, err error)
	// Get retrieves the BucketAccessControl from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.BucketAccessControl, error)
	BucketAccessControlNamespaceListerExpansion
}

// bucketAccessControlNamespaceLister implements the BucketAccessControlNamespaceLister
// interface.
type bucketAccessControlNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BucketAccessControls in the indexer for a given namespace.
func (s bucketAccessControlNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BucketAccessControl, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BucketAccessControl))
	})
	return ret, err
}

// Get retrieves the BucketAccessControl from the indexer for a given namespace and name.
func (s bucketAccessControlNamespaceLister) Get(name string) (*v1alpha1.BucketAccessControl, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("bucketaccesscontrol"), name)
	}
	return obj.(*v1alpha1.BucketAccessControl), nil
}
