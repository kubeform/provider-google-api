/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-google-api/apis/storage/v1alpha1"
)

// DefaultObjectAccessControlLister helps list DefaultObjectAccessControls.
// All objects returned here must be treated as read-only.
type DefaultObjectAccessControlLister interface {
	// List lists all DefaultObjectAccessControls in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DefaultObjectAccessControl, err error)
	// DefaultObjectAccessControls returns an object that can list and get DefaultObjectAccessControls.
	DefaultObjectAccessControls(namespace string) DefaultObjectAccessControlNamespaceLister
	DefaultObjectAccessControlListerExpansion
}

// defaultObjectAccessControlLister implements the DefaultObjectAccessControlLister interface.
type defaultObjectAccessControlLister struct {
	indexer cache.Indexer
}

// NewDefaultObjectAccessControlLister returns a new DefaultObjectAccessControlLister.
func NewDefaultObjectAccessControlLister(indexer cache.Indexer) DefaultObjectAccessControlLister {
	return &defaultObjectAccessControlLister{indexer: indexer}
}

// List lists all DefaultObjectAccessControls in the indexer.
func (s *defaultObjectAccessControlLister) List(selector labels.Selector) (ret []*v1alpha1.DefaultObjectAccessControl, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DefaultObjectAccessControl))
	})
	return ret, err
}

// DefaultObjectAccessControls returns an object that can list and get DefaultObjectAccessControls.
func (s *defaultObjectAccessControlLister) DefaultObjectAccessControls(namespace string) DefaultObjectAccessControlNamespaceLister {
	return defaultObjectAccessControlNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DefaultObjectAccessControlNamespaceLister helps list and get DefaultObjectAccessControls.
// All objects returned here must be treated as read-only.
type DefaultObjectAccessControlNamespaceLister interface {
	// List lists all DefaultObjectAccessControls in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DefaultObjectAccessControl, err error)
	// Get retrieves the DefaultObjectAccessControl from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DefaultObjectAccessControl, error)
	DefaultObjectAccessControlNamespaceListerExpansion
}

// defaultObjectAccessControlNamespaceLister implements the DefaultObjectAccessControlNamespaceLister
// interface.
type defaultObjectAccessControlNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DefaultObjectAccessControls in the indexer for a given namespace.
func (s defaultObjectAccessControlNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DefaultObjectAccessControl, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DefaultObjectAccessControl))
	})
	return ret, err
}

// Get retrieves the DefaultObjectAccessControl from the indexer for a given namespace and name.
func (s defaultObjectAccessControlNamespaceLister) Get(name string) (*v1alpha1.DefaultObjectAccessControl, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("defaultobjectaccesscontrol"), name)
	}
	return obj.(*v1alpha1.DefaultObjectAccessControl), nil
}
