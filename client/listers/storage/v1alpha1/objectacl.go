/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-google-api/apis/storage/v1alpha1"
)

// ObjectACLLister helps list ObjectACLs.
// All objects returned here must be treated as read-only.
type ObjectACLLister interface {
	// List lists all ObjectACLs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ObjectACL, err error)
	// ObjectACLs returns an object that can list and get ObjectACLs.
	ObjectACLs(namespace string) ObjectACLNamespaceLister
	ObjectACLListerExpansion
}

// objectACLLister implements the ObjectACLLister interface.
type objectACLLister struct {
	indexer cache.Indexer
}

// NewObjectACLLister returns a new ObjectACLLister.
func NewObjectACLLister(indexer cache.Indexer) ObjectACLLister {
	return &objectACLLister{indexer: indexer}
}

// List lists all ObjectACLs in the indexer.
func (s *objectACLLister) List(selector labels.Selector) (ret []*v1alpha1.ObjectACL, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ObjectACL))
	})
	return ret, err
}

// ObjectACLs returns an object that can list and get ObjectACLs.
func (s *objectACLLister) ObjectACLs(namespace string) ObjectACLNamespaceLister {
	return objectACLNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ObjectACLNamespaceLister helps list and get ObjectACLs.
// All objects returned here must be treated as read-only.
type ObjectACLNamespaceLister interface {
	// List lists all ObjectACLs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ObjectACL, err error)
	// Get retrieves the ObjectACL from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ObjectACL, error)
	ObjectACLNamespaceListerExpansion
}

// objectACLNamespaceLister implements the ObjectACLNamespaceLister
// interface.
type objectACLNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ObjectACLs in the indexer for a given namespace.
func (s objectACLNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ObjectACL, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ObjectACL))
	})
	return ret, err
}

// Get retrieves the ObjectACL from the indexer for a given namespace and name.
func (s objectACLNamespaceLister) Get(name string) (*v1alpha1.ObjectACL, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("objectacl"), name)
	}
	return obj.(*v1alpha1.ObjectACL), nil
}
