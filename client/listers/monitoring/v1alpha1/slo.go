/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/monitoring/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SloLister helps list Slos.
// All objects returned here must be treated as read-only.
type SloLister interface {
	// List lists all Slos in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Slo, err error)
	// Slos returns an object that can list and get Slos.
	Slos(namespace string) SloNamespaceLister
	SloListerExpansion
}

// sloLister implements the SloLister interface.
type sloLister struct {
	indexer cache.Indexer
}

// NewSloLister returns a new SloLister.
func NewSloLister(indexer cache.Indexer) SloLister {
	return &sloLister{indexer: indexer}
}

// List lists all Slos in the indexer.
func (s *sloLister) List(selector labels.Selector) (ret []*v1alpha1.Slo, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Slo))
	})
	return ret, err
}

// Slos returns an object that can list and get Slos.
func (s *sloLister) Slos(namespace string) SloNamespaceLister {
	return sloNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SloNamespaceLister helps list and get Slos.
// All objects returned here must be treated as read-only.
type SloNamespaceLister interface {
	// List lists all Slos in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Slo, err error)
	// Get retrieves the Slo from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Slo, error)
	SloNamespaceListerExpansion
}

// sloNamespaceLister implements the SloNamespaceLister
// interface.
type sloNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Slos in the indexer for a given namespace.
func (s sloNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Slo, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Slo))
	})
	return ret, err
}

// Get retrieves the Slo from the indexer for a given namespace and name.
func (s sloNamespaceLister) Get(name string) (*v1alpha1.Slo, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("slo"), name)
	}
	return obj.(*v1alpha1.Slo), nil
}
