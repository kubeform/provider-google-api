/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-google-api/apis/monitoring/v1alpha1"
)

// UptimeCheckConfigLister helps list UptimeCheckConfigs.
// All objects returned here must be treated as read-only.
type UptimeCheckConfigLister interface {
	// List lists all UptimeCheckConfigs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.UptimeCheckConfig, err error)
	// UptimeCheckConfigs returns an object that can list and get UptimeCheckConfigs.
	UptimeCheckConfigs(namespace string) UptimeCheckConfigNamespaceLister
	UptimeCheckConfigListerExpansion
}

// uptimeCheckConfigLister implements the UptimeCheckConfigLister interface.
type uptimeCheckConfigLister struct {
	indexer cache.Indexer
}

// NewUptimeCheckConfigLister returns a new UptimeCheckConfigLister.
func NewUptimeCheckConfigLister(indexer cache.Indexer) UptimeCheckConfigLister {
	return &uptimeCheckConfigLister{indexer: indexer}
}

// List lists all UptimeCheckConfigs in the indexer.
func (s *uptimeCheckConfigLister) List(selector labels.Selector) (ret []*v1alpha1.UptimeCheckConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.UptimeCheckConfig))
	})
	return ret, err
}

// UptimeCheckConfigs returns an object that can list and get UptimeCheckConfigs.
func (s *uptimeCheckConfigLister) UptimeCheckConfigs(namespace string) UptimeCheckConfigNamespaceLister {
	return uptimeCheckConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// UptimeCheckConfigNamespaceLister helps list and get UptimeCheckConfigs.
// All objects returned here must be treated as read-only.
type UptimeCheckConfigNamespaceLister interface {
	// List lists all UptimeCheckConfigs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.UptimeCheckConfig, err error)
	// Get retrieves the UptimeCheckConfig from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.UptimeCheckConfig, error)
	UptimeCheckConfigNamespaceListerExpansion
}

// uptimeCheckConfigNamespaceLister implements the UptimeCheckConfigNamespaceLister
// interface.
type uptimeCheckConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all UptimeCheckConfigs in the indexer for a given namespace.
func (s uptimeCheckConfigNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.UptimeCheckConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.UptimeCheckConfig))
	})
	return ret, err
}

// Get retrieves the UptimeCheckConfig from the indexer for a given namespace and name.
func (s uptimeCheckConfigNamespaceLister) Get(name string) (*v1alpha1.UptimeCheckConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("uptimecheckconfig"), name)
	}
	return obj.(*v1alpha1.UptimeCheckConfig), nil
}
