/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-google-api/apis/iap/v1alpha1"
)

// AppEngineVersionIamMemberLister helps list AppEngineVersionIamMembers.
// All objects returned here must be treated as read-only.
type AppEngineVersionIamMemberLister interface {
	// List lists all AppEngineVersionIamMembers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AppEngineVersionIamMember, err error)
	// AppEngineVersionIamMembers returns an object that can list and get AppEngineVersionIamMembers.
	AppEngineVersionIamMembers(namespace string) AppEngineVersionIamMemberNamespaceLister
	AppEngineVersionIamMemberListerExpansion
}

// appEngineVersionIamMemberLister implements the AppEngineVersionIamMemberLister interface.
type appEngineVersionIamMemberLister struct {
	indexer cache.Indexer
}

// NewAppEngineVersionIamMemberLister returns a new AppEngineVersionIamMemberLister.
func NewAppEngineVersionIamMemberLister(indexer cache.Indexer) AppEngineVersionIamMemberLister {
	return &appEngineVersionIamMemberLister{indexer: indexer}
}

// List lists all AppEngineVersionIamMembers in the indexer.
func (s *appEngineVersionIamMemberLister) List(selector labels.Selector) (ret []*v1alpha1.AppEngineVersionIamMember, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AppEngineVersionIamMember))
	})
	return ret, err
}

// AppEngineVersionIamMembers returns an object that can list and get AppEngineVersionIamMembers.
func (s *appEngineVersionIamMemberLister) AppEngineVersionIamMembers(namespace string) AppEngineVersionIamMemberNamespaceLister {
	return appEngineVersionIamMemberNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AppEngineVersionIamMemberNamespaceLister helps list and get AppEngineVersionIamMembers.
// All objects returned here must be treated as read-only.
type AppEngineVersionIamMemberNamespaceLister interface {
	// List lists all AppEngineVersionIamMembers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AppEngineVersionIamMember, err error)
	// Get retrieves the AppEngineVersionIamMember from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AppEngineVersionIamMember, error)
	AppEngineVersionIamMemberNamespaceListerExpansion
}

// appEngineVersionIamMemberNamespaceLister implements the AppEngineVersionIamMemberNamespaceLister
// interface.
type appEngineVersionIamMemberNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AppEngineVersionIamMembers in the indexer for a given namespace.
func (s appEngineVersionIamMemberNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AppEngineVersionIamMember, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AppEngineVersionIamMember))
	})
	return ret, err
}

// Get retrieves the AppEngineVersionIamMember from the indexer for a given namespace and name.
func (s appEngineVersionIamMemberNamespaceLister) Get(name string) (*v1alpha1.AppEngineVersionIamMember, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("appengineversioniammember"), name)
	}
	return obj.(*v1alpha1.AppEngineVersionIamMember), nil
}
