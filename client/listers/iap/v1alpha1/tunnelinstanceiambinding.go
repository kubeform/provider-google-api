/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/iap/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TunnelInstanceIamBindingLister helps list TunnelInstanceIamBindings.
// All objects returned here must be treated as read-only.
type TunnelInstanceIamBindingLister interface {
	// List lists all TunnelInstanceIamBindings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TunnelInstanceIamBinding, err error)
	// TunnelInstanceIamBindings returns an object that can list and get TunnelInstanceIamBindings.
	TunnelInstanceIamBindings(namespace string) TunnelInstanceIamBindingNamespaceLister
	TunnelInstanceIamBindingListerExpansion
}

// tunnelInstanceIamBindingLister implements the TunnelInstanceIamBindingLister interface.
type tunnelInstanceIamBindingLister struct {
	indexer cache.Indexer
}

// NewTunnelInstanceIamBindingLister returns a new TunnelInstanceIamBindingLister.
func NewTunnelInstanceIamBindingLister(indexer cache.Indexer) TunnelInstanceIamBindingLister {
	return &tunnelInstanceIamBindingLister{indexer: indexer}
}

// List lists all TunnelInstanceIamBindings in the indexer.
func (s *tunnelInstanceIamBindingLister) List(selector labels.Selector) (ret []*v1alpha1.TunnelInstanceIamBinding, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TunnelInstanceIamBinding))
	})
	return ret, err
}

// TunnelInstanceIamBindings returns an object that can list and get TunnelInstanceIamBindings.
func (s *tunnelInstanceIamBindingLister) TunnelInstanceIamBindings(namespace string) TunnelInstanceIamBindingNamespaceLister {
	return tunnelInstanceIamBindingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TunnelInstanceIamBindingNamespaceLister helps list and get TunnelInstanceIamBindings.
// All objects returned here must be treated as read-only.
type TunnelInstanceIamBindingNamespaceLister interface {
	// List lists all TunnelInstanceIamBindings in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TunnelInstanceIamBinding, err error)
	// Get retrieves the TunnelInstanceIamBinding from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.TunnelInstanceIamBinding, error)
	TunnelInstanceIamBindingNamespaceListerExpansion
}

// tunnelInstanceIamBindingNamespaceLister implements the TunnelInstanceIamBindingNamespaceLister
// interface.
type tunnelInstanceIamBindingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TunnelInstanceIamBindings in the indexer for a given namespace.
func (s tunnelInstanceIamBindingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TunnelInstanceIamBinding, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TunnelInstanceIamBinding))
	})
	return ret, err
}

// Get retrieves the TunnelInstanceIamBinding from the indexer for a given namespace and name.
func (s tunnelInstanceIamBindingNamespaceLister) Get(name string) (*v1alpha1.TunnelInstanceIamBinding, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("tunnelinstanceiambinding"), name)
	}
	return obj.(*v1alpha1.TunnelInstanceIamBinding), nil
}
