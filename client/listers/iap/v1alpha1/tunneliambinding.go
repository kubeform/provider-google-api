/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/iap/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TunnelIamBindingLister helps list TunnelIamBindings.
// All objects returned here must be treated as read-only.
type TunnelIamBindingLister interface {
	// List lists all TunnelIamBindings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TunnelIamBinding, err error)
	// TunnelIamBindings returns an object that can list and get TunnelIamBindings.
	TunnelIamBindings(namespace string) TunnelIamBindingNamespaceLister
	TunnelIamBindingListerExpansion
}

// tunnelIamBindingLister implements the TunnelIamBindingLister interface.
type tunnelIamBindingLister struct {
	indexer cache.Indexer
}

// NewTunnelIamBindingLister returns a new TunnelIamBindingLister.
func NewTunnelIamBindingLister(indexer cache.Indexer) TunnelIamBindingLister {
	return &tunnelIamBindingLister{indexer: indexer}
}

// List lists all TunnelIamBindings in the indexer.
func (s *tunnelIamBindingLister) List(selector labels.Selector) (ret []*v1alpha1.TunnelIamBinding, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TunnelIamBinding))
	})
	return ret, err
}

// TunnelIamBindings returns an object that can list and get TunnelIamBindings.
func (s *tunnelIamBindingLister) TunnelIamBindings(namespace string) TunnelIamBindingNamespaceLister {
	return tunnelIamBindingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TunnelIamBindingNamespaceLister helps list and get TunnelIamBindings.
// All objects returned here must be treated as read-only.
type TunnelIamBindingNamespaceLister interface {
	// List lists all TunnelIamBindings in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TunnelIamBinding, err error)
	// Get retrieves the TunnelIamBinding from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.TunnelIamBinding, error)
	TunnelIamBindingNamespaceListerExpansion
}

// tunnelIamBindingNamespaceLister implements the TunnelIamBindingNamespaceLister
// interface.
type tunnelIamBindingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TunnelIamBindings in the indexer for a given namespace.
func (s tunnelIamBindingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TunnelIamBinding, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TunnelIamBinding))
	})
	return ret, err
}

// Get retrieves the TunnelIamBinding from the indexer for a given namespace and name.
func (s tunnelIamBindingNamespaceLister) Get(name string) (*v1alpha1.TunnelIamBinding, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("tunneliambinding"), name)
	}
	return obj.(*v1alpha1.TunnelIamBinding), nil
}
