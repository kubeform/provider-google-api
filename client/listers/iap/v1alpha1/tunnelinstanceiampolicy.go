/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-google-api/apis/iap/v1alpha1"
)

// TunnelInstanceIamPolicyLister helps list TunnelInstanceIamPolicies.
// All objects returned here must be treated as read-only.
type TunnelInstanceIamPolicyLister interface {
	// List lists all TunnelInstanceIamPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TunnelInstanceIamPolicy, err error)
	// TunnelInstanceIamPolicies returns an object that can list and get TunnelInstanceIamPolicies.
	TunnelInstanceIamPolicies(namespace string) TunnelInstanceIamPolicyNamespaceLister
	TunnelInstanceIamPolicyListerExpansion
}

// tunnelInstanceIamPolicyLister implements the TunnelInstanceIamPolicyLister interface.
type tunnelInstanceIamPolicyLister struct {
	indexer cache.Indexer
}

// NewTunnelInstanceIamPolicyLister returns a new TunnelInstanceIamPolicyLister.
func NewTunnelInstanceIamPolicyLister(indexer cache.Indexer) TunnelInstanceIamPolicyLister {
	return &tunnelInstanceIamPolicyLister{indexer: indexer}
}

// List lists all TunnelInstanceIamPolicies in the indexer.
func (s *tunnelInstanceIamPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.TunnelInstanceIamPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TunnelInstanceIamPolicy))
	})
	return ret, err
}

// TunnelInstanceIamPolicies returns an object that can list and get TunnelInstanceIamPolicies.
func (s *tunnelInstanceIamPolicyLister) TunnelInstanceIamPolicies(namespace string) TunnelInstanceIamPolicyNamespaceLister {
	return tunnelInstanceIamPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TunnelInstanceIamPolicyNamespaceLister helps list and get TunnelInstanceIamPolicies.
// All objects returned here must be treated as read-only.
type TunnelInstanceIamPolicyNamespaceLister interface {
	// List lists all TunnelInstanceIamPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TunnelInstanceIamPolicy, err error)
	// Get retrieves the TunnelInstanceIamPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.TunnelInstanceIamPolicy, error)
	TunnelInstanceIamPolicyNamespaceListerExpansion
}

// tunnelInstanceIamPolicyNamespaceLister implements the TunnelInstanceIamPolicyNamespaceLister
// interface.
type tunnelInstanceIamPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TunnelInstanceIamPolicies in the indexer for a given namespace.
func (s tunnelInstanceIamPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TunnelInstanceIamPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TunnelInstanceIamPolicy))
	})
	return ret, err
}

// Get retrieves the TunnelInstanceIamPolicy from the indexer for a given namespace and name.
func (s tunnelInstanceIamPolicyNamespaceLister) Get(name string) (*v1alpha1.TunnelInstanceIamPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("tunnelinstanceiampolicy"), name)
	}
	return obj.(*v1alpha1.TunnelInstanceIamPolicy), nil
}
