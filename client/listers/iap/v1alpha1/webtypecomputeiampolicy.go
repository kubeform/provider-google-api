/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-google-api/apis/iap/v1alpha1"
)

// WebTypeComputeIamPolicyLister helps list WebTypeComputeIamPolicies.
// All objects returned here must be treated as read-only.
type WebTypeComputeIamPolicyLister interface {
	// List lists all WebTypeComputeIamPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.WebTypeComputeIamPolicy, err error)
	// WebTypeComputeIamPolicies returns an object that can list and get WebTypeComputeIamPolicies.
	WebTypeComputeIamPolicies(namespace string) WebTypeComputeIamPolicyNamespaceLister
	WebTypeComputeIamPolicyListerExpansion
}

// webTypeComputeIamPolicyLister implements the WebTypeComputeIamPolicyLister interface.
type webTypeComputeIamPolicyLister struct {
	indexer cache.Indexer
}

// NewWebTypeComputeIamPolicyLister returns a new WebTypeComputeIamPolicyLister.
func NewWebTypeComputeIamPolicyLister(indexer cache.Indexer) WebTypeComputeIamPolicyLister {
	return &webTypeComputeIamPolicyLister{indexer: indexer}
}

// List lists all WebTypeComputeIamPolicies in the indexer.
func (s *webTypeComputeIamPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.WebTypeComputeIamPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.WebTypeComputeIamPolicy))
	})
	return ret, err
}

// WebTypeComputeIamPolicies returns an object that can list and get WebTypeComputeIamPolicies.
func (s *webTypeComputeIamPolicyLister) WebTypeComputeIamPolicies(namespace string) WebTypeComputeIamPolicyNamespaceLister {
	return webTypeComputeIamPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// WebTypeComputeIamPolicyNamespaceLister helps list and get WebTypeComputeIamPolicies.
// All objects returned here must be treated as read-only.
type WebTypeComputeIamPolicyNamespaceLister interface {
	// List lists all WebTypeComputeIamPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.WebTypeComputeIamPolicy, err error)
	// Get retrieves the WebTypeComputeIamPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.WebTypeComputeIamPolicy, error)
	WebTypeComputeIamPolicyNamespaceListerExpansion
}

// webTypeComputeIamPolicyNamespaceLister implements the WebTypeComputeIamPolicyNamespaceLister
// interface.
type webTypeComputeIamPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all WebTypeComputeIamPolicies in the indexer for a given namespace.
func (s webTypeComputeIamPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.WebTypeComputeIamPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.WebTypeComputeIamPolicy))
	})
	return ret, err
}

// Get retrieves the WebTypeComputeIamPolicy from the indexer for a given namespace and name.
func (s webTypeComputeIamPolicyNamespaceLister) Get(name string) (*v1alpha1.WebTypeComputeIamPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("webtypecomputeiampolicy"), name)
	}
	return obj.(*v1alpha1.WebTypeComputeIamPolicy), nil
}
