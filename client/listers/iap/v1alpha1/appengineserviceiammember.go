/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/iap/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AppEngineServiceIamMemberLister helps list AppEngineServiceIamMembers.
// All objects returned here must be treated as read-only.
type AppEngineServiceIamMemberLister interface {
	// List lists all AppEngineServiceIamMembers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AppEngineServiceIamMember, err error)
	// AppEngineServiceIamMembers returns an object that can list and get AppEngineServiceIamMembers.
	AppEngineServiceIamMembers(namespace string) AppEngineServiceIamMemberNamespaceLister
	AppEngineServiceIamMemberListerExpansion
}

// appEngineServiceIamMemberLister implements the AppEngineServiceIamMemberLister interface.
type appEngineServiceIamMemberLister struct {
	indexer cache.Indexer
}

// NewAppEngineServiceIamMemberLister returns a new AppEngineServiceIamMemberLister.
func NewAppEngineServiceIamMemberLister(indexer cache.Indexer) AppEngineServiceIamMemberLister {
	return &appEngineServiceIamMemberLister{indexer: indexer}
}

// List lists all AppEngineServiceIamMembers in the indexer.
func (s *appEngineServiceIamMemberLister) List(selector labels.Selector) (ret []*v1alpha1.AppEngineServiceIamMember, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AppEngineServiceIamMember))
	})
	return ret, err
}

// AppEngineServiceIamMembers returns an object that can list and get AppEngineServiceIamMembers.
func (s *appEngineServiceIamMemberLister) AppEngineServiceIamMembers(namespace string) AppEngineServiceIamMemberNamespaceLister {
	return appEngineServiceIamMemberNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AppEngineServiceIamMemberNamespaceLister helps list and get AppEngineServiceIamMembers.
// All objects returned here must be treated as read-only.
type AppEngineServiceIamMemberNamespaceLister interface {
	// List lists all AppEngineServiceIamMembers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AppEngineServiceIamMember, err error)
	// Get retrieves the AppEngineServiceIamMember from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AppEngineServiceIamMember, error)
	AppEngineServiceIamMemberNamespaceListerExpansion
}

// appEngineServiceIamMemberNamespaceLister implements the AppEngineServiceIamMemberNamespaceLister
// interface.
type appEngineServiceIamMemberNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AppEngineServiceIamMembers in the indexer for a given namespace.
func (s appEngineServiceIamMemberNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AppEngineServiceIamMember, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AppEngineServiceIamMember))
	})
	return ret, err
}

// Get retrieves the AppEngineServiceIamMember from the indexer for a given namespace and name.
func (s appEngineServiceIamMemberNamespaceLister) Get(name string) (*v1alpha1.AppEngineServiceIamMember, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("appengineserviceiammember"), name)
	}
	return obj.(*v1alpha1.AppEngineServiceIamMember), nil
}
