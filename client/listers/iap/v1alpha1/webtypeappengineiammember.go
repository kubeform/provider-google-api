/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-google-api/apis/iap/v1alpha1"
)

// WebTypeAppEngineIamMemberLister helps list WebTypeAppEngineIamMembers.
// All objects returned here must be treated as read-only.
type WebTypeAppEngineIamMemberLister interface {
	// List lists all WebTypeAppEngineIamMembers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.WebTypeAppEngineIamMember, err error)
	// WebTypeAppEngineIamMembers returns an object that can list and get WebTypeAppEngineIamMembers.
	WebTypeAppEngineIamMembers(namespace string) WebTypeAppEngineIamMemberNamespaceLister
	WebTypeAppEngineIamMemberListerExpansion
}

// webTypeAppEngineIamMemberLister implements the WebTypeAppEngineIamMemberLister interface.
type webTypeAppEngineIamMemberLister struct {
	indexer cache.Indexer
}

// NewWebTypeAppEngineIamMemberLister returns a new WebTypeAppEngineIamMemberLister.
func NewWebTypeAppEngineIamMemberLister(indexer cache.Indexer) WebTypeAppEngineIamMemberLister {
	return &webTypeAppEngineIamMemberLister{indexer: indexer}
}

// List lists all WebTypeAppEngineIamMembers in the indexer.
func (s *webTypeAppEngineIamMemberLister) List(selector labels.Selector) (ret []*v1alpha1.WebTypeAppEngineIamMember, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.WebTypeAppEngineIamMember))
	})
	return ret, err
}

// WebTypeAppEngineIamMembers returns an object that can list and get WebTypeAppEngineIamMembers.
func (s *webTypeAppEngineIamMemberLister) WebTypeAppEngineIamMembers(namespace string) WebTypeAppEngineIamMemberNamespaceLister {
	return webTypeAppEngineIamMemberNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// WebTypeAppEngineIamMemberNamespaceLister helps list and get WebTypeAppEngineIamMembers.
// All objects returned here must be treated as read-only.
type WebTypeAppEngineIamMemberNamespaceLister interface {
	// List lists all WebTypeAppEngineIamMembers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.WebTypeAppEngineIamMember, err error)
	// Get retrieves the WebTypeAppEngineIamMember from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.WebTypeAppEngineIamMember, error)
	WebTypeAppEngineIamMemberNamespaceListerExpansion
}

// webTypeAppEngineIamMemberNamespaceLister implements the WebTypeAppEngineIamMemberNamespaceLister
// interface.
type webTypeAppEngineIamMemberNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all WebTypeAppEngineIamMembers in the indexer for a given namespace.
func (s webTypeAppEngineIamMemberNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.WebTypeAppEngineIamMember, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.WebTypeAppEngineIamMember))
	})
	return ret, err
}

// Get retrieves the WebTypeAppEngineIamMember from the indexer for a given namespace and name.
func (s webTypeAppEngineIamMemberNamespaceLister) Get(name string) (*v1alpha1.WebTypeAppEngineIamMember, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("webtypeappengineiammember"), name)
	}
	return obj.(*v1alpha1.WebTypeAppEngineIamMember), nil
}
