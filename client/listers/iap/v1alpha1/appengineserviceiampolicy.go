/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/iap/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AppEngineServiceIamPolicyLister helps list AppEngineServiceIamPolicies.
// All objects returned here must be treated as read-only.
type AppEngineServiceIamPolicyLister interface {
	// List lists all AppEngineServiceIamPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AppEngineServiceIamPolicy, err error)
	// AppEngineServiceIamPolicies returns an object that can list and get AppEngineServiceIamPolicies.
	AppEngineServiceIamPolicies(namespace string) AppEngineServiceIamPolicyNamespaceLister
	AppEngineServiceIamPolicyListerExpansion
}

// appEngineServiceIamPolicyLister implements the AppEngineServiceIamPolicyLister interface.
type appEngineServiceIamPolicyLister struct {
	indexer cache.Indexer
}

// NewAppEngineServiceIamPolicyLister returns a new AppEngineServiceIamPolicyLister.
func NewAppEngineServiceIamPolicyLister(indexer cache.Indexer) AppEngineServiceIamPolicyLister {
	return &appEngineServiceIamPolicyLister{indexer: indexer}
}

// List lists all AppEngineServiceIamPolicies in the indexer.
func (s *appEngineServiceIamPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.AppEngineServiceIamPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AppEngineServiceIamPolicy))
	})
	return ret, err
}

// AppEngineServiceIamPolicies returns an object that can list and get AppEngineServiceIamPolicies.
func (s *appEngineServiceIamPolicyLister) AppEngineServiceIamPolicies(namespace string) AppEngineServiceIamPolicyNamespaceLister {
	return appEngineServiceIamPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AppEngineServiceIamPolicyNamespaceLister helps list and get AppEngineServiceIamPolicies.
// All objects returned here must be treated as read-only.
type AppEngineServiceIamPolicyNamespaceLister interface {
	// List lists all AppEngineServiceIamPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AppEngineServiceIamPolicy, err error)
	// Get retrieves the AppEngineServiceIamPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AppEngineServiceIamPolicy, error)
	AppEngineServiceIamPolicyNamespaceListerExpansion
}

// appEngineServiceIamPolicyNamespaceLister implements the AppEngineServiceIamPolicyNamespaceLister
// interface.
type appEngineServiceIamPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AppEngineServiceIamPolicies in the indexer for a given namespace.
func (s appEngineServiceIamPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AppEngineServiceIamPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AppEngineServiceIamPolicy))
	})
	return ret, err
}

// Get retrieves the AppEngineServiceIamPolicy from the indexer for a given namespace and name.
func (s appEngineServiceIamPolicyNamespaceLister) Get(name string) (*v1alpha1.AppEngineServiceIamPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("appengineserviceiampolicy"), name)
	}
	return obj.(*v1alpha1.AppEngineServiceIamPolicy), nil
}
