/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-google-api/apis/iap/v1alpha1"
)

// WebTypeComputeIamMemberLister helps list WebTypeComputeIamMembers.
// All objects returned here must be treated as read-only.
type WebTypeComputeIamMemberLister interface {
	// List lists all WebTypeComputeIamMembers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.WebTypeComputeIamMember, err error)
	// WebTypeComputeIamMembers returns an object that can list and get WebTypeComputeIamMembers.
	WebTypeComputeIamMembers(namespace string) WebTypeComputeIamMemberNamespaceLister
	WebTypeComputeIamMemberListerExpansion
}

// webTypeComputeIamMemberLister implements the WebTypeComputeIamMemberLister interface.
type webTypeComputeIamMemberLister struct {
	indexer cache.Indexer
}

// NewWebTypeComputeIamMemberLister returns a new WebTypeComputeIamMemberLister.
func NewWebTypeComputeIamMemberLister(indexer cache.Indexer) WebTypeComputeIamMemberLister {
	return &webTypeComputeIamMemberLister{indexer: indexer}
}

// List lists all WebTypeComputeIamMembers in the indexer.
func (s *webTypeComputeIamMemberLister) List(selector labels.Selector) (ret []*v1alpha1.WebTypeComputeIamMember, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.WebTypeComputeIamMember))
	})
	return ret, err
}

// WebTypeComputeIamMembers returns an object that can list and get WebTypeComputeIamMembers.
func (s *webTypeComputeIamMemberLister) WebTypeComputeIamMembers(namespace string) WebTypeComputeIamMemberNamespaceLister {
	return webTypeComputeIamMemberNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// WebTypeComputeIamMemberNamespaceLister helps list and get WebTypeComputeIamMembers.
// All objects returned here must be treated as read-only.
type WebTypeComputeIamMemberNamespaceLister interface {
	// List lists all WebTypeComputeIamMembers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.WebTypeComputeIamMember, err error)
	// Get retrieves the WebTypeComputeIamMember from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.WebTypeComputeIamMember, error)
	WebTypeComputeIamMemberNamespaceListerExpansion
}

// webTypeComputeIamMemberNamespaceLister implements the WebTypeComputeIamMemberNamespaceLister
// interface.
type webTypeComputeIamMemberNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all WebTypeComputeIamMembers in the indexer for a given namespace.
func (s webTypeComputeIamMemberNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.WebTypeComputeIamMember, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.WebTypeComputeIamMember))
	})
	return ret, err
}

// Get retrieves the WebTypeComputeIamMember from the indexer for a given namespace and name.
func (s webTypeComputeIamMemberNamespaceLister) Get(name string) (*v1alpha1.WebTypeComputeIamMember, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("webtypecomputeiammember"), name)
	}
	return obj.(*v1alpha1.WebTypeComputeIamMember), nil
}
