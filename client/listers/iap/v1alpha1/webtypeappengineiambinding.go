/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/iap/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// WebTypeAppEngineIamBindingLister helps list WebTypeAppEngineIamBindings.
// All objects returned here must be treated as read-only.
type WebTypeAppEngineIamBindingLister interface {
	// List lists all WebTypeAppEngineIamBindings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.WebTypeAppEngineIamBinding, err error)
	// WebTypeAppEngineIamBindings returns an object that can list and get WebTypeAppEngineIamBindings.
	WebTypeAppEngineIamBindings(namespace string) WebTypeAppEngineIamBindingNamespaceLister
	WebTypeAppEngineIamBindingListerExpansion
}

// webTypeAppEngineIamBindingLister implements the WebTypeAppEngineIamBindingLister interface.
type webTypeAppEngineIamBindingLister struct {
	indexer cache.Indexer
}

// NewWebTypeAppEngineIamBindingLister returns a new WebTypeAppEngineIamBindingLister.
func NewWebTypeAppEngineIamBindingLister(indexer cache.Indexer) WebTypeAppEngineIamBindingLister {
	return &webTypeAppEngineIamBindingLister{indexer: indexer}
}

// List lists all WebTypeAppEngineIamBindings in the indexer.
func (s *webTypeAppEngineIamBindingLister) List(selector labels.Selector) (ret []*v1alpha1.WebTypeAppEngineIamBinding, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.WebTypeAppEngineIamBinding))
	})
	return ret, err
}

// WebTypeAppEngineIamBindings returns an object that can list and get WebTypeAppEngineIamBindings.
func (s *webTypeAppEngineIamBindingLister) WebTypeAppEngineIamBindings(namespace string) WebTypeAppEngineIamBindingNamespaceLister {
	return webTypeAppEngineIamBindingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// WebTypeAppEngineIamBindingNamespaceLister helps list and get WebTypeAppEngineIamBindings.
// All objects returned here must be treated as read-only.
type WebTypeAppEngineIamBindingNamespaceLister interface {
	// List lists all WebTypeAppEngineIamBindings in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.WebTypeAppEngineIamBinding, err error)
	// Get retrieves the WebTypeAppEngineIamBinding from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.WebTypeAppEngineIamBinding, error)
	WebTypeAppEngineIamBindingNamespaceListerExpansion
}

// webTypeAppEngineIamBindingNamespaceLister implements the WebTypeAppEngineIamBindingNamespaceLister
// interface.
type webTypeAppEngineIamBindingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all WebTypeAppEngineIamBindings in the indexer for a given namespace.
func (s webTypeAppEngineIamBindingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.WebTypeAppEngineIamBinding, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.WebTypeAppEngineIamBinding))
	})
	return ret, err
}

// Get retrieves the WebTypeAppEngineIamBinding from the indexer for a given namespace and name.
func (s webTypeAppEngineIamBindingNamespaceLister) Get(name string) (*v1alpha1.WebTypeAppEngineIamBinding, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("webtypeappengineiambinding"), name)
	}
	return obj.(*v1alpha1.WebTypeAppEngineIamBinding), nil
}
