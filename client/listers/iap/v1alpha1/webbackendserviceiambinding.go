/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-google-api/apis/iap/v1alpha1"
)

// WebBackendServiceIamBindingLister helps list WebBackendServiceIamBindings.
// All objects returned here must be treated as read-only.
type WebBackendServiceIamBindingLister interface {
	// List lists all WebBackendServiceIamBindings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.WebBackendServiceIamBinding, err error)
	// WebBackendServiceIamBindings returns an object that can list and get WebBackendServiceIamBindings.
	WebBackendServiceIamBindings(namespace string) WebBackendServiceIamBindingNamespaceLister
	WebBackendServiceIamBindingListerExpansion
}

// webBackendServiceIamBindingLister implements the WebBackendServiceIamBindingLister interface.
type webBackendServiceIamBindingLister struct {
	indexer cache.Indexer
}

// NewWebBackendServiceIamBindingLister returns a new WebBackendServiceIamBindingLister.
func NewWebBackendServiceIamBindingLister(indexer cache.Indexer) WebBackendServiceIamBindingLister {
	return &webBackendServiceIamBindingLister{indexer: indexer}
}

// List lists all WebBackendServiceIamBindings in the indexer.
func (s *webBackendServiceIamBindingLister) List(selector labels.Selector) (ret []*v1alpha1.WebBackendServiceIamBinding, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.WebBackendServiceIamBinding))
	})
	return ret, err
}

// WebBackendServiceIamBindings returns an object that can list and get WebBackendServiceIamBindings.
func (s *webBackendServiceIamBindingLister) WebBackendServiceIamBindings(namespace string) WebBackendServiceIamBindingNamespaceLister {
	return webBackendServiceIamBindingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// WebBackendServiceIamBindingNamespaceLister helps list and get WebBackendServiceIamBindings.
// All objects returned here must be treated as read-only.
type WebBackendServiceIamBindingNamespaceLister interface {
	// List lists all WebBackendServiceIamBindings in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.WebBackendServiceIamBinding, err error)
	// Get retrieves the WebBackendServiceIamBinding from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.WebBackendServiceIamBinding, error)
	WebBackendServiceIamBindingNamespaceListerExpansion
}

// webBackendServiceIamBindingNamespaceLister implements the WebBackendServiceIamBindingNamespaceLister
// interface.
type webBackendServiceIamBindingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all WebBackendServiceIamBindings in the indexer for a given namespace.
func (s webBackendServiceIamBindingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.WebBackendServiceIamBinding, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.WebBackendServiceIamBinding))
	})
	return ret, err
}

// Get retrieves the WebBackendServiceIamBinding from the indexer for a given namespace and name.
func (s webBackendServiceIamBindingNamespaceLister) Get(name string) (*v1alpha1.WebBackendServiceIamBinding, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("webbackendserviceiambinding"), name)
	}
	return obj.(*v1alpha1.WebBackendServiceIamBinding), nil
}
