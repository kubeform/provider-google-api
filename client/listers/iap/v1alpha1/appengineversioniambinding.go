/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-google-api/apis/iap/v1alpha1"
)

// AppEngineVersionIamBindingLister helps list AppEngineVersionIamBindings.
// All objects returned here must be treated as read-only.
type AppEngineVersionIamBindingLister interface {
	// List lists all AppEngineVersionIamBindings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AppEngineVersionIamBinding, err error)
	// AppEngineVersionIamBindings returns an object that can list and get AppEngineVersionIamBindings.
	AppEngineVersionIamBindings(namespace string) AppEngineVersionIamBindingNamespaceLister
	AppEngineVersionIamBindingListerExpansion
}

// appEngineVersionIamBindingLister implements the AppEngineVersionIamBindingLister interface.
type appEngineVersionIamBindingLister struct {
	indexer cache.Indexer
}

// NewAppEngineVersionIamBindingLister returns a new AppEngineVersionIamBindingLister.
func NewAppEngineVersionIamBindingLister(indexer cache.Indexer) AppEngineVersionIamBindingLister {
	return &appEngineVersionIamBindingLister{indexer: indexer}
}

// List lists all AppEngineVersionIamBindings in the indexer.
func (s *appEngineVersionIamBindingLister) List(selector labels.Selector) (ret []*v1alpha1.AppEngineVersionIamBinding, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AppEngineVersionIamBinding))
	})
	return ret, err
}

// AppEngineVersionIamBindings returns an object that can list and get AppEngineVersionIamBindings.
func (s *appEngineVersionIamBindingLister) AppEngineVersionIamBindings(namespace string) AppEngineVersionIamBindingNamespaceLister {
	return appEngineVersionIamBindingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AppEngineVersionIamBindingNamespaceLister helps list and get AppEngineVersionIamBindings.
// All objects returned here must be treated as read-only.
type AppEngineVersionIamBindingNamespaceLister interface {
	// List lists all AppEngineVersionIamBindings in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AppEngineVersionIamBinding, err error)
	// Get retrieves the AppEngineVersionIamBinding from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AppEngineVersionIamBinding, error)
	AppEngineVersionIamBindingNamespaceListerExpansion
}

// appEngineVersionIamBindingNamespaceLister implements the AppEngineVersionIamBindingNamespaceLister
// interface.
type appEngineVersionIamBindingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AppEngineVersionIamBindings in the indexer for a given namespace.
func (s appEngineVersionIamBindingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AppEngineVersionIamBinding, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AppEngineVersionIamBinding))
	})
	return ret, err
}

// Get retrieves the AppEngineVersionIamBinding from the indexer for a given namespace and name.
func (s appEngineVersionIamBindingNamespaceLister) Get(name string) (*v1alpha1.AppEngineVersionIamBinding, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("appengineversioniambinding"), name)
	}
	return obj.(*v1alpha1.AppEngineVersionIamBinding), nil
}
