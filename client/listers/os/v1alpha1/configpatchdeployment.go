/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-google-api/apis/os/v1alpha1"
)

// ConfigPatchDeploymentLister helps list ConfigPatchDeployments.
// All objects returned here must be treated as read-only.
type ConfigPatchDeploymentLister interface {
	// List lists all ConfigPatchDeployments in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ConfigPatchDeployment, err error)
	// ConfigPatchDeployments returns an object that can list and get ConfigPatchDeployments.
	ConfigPatchDeployments(namespace string) ConfigPatchDeploymentNamespaceLister
	ConfigPatchDeploymentListerExpansion
}

// configPatchDeploymentLister implements the ConfigPatchDeploymentLister interface.
type configPatchDeploymentLister struct {
	indexer cache.Indexer
}

// NewConfigPatchDeploymentLister returns a new ConfigPatchDeploymentLister.
func NewConfigPatchDeploymentLister(indexer cache.Indexer) ConfigPatchDeploymentLister {
	return &configPatchDeploymentLister{indexer: indexer}
}

// List lists all ConfigPatchDeployments in the indexer.
func (s *configPatchDeploymentLister) List(selector labels.Selector) (ret []*v1alpha1.ConfigPatchDeployment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConfigPatchDeployment))
	})
	return ret, err
}

// ConfigPatchDeployments returns an object that can list and get ConfigPatchDeployments.
func (s *configPatchDeploymentLister) ConfigPatchDeployments(namespace string) ConfigPatchDeploymentNamespaceLister {
	return configPatchDeploymentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ConfigPatchDeploymentNamespaceLister helps list and get ConfigPatchDeployments.
// All objects returned here must be treated as read-only.
type ConfigPatchDeploymentNamespaceLister interface {
	// List lists all ConfigPatchDeployments in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ConfigPatchDeployment, err error)
	// Get retrieves the ConfigPatchDeployment from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ConfigPatchDeployment, error)
	ConfigPatchDeploymentNamespaceListerExpansion
}

// configPatchDeploymentNamespaceLister implements the ConfigPatchDeploymentNamespaceLister
// interface.
type configPatchDeploymentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ConfigPatchDeployments in the indexer for a given namespace.
func (s configPatchDeploymentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ConfigPatchDeployment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConfigPatchDeployment))
	})
	return ret, err
}

// Get retrieves the ConfigPatchDeployment from the indexer for a given namespace and name.
func (s configPatchDeploymentNamespaceLister) Get(name string) (*v1alpha1.ConfigPatchDeployment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("configpatchdeployment"), name)
	}
	return obj.(*v1alpha1.ConfigPatchDeployment), nil
}
