/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/os/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ConfigOsPolicyAssignmentLister helps list ConfigOsPolicyAssignments.
// All objects returned here must be treated as read-only.
type ConfigOsPolicyAssignmentLister interface {
	// List lists all ConfigOsPolicyAssignments in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ConfigOsPolicyAssignment, err error)
	// ConfigOsPolicyAssignments returns an object that can list and get ConfigOsPolicyAssignments.
	ConfigOsPolicyAssignments(namespace string) ConfigOsPolicyAssignmentNamespaceLister
	ConfigOsPolicyAssignmentListerExpansion
}

// configOsPolicyAssignmentLister implements the ConfigOsPolicyAssignmentLister interface.
type configOsPolicyAssignmentLister struct {
	indexer cache.Indexer
}

// NewConfigOsPolicyAssignmentLister returns a new ConfigOsPolicyAssignmentLister.
func NewConfigOsPolicyAssignmentLister(indexer cache.Indexer) ConfigOsPolicyAssignmentLister {
	return &configOsPolicyAssignmentLister{indexer: indexer}
}

// List lists all ConfigOsPolicyAssignments in the indexer.
func (s *configOsPolicyAssignmentLister) List(selector labels.Selector) (ret []*v1alpha1.ConfigOsPolicyAssignment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConfigOsPolicyAssignment))
	})
	return ret, err
}

// ConfigOsPolicyAssignments returns an object that can list and get ConfigOsPolicyAssignments.
func (s *configOsPolicyAssignmentLister) ConfigOsPolicyAssignments(namespace string) ConfigOsPolicyAssignmentNamespaceLister {
	return configOsPolicyAssignmentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ConfigOsPolicyAssignmentNamespaceLister helps list and get ConfigOsPolicyAssignments.
// All objects returned here must be treated as read-only.
type ConfigOsPolicyAssignmentNamespaceLister interface {
	// List lists all ConfigOsPolicyAssignments in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ConfigOsPolicyAssignment, err error)
	// Get retrieves the ConfigOsPolicyAssignment from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ConfigOsPolicyAssignment, error)
	ConfigOsPolicyAssignmentNamespaceListerExpansion
}

// configOsPolicyAssignmentNamespaceLister implements the ConfigOsPolicyAssignmentNamespaceLister
// interface.
type configOsPolicyAssignmentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ConfigOsPolicyAssignments in the indexer for a given namespace.
func (s configOsPolicyAssignmentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ConfigOsPolicyAssignment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConfigOsPolicyAssignment))
	})
	return ret, err
}

// Get retrieves the ConfigOsPolicyAssignment from the indexer for a given namespace and name.
func (s configOsPolicyAssignmentNamespaceLister) Get(name string) (*v1alpha1.ConfigOsPolicyAssignment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("configospolicyassignment"), name)
	}
	return obj.(*v1alpha1.ConfigOsPolicyAssignment), nil
}
