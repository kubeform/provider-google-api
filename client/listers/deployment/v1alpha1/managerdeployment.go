/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-google-api/apis/deployment/v1alpha1"
)

// ManagerDeploymentLister helps list ManagerDeployments.
// All objects returned here must be treated as read-only.
type ManagerDeploymentLister interface {
	// List lists all ManagerDeployments in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ManagerDeployment, err error)
	// ManagerDeployments returns an object that can list and get ManagerDeployments.
	ManagerDeployments(namespace string) ManagerDeploymentNamespaceLister
	ManagerDeploymentListerExpansion
}

// managerDeploymentLister implements the ManagerDeploymentLister interface.
type managerDeploymentLister struct {
	indexer cache.Indexer
}

// NewManagerDeploymentLister returns a new ManagerDeploymentLister.
func NewManagerDeploymentLister(indexer cache.Indexer) ManagerDeploymentLister {
	return &managerDeploymentLister{indexer: indexer}
}

// List lists all ManagerDeployments in the indexer.
func (s *managerDeploymentLister) List(selector labels.Selector) (ret []*v1alpha1.ManagerDeployment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ManagerDeployment))
	})
	return ret, err
}

// ManagerDeployments returns an object that can list and get ManagerDeployments.
func (s *managerDeploymentLister) ManagerDeployments(namespace string) ManagerDeploymentNamespaceLister {
	return managerDeploymentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ManagerDeploymentNamespaceLister helps list and get ManagerDeployments.
// All objects returned here must be treated as read-only.
type ManagerDeploymentNamespaceLister interface {
	// List lists all ManagerDeployments in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ManagerDeployment, err error)
	// Get retrieves the ManagerDeployment from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ManagerDeployment, error)
	ManagerDeploymentNamespaceListerExpansion
}

// managerDeploymentNamespaceLister implements the ManagerDeploymentNamespaceLister
// interface.
type managerDeploymentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ManagerDeployments in the indexer for a given namespace.
func (s managerDeploymentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ManagerDeployment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ManagerDeployment))
	})
	return ret, err
}

// Get retrieves the ManagerDeployment from the indexer for a given namespace and name.
func (s managerDeploymentNamespaceLister) Get(name string) (*v1alpha1.ManagerDeployment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("managerdeployment"), name)
	}
	return obj.(*v1alpha1.ManagerDeployment), nil
}
