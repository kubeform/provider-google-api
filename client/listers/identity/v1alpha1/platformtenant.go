/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-google-api/apis/identity/v1alpha1"
)

// PlatformTenantLister helps list PlatformTenants.
// All objects returned here must be treated as read-only.
type PlatformTenantLister interface {
	// List lists all PlatformTenants in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PlatformTenant, err error)
	// PlatformTenants returns an object that can list and get PlatformTenants.
	PlatformTenants(namespace string) PlatformTenantNamespaceLister
	PlatformTenantListerExpansion
}

// platformTenantLister implements the PlatformTenantLister interface.
type platformTenantLister struct {
	indexer cache.Indexer
}

// NewPlatformTenantLister returns a new PlatformTenantLister.
func NewPlatformTenantLister(indexer cache.Indexer) PlatformTenantLister {
	return &platformTenantLister{indexer: indexer}
}

// List lists all PlatformTenants in the indexer.
func (s *platformTenantLister) List(selector labels.Selector) (ret []*v1alpha1.PlatformTenant, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PlatformTenant))
	})
	return ret, err
}

// PlatformTenants returns an object that can list and get PlatformTenants.
func (s *platformTenantLister) PlatformTenants(namespace string) PlatformTenantNamespaceLister {
	return platformTenantNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PlatformTenantNamespaceLister helps list and get PlatformTenants.
// All objects returned here must be treated as read-only.
type PlatformTenantNamespaceLister interface {
	// List lists all PlatformTenants in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PlatformTenant, err error)
	// Get retrieves the PlatformTenant from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.PlatformTenant, error)
	PlatformTenantNamespaceListerExpansion
}

// platformTenantNamespaceLister implements the PlatformTenantNamespaceLister
// interface.
type platformTenantNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PlatformTenants in the indexer for a given namespace.
func (s platformTenantNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PlatformTenant, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PlatformTenant))
	})
	return ret, err
}

// Get retrieves the PlatformTenant from the indexer for a given namespace and name.
func (s platformTenantNamespaceLister) Get(name string) (*v1alpha1.PlatformTenant, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("platformtenant"), name)
	}
	return obj.(*v1alpha1.PlatformTenant), nil
}
