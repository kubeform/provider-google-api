/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-google-api/apis/identity/v1alpha1"
)

// PlatformTenantOauthIdpConfigLister helps list PlatformTenantOauthIdpConfigs.
// All objects returned here must be treated as read-only.
type PlatformTenantOauthIdpConfigLister interface {
	// List lists all PlatformTenantOauthIdpConfigs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PlatformTenantOauthIdpConfig, err error)
	// PlatformTenantOauthIdpConfigs returns an object that can list and get PlatformTenantOauthIdpConfigs.
	PlatformTenantOauthIdpConfigs(namespace string) PlatformTenantOauthIdpConfigNamespaceLister
	PlatformTenantOauthIdpConfigListerExpansion
}

// platformTenantOauthIdpConfigLister implements the PlatformTenantOauthIdpConfigLister interface.
type platformTenantOauthIdpConfigLister struct {
	indexer cache.Indexer
}

// NewPlatformTenantOauthIdpConfigLister returns a new PlatformTenantOauthIdpConfigLister.
func NewPlatformTenantOauthIdpConfigLister(indexer cache.Indexer) PlatformTenantOauthIdpConfigLister {
	return &platformTenantOauthIdpConfigLister{indexer: indexer}
}

// List lists all PlatformTenantOauthIdpConfigs in the indexer.
func (s *platformTenantOauthIdpConfigLister) List(selector labels.Selector) (ret []*v1alpha1.PlatformTenantOauthIdpConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PlatformTenantOauthIdpConfig))
	})
	return ret, err
}

// PlatformTenantOauthIdpConfigs returns an object that can list and get PlatformTenantOauthIdpConfigs.
func (s *platformTenantOauthIdpConfigLister) PlatformTenantOauthIdpConfigs(namespace string) PlatformTenantOauthIdpConfigNamespaceLister {
	return platformTenantOauthIdpConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PlatformTenantOauthIdpConfigNamespaceLister helps list and get PlatformTenantOauthIdpConfigs.
// All objects returned here must be treated as read-only.
type PlatformTenantOauthIdpConfigNamespaceLister interface {
	// List lists all PlatformTenantOauthIdpConfigs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PlatformTenantOauthIdpConfig, err error)
	// Get retrieves the PlatformTenantOauthIdpConfig from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.PlatformTenantOauthIdpConfig, error)
	PlatformTenantOauthIdpConfigNamespaceListerExpansion
}

// platformTenantOauthIdpConfigNamespaceLister implements the PlatformTenantOauthIdpConfigNamespaceLister
// interface.
type platformTenantOauthIdpConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PlatformTenantOauthIdpConfigs in the indexer for a given namespace.
func (s platformTenantOauthIdpConfigNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PlatformTenantOauthIdpConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PlatformTenantOauthIdpConfig))
	})
	return ret, err
}

// Get retrieves the PlatformTenantOauthIdpConfig from the indexer for a given namespace and name.
func (s platformTenantOauthIdpConfigNamespaceLister) Get(name string) (*v1alpha1.PlatformTenantOauthIdpConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("platformtenantoauthidpconfig"), name)
	}
	return obj.(*v1alpha1.PlatformTenantOauthIdpConfig), nil
}
