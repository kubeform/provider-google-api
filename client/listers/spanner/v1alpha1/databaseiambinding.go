/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-google-api/apis/spanner/v1alpha1"
)

// DatabaseIamBindingLister helps list DatabaseIamBindings.
// All objects returned here must be treated as read-only.
type DatabaseIamBindingLister interface {
	// List lists all DatabaseIamBindings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DatabaseIamBinding, err error)
	// DatabaseIamBindings returns an object that can list and get DatabaseIamBindings.
	DatabaseIamBindings(namespace string) DatabaseIamBindingNamespaceLister
	DatabaseIamBindingListerExpansion
}

// databaseIamBindingLister implements the DatabaseIamBindingLister interface.
type databaseIamBindingLister struct {
	indexer cache.Indexer
}

// NewDatabaseIamBindingLister returns a new DatabaseIamBindingLister.
func NewDatabaseIamBindingLister(indexer cache.Indexer) DatabaseIamBindingLister {
	return &databaseIamBindingLister{indexer: indexer}
}

// List lists all DatabaseIamBindings in the indexer.
func (s *databaseIamBindingLister) List(selector labels.Selector) (ret []*v1alpha1.DatabaseIamBinding, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DatabaseIamBinding))
	})
	return ret, err
}

// DatabaseIamBindings returns an object that can list and get DatabaseIamBindings.
func (s *databaseIamBindingLister) DatabaseIamBindings(namespace string) DatabaseIamBindingNamespaceLister {
	return databaseIamBindingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DatabaseIamBindingNamespaceLister helps list and get DatabaseIamBindings.
// All objects returned here must be treated as read-only.
type DatabaseIamBindingNamespaceLister interface {
	// List lists all DatabaseIamBindings in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DatabaseIamBinding, err error)
	// Get retrieves the DatabaseIamBinding from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DatabaseIamBinding, error)
	DatabaseIamBindingNamespaceListerExpansion
}

// databaseIamBindingNamespaceLister implements the DatabaseIamBindingNamespaceLister
// interface.
type databaseIamBindingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DatabaseIamBindings in the indexer for a given namespace.
func (s databaseIamBindingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DatabaseIamBinding, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DatabaseIamBinding))
	})
	return ret, err
}

// Get retrieves the DatabaseIamBinding from the indexer for a given namespace and name.
func (s databaseIamBindingNamespaceLister) Get(name string) (*v1alpha1.DatabaseIamBinding, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("databaseiambinding"), name)
	}
	return obj.(*v1alpha1.DatabaseIamBinding), nil
}
