/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/vpc/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AccessConnectorLister helps list AccessConnectors.
// All objects returned here must be treated as read-only.
type AccessConnectorLister interface {
	// List lists all AccessConnectors in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AccessConnector, err error)
	// AccessConnectors returns an object that can list and get AccessConnectors.
	AccessConnectors(namespace string) AccessConnectorNamespaceLister
	AccessConnectorListerExpansion
}

// accessConnectorLister implements the AccessConnectorLister interface.
type accessConnectorLister struct {
	indexer cache.Indexer
}

// NewAccessConnectorLister returns a new AccessConnectorLister.
func NewAccessConnectorLister(indexer cache.Indexer) AccessConnectorLister {
	return &accessConnectorLister{indexer: indexer}
}

// List lists all AccessConnectors in the indexer.
func (s *accessConnectorLister) List(selector labels.Selector) (ret []*v1alpha1.AccessConnector, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AccessConnector))
	})
	return ret, err
}

// AccessConnectors returns an object that can list and get AccessConnectors.
func (s *accessConnectorLister) AccessConnectors(namespace string) AccessConnectorNamespaceLister {
	return accessConnectorNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AccessConnectorNamespaceLister helps list and get AccessConnectors.
// All objects returned here must be treated as read-only.
type AccessConnectorNamespaceLister interface {
	// List lists all AccessConnectors in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AccessConnector, err error)
	// Get retrieves the AccessConnector from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AccessConnector, error)
	AccessConnectorNamespaceListerExpansion
}

// accessConnectorNamespaceLister implements the AccessConnectorNamespaceLister
// interface.
type accessConnectorNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AccessConnectors in the indexer for a given namespace.
func (s accessConnectorNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AccessConnector, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AccessConnector))
	})
	return ret, err
}

// Get retrieves the AccessConnector from the indexer for a given namespace and name.
func (s accessConnectorNamespaceLister) Get(name string) (*v1alpha1.AccessConnector, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("accessconnector"), name)
	}
	return obj.(*v1alpha1.AccessConnector), nil
}
