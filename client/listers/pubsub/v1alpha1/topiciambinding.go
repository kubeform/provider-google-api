/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/pubsub/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TopicIamBindingLister helps list TopicIamBindings.
// All objects returned here must be treated as read-only.
type TopicIamBindingLister interface {
	// List lists all TopicIamBindings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TopicIamBinding, err error)
	// TopicIamBindings returns an object that can list and get TopicIamBindings.
	TopicIamBindings(namespace string) TopicIamBindingNamespaceLister
	TopicIamBindingListerExpansion
}

// topicIamBindingLister implements the TopicIamBindingLister interface.
type topicIamBindingLister struct {
	indexer cache.Indexer
}

// NewTopicIamBindingLister returns a new TopicIamBindingLister.
func NewTopicIamBindingLister(indexer cache.Indexer) TopicIamBindingLister {
	return &topicIamBindingLister{indexer: indexer}
}

// List lists all TopicIamBindings in the indexer.
func (s *topicIamBindingLister) List(selector labels.Selector) (ret []*v1alpha1.TopicIamBinding, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TopicIamBinding))
	})
	return ret, err
}

// TopicIamBindings returns an object that can list and get TopicIamBindings.
func (s *topicIamBindingLister) TopicIamBindings(namespace string) TopicIamBindingNamespaceLister {
	return topicIamBindingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TopicIamBindingNamespaceLister helps list and get TopicIamBindings.
// All objects returned here must be treated as read-only.
type TopicIamBindingNamespaceLister interface {
	// List lists all TopicIamBindings in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TopicIamBinding, err error)
	// Get retrieves the TopicIamBinding from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.TopicIamBinding, error)
	TopicIamBindingNamespaceListerExpansion
}

// topicIamBindingNamespaceLister implements the TopicIamBindingNamespaceLister
// interface.
type topicIamBindingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TopicIamBindings in the indexer for a given namespace.
func (s topicIamBindingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TopicIamBinding, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TopicIamBinding))
	})
	return ret, err
}

// Get retrieves the TopicIamBinding from the indexer for a given namespace and name.
func (s topicIamBindingNamespaceLister) Get(name string) (*v1alpha1.TopicIamBinding, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("topiciambinding"), name)
	}
	return obj.(*v1alpha1.TopicIamBinding), nil
}
