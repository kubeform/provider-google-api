/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-google-api/apis/pubsub/v1alpha1"
)

// SubscriptionIamBindingLister helps list SubscriptionIamBindings.
// All objects returned here must be treated as read-only.
type SubscriptionIamBindingLister interface {
	// List lists all SubscriptionIamBindings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SubscriptionIamBinding, err error)
	// SubscriptionIamBindings returns an object that can list and get SubscriptionIamBindings.
	SubscriptionIamBindings(namespace string) SubscriptionIamBindingNamespaceLister
	SubscriptionIamBindingListerExpansion
}

// subscriptionIamBindingLister implements the SubscriptionIamBindingLister interface.
type subscriptionIamBindingLister struct {
	indexer cache.Indexer
}

// NewSubscriptionIamBindingLister returns a new SubscriptionIamBindingLister.
func NewSubscriptionIamBindingLister(indexer cache.Indexer) SubscriptionIamBindingLister {
	return &subscriptionIamBindingLister{indexer: indexer}
}

// List lists all SubscriptionIamBindings in the indexer.
func (s *subscriptionIamBindingLister) List(selector labels.Selector) (ret []*v1alpha1.SubscriptionIamBinding, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SubscriptionIamBinding))
	})
	return ret, err
}

// SubscriptionIamBindings returns an object that can list and get SubscriptionIamBindings.
func (s *subscriptionIamBindingLister) SubscriptionIamBindings(namespace string) SubscriptionIamBindingNamespaceLister {
	return subscriptionIamBindingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SubscriptionIamBindingNamespaceLister helps list and get SubscriptionIamBindings.
// All objects returned here must be treated as read-only.
type SubscriptionIamBindingNamespaceLister interface {
	// List lists all SubscriptionIamBindings in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SubscriptionIamBinding, err error)
	// Get retrieves the SubscriptionIamBinding from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SubscriptionIamBinding, error)
	SubscriptionIamBindingNamespaceListerExpansion
}

// subscriptionIamBindingNamespaceLister implements the SubscriptionIamBindingNamespaceLister
// interface.
type subscriptionIamBindingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SubscriptionIamBindings in the indexer for a given namespace.
func (s subscriptionIamBindingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SubscriptionIamBinding, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SubscriptionIamBinding))
	})
	return ret, err
}

// Get retrieves the SubscriptionIamBinding from the indexer for a given namespace and name.
func (s subscriptionIamBindingNamespaceLister) Get(name string) (*v1alpha1.SubscriptionIamBinding, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("subscriptioniambinding"), name)
	}
	return obj.(*v1alpha1.SubscriptionIamBinding), nil
}
