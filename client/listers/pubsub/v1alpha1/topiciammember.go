/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/pubsub/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TopicIamMemberLister helps list TopicIamMembers.
// All objects returned here must be treated as read-only.
type TopicIamMemberLister interface {
	// List lists all TopicIamMembers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TopicIamMember, err error)
	// TopicIamMembers returns an object that can list and get TopicIamMembers.
	TopicIamMembers(namespace string) TopicIamMemberNamespaceLister
	TopicIamMemberListerExpansion
}

// topicIamMemberLister implements the TopicIamMemberLister interface.
type topicIamMemberLister struct {
	indexer cache.Indexer
}

// NewTopicIamMemberLister returns a new TopicIamMemberLister.
func NewTopicIamMemberLister(indexer cache.Indexer) TopicIamMemberLister {
	return &topicIamMemberLister{indexer: indexer}
}

// List lists all TopicIamMembers in the indexer.
func (s *topicIamMemberLister) List(selector labels.Selector) (ret []*v1alpha1.TopicIamMember, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TopicIamMember))
	})
	return ret, err
}

// TopicIamMembers returns an object that can list and get TopicIamMembers.
func (s *topicIamMemberLister) TopicIamMembers(namespace string) TopicIamMemberNamespaceLister {
	return topicIamMemberNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TopicIamMemberNamespaceLister helps list and get TopicIamMembers.
// All objects returned here must be treated as read-only.
type TopicIamMemberNamespaceLister interface {
	// List lists all TopicIamMembers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TopicIamMember, err error)
	// Get retrieves the TopicIamMember from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.TopicIamMember, error)
	TopicIamMemberNamespaceListerExpansion
}

// topicIamMemberNamespaceLister implements the TopicIamMemberNamespaceLister
// interface.
type topicIamMemberNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TopicIamMembers in the indexer for a given namespace.
func (s topicIamMemberNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TopicIamMember, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TopicIamMember))
	})
	return ret, err
}

// Get retrieves the TopicIamMember from the indexer for a given namespace and name.
func (s topicIamMemberNamespaceLister) Get(name string) (*v1alpha1.TopicIamMember, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("topiciammember"), name)
	}
	return obj.(*v1alpha1.TopicIamMember), nil
}
