/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/pubsub/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TopicIamPolicyLister helps list TopicIamPolicies.
// All objects returned here must be treated as read-only.
type TopicIamPolicyLister interface {
	// List lists all TopicIamPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TopicIamPolicy, err error)
	// TopicIamPolicies returns an object that can list and get TopicIamPolicies.
	TopicIamPolicies(namespace string) TopicIamPolicyNamespaceLister
	TopicIamPolicyListerExpansion
}

// topicIamPolicyLister implements the TopicIamPolicyLister interface.
type topicIamPolicyLister struct {
	indexer cache.Indexer
}

// NewTopicIamPolicyLister returns a new TopicIamPolicyLister.
func NewTopicIamPolicyLister(indexer cache.Indexer) TopicIamPolicyLister {
	return &topicIamPolicyLister{indexer: indexer}
}

// List lists all TopicIamPolicies in the indexer.
func (s *topicIamPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.TopicIamPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TopicIamPolicy))
	})
	return ret, err
}

// TopicIamPolicies returns an object that can list and get TopicIamPolicies.
func (s *topicIamPolicyLister) TopicIamPolicies(namespace string) TopicIamPolicyNamespaceLister {
	return topicIamPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TopicIamPolicyNamespaceLister helps list and get TopicIamPolicies.
// All objects returned here must be treated as read-only.
type TopicIamPolicyNamespaceLister interface {
	// List lists all TopicIamPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TopicIamPolicy, err error)
	// Get retrieves the TopicIamPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.TopicIamPolicy, error)
	TopicIamPolicyNamespaceListerExpansion
}

// topicIamPolicyNamespaceLister implements the TopicIamPolicyNamespaceLister
// interface.
type topicIamPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TopicIamPolicies in the indexer for a given namespace.
func (s topicIamPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TopicIamPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TopicIamPolicy))
	})
	return ret, err
}

// Get retrieves the TopicIamPolicy from the indexer for a given namespace and name.
func (s topicIamPolicyNamespaceLister) Get(name string) (*v1alpha1.TopicIamPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("topiciampolicy"), name)
	}
	return obj.(*v1alpha1.TopicIamPolicy), nil
}
