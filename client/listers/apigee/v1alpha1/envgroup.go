/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-google-api/apis/apigee/v1alpha1"
)

// EnvgroupLister helps list Envgroups.
// All objects returned here must be treated as read-only.
type EnvgroupLister interface {
	// List lists all Envgroups in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Envgroup, err error)
	// Envgroups returns an object that can list and get Envgroups.
	Envgroups(namespace string) EnvgroupNamespaceLister
	EnvgroupListerExpansion
}

// envgroupLister implements the EnvgroupLister interface.
type envgroupLister struct {
	indexer cache.Indexer
}

// NewEnvgroupLister returns a new EnvgroupLister.
func NewEnvgroupLister(indexer cache.Indexer) EnvgroupLister {
	return &envgroupLister{indexer: indexer}
}

// List lists all Envgroups in the indexer.
func (s *envgroupLister) List(selector labels.Selector) (ret []*v1alpha1.Envgroup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Envgroup))
	})
	return ret, err
}

// Envgroups returns an object that can list and get Envgroups.
func (s *envgroupLister) Envgroups(namespace string) EnvgroupNamespaceLister {
	return envgroupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EnvgroupNamespaceLister helps list and get Envgroups.
// All objects returned here must be treated as read-only.
type EnvgroupNamespaceLister interface {
	// List lists all Envgroups in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Envgroup, err error)
	// Get retrieves the Envgroup from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Envgroup, error)
	EnvgroupNamespaceListerExpansion
}

// envgroupNamespaceLister implements the EnvgroupNamespaceLister
// interface.
type envgroupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Envgroups in the indexer for a given namespace.
func (s envgroupNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Envgroup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Envgroup))
	})
	return ret, err
}

// Get retrieves the Envgroup from the indexer for a given namespace and name.
func (s envgroupNamespaceLister) Get(name string) (*v1alpha1.Envgroup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("envgroup"), name)
	}
	return obj.(*v1alpha1.Envgroup), nil
}
