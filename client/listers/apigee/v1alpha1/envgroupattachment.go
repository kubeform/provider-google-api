/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-google-api/apis/apigee/v1alpha1"
)

// EnvgroupAttachmentLister helps list EnvgroupAttachments.
// All objects returned here must be treated as read-only.
type EnvgroupAttachmentLister interface {
	// List lists all EnvgroupAttachments in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EnvgroupAttachment, err error)
	// EnvgroupAttachments returns an object that can list and get EnvgroupAttachments.
	EnvgroupAttachments(namespace string) EnvgroupAttachmentNamespaceLister
	EnvgroupAttachmentListerExpansion
}

// envgroupAttachmentLister implements the EnvgroupAttachmentLister interface.
type envgroupAttachmentLister struct {
	indexer cache.Indexer
}

// NewEnvgroupAttachmentLister returns a new EnvgroupAttachmentLister.
func NewEnvgroupAttachmentLister(indexer cache.Indexer) EnvgroupAttachmentLister {
	return &envgroupAttachmentLister{indexer: indexer}
}

// List lists all EnvgroupAttachments in the indexer.
func (s *envgroupAttachmentLister) List(selector labels.Selector) (ret []*v1alpha1.EnvgroupAttachment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EnvgroupAttachment))
	})
	return ret, err
}

// EnvgroupAttachments returns an object that can list and get EnvgroupAttachments.
func (s *envgroupAttachmentLister) EnvgroupAttachments(namespace string) EnvgroupAttachmentNamespaceLister {
	return envgroupAttachmentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EnvgroupAttachmentNamespaceLister helps list and get EnvgroupAttachments.
// All objects returned here must be treated as read-only.
type EnvgroupAttachmentNamespaceLister interface {
	// List lists all EnvgroupAttachments in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EnvgroupAttachment, err error)
	// Get retrieves the EnvgroupAttachment from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.EnvgroupAttachment, error)
	EnvgroupAttachmentNamespaceListerExpansion
}

// envgroupAttachmentNamespaceLister implements the EnvgroupAttachmentNamespaceLister
// interface.
type envgroupAttachmentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EnvgroupAttachments in the indexer for a given namespace.
func (s envgroupAttachmentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.EnvgroupAttachment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EnvgroupAttachment))
	})
	return ret, err
}

// Get retrieves the EnvgroupAttachment from the indexer for a given namespace and name.
func (s envgroupAttachmentNamespaceLister) Get(name string) (*v1alpha1.EnvgroupAttachment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("envgroupattachment"), name)
	}
	return obj.(*v1alpha1.EnvgroupAttachment), nil
}
