/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/apigee/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EnvironmentIamMemberLister helps list EnvironmentIamMembers.
// All objects returned here must be treated as read-only.
type EnvironmentIamMemberLister interface {
	// List lists all EnvironmentIamMembers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EnvironmentIamMember, err error)
	// EnvironmentIamMembers returns an object that can list and get EnvironmentIamMembers.
	EnvironmentIamMembers(namespace string) EnvironmentIamMemberNamespaceLister
	EnvironmentIamMemberListerExpansion
}

// environmentIamMemberLister implements the EnvironmentIamMemberLister interface.
type environmentIamMemberLister struct {
	indexer cache.Indexer
}

// NewEnvironmentIamMemberLister returns a new EnvironmentIamMemberLister.
func NewEnvironmentIamMemberLister(indexer cache.Indexer) EnvironmentIamMemberLister {
	return &environmentIamMemberLister{indexer: indexer}
}

// List lists all EnvironmentIamMembers in the indexer.
func (s *environmentIamMemberLister) List(selector labels.Selector) (ret []*v1alpha1.EnvironmentIamMember, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EnvironmentIamMember))
	})
	return ret, err
}

// EnvironmentIamMembers returns an object that can list and get EnvironmentIamMembers.
func (s *environmentIamMemberLister) EnvironmentIamMembers(namespace string) EnvironmentIamMemberNamespaceLister {
	return environmentIamMemberNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EnvironmentIamMemberNamespaceLister helps list and get EnvironmentIamMembers.
// All objects returned here must be treated as read-only.
type EnvironmentIamMemberNamespaceLister interface {
	// List lists all EnvironmentIamMembers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EnvironmentIamMember, err error)
	// Get retrieves the EnvironmentIamMember from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.EnvironmentIamMember, error)
	EnvironmentIamMemberNamespaceListerExpansion
}

// environmentIamMemberNamespaceLister implements the EnvironmentIamMemberNamespaceLister
// interface.
type environmentIamMemberNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EnvironmentIamMembers in the indexer for a given namespace.
func (s environmentIamMemberNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.EnvironmentIamMember, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EnvironmentIamMember))
	})
	return ret, err
}

// Get retrieves the EnvironmentIamMember from the indexer for a given namespace and name.
func (s environmentIamMemberNamespaceLister) Get(name string) (*v1alpha1.EnvironmentIamMember, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("environmentiammember"), name)
	}
	return obj.(*v1alpha1.EnvironmentIamMember), nil
}
