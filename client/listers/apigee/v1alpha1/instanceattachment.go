/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/apigee/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// InstanceAttachmentLister helps list InstanceAttachments.
// All objects returned here must be treated as read-only.
type InstanceAttachmentLister interface {
	// List lists all InstanceAttachments in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.InstanceAttachment, err error)
	// InstanceAttachments returns an object that can list and get InstanceAttachments.
	InstanceAttachments(namespace string) InstanceAttachmentNamespaceLister
	InstanceAttachmentListerExpansion
}

// instanceAttachmentLister implements the InstanceAttachmentLister interface.
type instanceAttachmentLister struct {
	indexer cache.Indexer
}

// NewInstanceAttachmentLister returns a new InstanceAttachmentLister.
func NewInstanceAttachmentLister(indexer cache.Indexer) InstanceAttachmentLister {
	return &instanceAttachmentLister{indexer: indexer}
}

// List lists all InstanceAttachments in the indexer.
func (s *instanceAttachmentLister) List(selector labels.Selector) (ret []*v1alpha1.InstanceAttachment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.InstanceAttachment))
	})
	return ret, err
}

// InstanceAttachments returns an object that can list and get InstanceAttachments.
func (s *instanceAttachmentLister) InstanceAttachments(namespace string) InstanceAttachmentNamespaceLister {
	return instanceAttachmentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// InstanceAttachmentNamespaceLister helps list and get InstanceAttachments.
// All objects returned here must be treated as read-only.
type InstanceAttachmentNamespaceLister interface {
	// List lists all InstanceAttachments in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.InstanceAttachment, err error)
	// Get retrieves the InstanceAttachment from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.InstanceAttachment, error)
	InstanceAttachmentNamespaceListerExpansion
}

// instanceAttachmentNamespaceLister implements the InstanceAttachmentNamespaceLister
// interface.
type instanceAttachmentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all InstanceAttachments in the indexer for a given namespace.
func (s instanceAttachmentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.InstanceAttachment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.InstanceAttachment))
	})
	return ret, err
}

// Get retrieves the InstanceAttachment from the indexer for a given namespace and name.
func (s instanceAttachmentNamespaceLister) Get(name string) (*v1alpha1.InstanceAttachment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("instanceattachment"), name)
	}
	return obj.(*v1alpha1.InstanceAttachment), nil
}
