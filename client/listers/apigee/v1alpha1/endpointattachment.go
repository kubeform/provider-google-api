/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/apigee/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EndpointAttachmentLister helps list EndpointAttachments.
// All objects returned here must be treated as read-only.
type EndpointAttachmentLister interface {
	// List lists all EndpointAttachments in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EndpointAttachment, err error)
	// EndpointAttachments returns an object that can list and get EndpointAttachments.
	EndpointAttachments(namespace string) EndpointAttachmentNamespaceLister
	EndpointAttachmentListerExpansion
}

// endpointAttachmentLister implements the EndpointAttachmentLister interface.
type endpointAttachmentLister struct {
	indexer cache.Indexer
}

// NewEndpointAttachmentLister returns a new EndpointAttachmentLister.
func NewEndpointAttachmentLister(indexer cache.Indexer) EndpointAttachmentLister {
	return &endpointAttachmentLister{indexer: indexer}
}

// List lists all EndpointAttachments in the indexer.
func (s *endpointAttachmentLister) List(selector labels.Selector) (ret []*v1alpha1.EndpointAttachment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EndpointAttachment))
	})
	return ret, err
}

// EndpointAttachments returns an object that can list and get EndpointAttachments.
func (s *endpointAttachmentLister) EndpointAttachments(namespace string) EndpointAttachmentNamespaceLister {
	return endpointAttachmentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EndpointAttachmentNamespaceLister helps list and get EndpointAttachments.
// All objects returned here must be treated as read-only.
type EndpointAttachmentNamespaceLister interface {
	// List lists all EndpointAttachments in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EndpointAttachment, err error)
	// Get retrieves the EndpointAttachment from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.EndpointAttachment, error)
	EndpointAttachmentNamespaceListerExpansion
}

// endpointAttachmentNamespaceLister implements the EndpointAttachmentNamespaceLister
// interface.
type endpointAttachmentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EndpointAttachments in the indexer for a given namespace.
func (s endpointAttachmentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.EndpointAttachment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EndpointAttachment))
	})
	return ret, err
}

// Get retrieves the EndpointAttachment from the indexer for a given namespace and name.
func (s endpointAttachmentNamespaceLister) Get(name string) (*v1alpha1.EndpointAttachment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("endpointattachment"), name)
	}
	return obj.(*v1alpha1.EndpointAttachment), nil
}
