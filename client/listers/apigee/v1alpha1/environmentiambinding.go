/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/apigee/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EnvironmentIamBindingLister helps list EnvironmentIamBindings.
// All objects returned here must be treated as read-only.
type EnvironmentIamBindingLister interface {
	// List lists all EnvironmentIamBindings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EnvironmentIamBinding, err error)
	// EnvironmentIamBindings returns an object that can list and get EnvironmentIamBindings.
	EnvironmentIamBindings(namespace string) EnvironmentIamBindingNamespaceLister
	EnvironmentIamBindingListerExpansion
}

// environmentIamBindingLister implements the EnvironmentIamBindingLister interface.
type environmentIamBindingLister struct {
	indexer cache.Indexer
}

// NewEnvironmentIamBindingLister returns a new EnvironmentIamBindingLister.
func NewEnvironmentIamBindingLister(indexer cache.Indexer) EnvironmentIamBindingLister {
	return &environmentIamBindingLister{indexer: indexer}
}

// List lists all EnvironmentIamBindings in the indexer.
func (s *environmentIamBindingLister) List(selector labels.Selector) (ret []*v1alpha1.EnvironmentIamBinding, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EnvironmentIamBinding))
	})
	return ret, err
}

// EnvironmentIamBindings returns an object that can list and get EnvironmentIamBindings.
func (s *environmentIamBindingLister) EnvironmentIamBindings(namespace string) EnvironmentIamBindingNamespaceLister {
	return environmentIamBindingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EnvironmentIamBindingNamespaceLister helps list and get EnvironmentIamBindings.
// All objects returned here must be treated as read-only.
type EnvironmentIamBindingNamespaceLister interface {
	// List lists all EnvironmentIamBindings in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EnvironmentIamBinding, err error)
	// Get retrieves the EnvironmentIamBinding from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.EnvironmentIamBinding, error)
	EnvironmentIamBindingNamespaceListerExpansion
}

// environmentIamBindingNamespaceLister implements the EnvironmentIamBindingNamespaceLister
// interface.
type environmentIamBindingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EnvironmentIamBindings in the indexer for a given namespace.
func (s environmentIamBindingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.EnvironmentIamBinding, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EnvironmentIamBinding))
	})
	return ret, err
}

// Get retrieves the EnvironmentIamBinding from the indexer for a given namespace and name.
func (s environmentIamBindingNamespaceLister) Get(name string) (*v1alpha1.EnvironmentIamBinding, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("environmentiambinding"), name)
	}
	return obj.(*v1alpha1.EnvironmentIamBinding), nil
}
